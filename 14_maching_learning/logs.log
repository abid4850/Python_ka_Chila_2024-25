2025-01-19 13:19:37,387:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:19:37,387:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:19:37,387:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:19:37,387:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:19:55,745:INFO:PyCaret ClassificationExperiment
2025-01-19 13:19:55,745:INFO:Logging name: juice1
2025-01-19 13:19:55,745:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-19 13:19:55,748:INFO:version 3.3.2
2025-01-19 13:19:55,748:INFO:Initializing setup()
2025-01-19 13:19:55,748:INFO:self.USI: 5aa4
2025-01-19 13:19:55,748:INFO:self._variable_keys: {'memory', 'X', '_ml_usecase', 'fold_groups_param', 'pipeline', 'data', 'y_test', 'gpu_n_jobs_param', 'fold_generator', 'target_param', 'gpu_param', 'exp_id', 'logging_param', '_available_plots', 'log_plots_param', 'exp_name_log', 'X_train', 'html_param', 'X_test', 'seed', 'n_jobs_param', 'USI', 'y', 'is_multiclass', 'y_train', 'idx', 'fix_imbalance', 'fold_shuffle_param'}
2025-01-19 13:19:55,748:INFO:Checking environment
2025-01-19 13:19:55,748:INFO:python_version: 3.9.0
2025-01-19 13:19:55,748:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 13:19:55,748:INFO:machine: AMD64
2025-01-19 13:19:55,750:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 13:19:55,753:INFO:Memory: svmem(total=8416788480, available=1279827968, percent=84.8, used=7136960512, free=1279827968)
2025-01-19 13:19:55,754:INFO:Physical Core: 2
2025-01-19 13:19:55,754:INFO:Logical Core: 4
2025-01-19 13:19:55,755:INFO:Checking libraries
2025-01-19 13:19:55,755:INFO:System:
2025-01-19 13:19:55,755:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 13:19:55,755:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 13:19:55,755:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 13:19:55,755:INFO:PyCaret required dependencies:
2025-01-19 13:19:55,911:INFO:                 pip: 24.2
2025-01-19 13:19:55,911:INFO:          setuptools: 75.1.0
2025-01-19 13:19:55,911:INFO:             pycaret: 3.3.2
2025-01-19 13:19:55,911:INFO:             IPython: 8.18.1
2025-01-19 13:19:55,911:INFO:          ipywidgets: 8.1.5
2025-01-19 13:19:55,911:INFO:                tqdm: 4.67.1
2025-01-19 13:19:55,911:INFO:               numpy: 1.26.4
2025-01-19 13:19:55,911:INFO:              pandas: 2.1.4
2025-01-19 13:19:55,911:INFO:              jinja2: 3.1.5
2025-01-19 13:19:55,911:INFO:               scipy: 1.11.4
2025-01-19 13:19:55,913:INFO:              joblib: 1.3.2
2025-01-19 13:19:55,913:INFO:             sklearn: 1.4.2
2025-01-19 13:19:55,913:INFO:                pyod: 2.0.3
2025-01-19 13:19:55,913:INFO:            imblearn: 0.12.4
2025-01-19 13:19:55,913:INFO:   category_encoders: 2.6.4
2025-01-19 13:19:55,913:INFO:            lightgbm: 4.5.0
2025-01-19 13:19:55,913:INFO:               numba: 0.60.0
2025-01-19 13:19:55,913:INFO:            requests: 2.32.3
2025-01-19 13:19:55,916:INFO:          matplotlib: 3.7.5
2025-01-19 13:19:55,916:INFO:          scikitplot: 0.3.7
2025-01-19 13:19:55,916:INFO:         yellowbrick: 1.5
2025-01-19 13:19:55,916:INFO:              plotly: 5.24.1
2025-01-19 13:19:55,916:INFO:    plotly-resampler: Not installed
2025-01-19 13:19:55,916:INFO:             kaleido: 0.2.1
2025-01-19 13:19:55,916:INFO:           schemdraw: 0.15
2025-01-19 13:19:55,918:INFO:         statsmodels: 0.14.4
2025-01-19 13:19:55,918:INFO:              sktime: 0.26.0
2025-01-19 13:19:55,918:INFO:               tbats: 1.1.3
2025-01-19 13:19:55,918:INFO:            pmdarima: 2.0.4
2025-01-19 13:19:55,918:INFO:              psutil: 6.1.1
2025-01-19 13:19:55,918:INFO:          markupsafe: 3.0.2
2025-01-19 13:19:55,918:INFO:             pickle5: Not installed
2025-01-19 13:19:55,924:INFO:         cloudpickle: 3.1.1
2025-01-19 13:19:55,924:INFO:         deprecation: 2.1.0
2025-01-19 13:19:55,924:INFO:              xxhash: 3.5.0
2025-01-19 13:19:55,928:INFO:           wurlitzer: Not installed
2025-01-19 13:19:55,928:INFO:PyCaret optional dependencies:
2025-01-19 13:19:56,090:INFO:                shap: Not installed
2025-01-19 13:19:56,090:INFO:           interpret: Not installed
2025-01-19 13:19:56,090:INFO:                umap: Not installed
2025-01-19 13:19:56,090:INFO:     ydata_profiling: Not installed
2025-01-19 13:19:56,090:INFO:  explainerdashboard: Not installed
2025-01-19 13:19:56,092:INFO:             autoviz: Not installed
2025-01-19 13:19:56,092:INFO:           fairlearn: Not installed
2025-01-19 13:19:56,092:INFO:          deepchecks: Not installed
2025-01-19 13:19:56,092:INFO:             xgboost: Not installed
2025-01-19 13:19:56,092:INFO:            catboost: Not installed
2025-01-19 13:19:56,092:INFO:              kmodes: Not installed
2025-01-19 13:19:56,092:INFO:             mlxtend: Not installed
2025-01-19 13:19:56,092:INFO:       statsforecast: Not installed
2025-01-19 13:19:56,092:INFO:        tune_sklearn: Not installed
2025-01-19 13:19:56,092:INFO:                 ray: Not installed
2025-01-19 13:19:56,092:INFO:            hyperopt: Not installed
2025-01-19 13:19:56,092:INFO:              optuna: Not installed
2025-01-19 13:19:56,092:INFO:               skopt: Not installed
2025-01-19 13:19:56,092:INFO:              mlflow: Not installed
2025-01-19 13:19:56,094:INFO:              gradio: Not installed
2025-01-19 13:19:56,094:INFO:             fastapi: Not installed
2025-01-19 13:19:56,094:INFO:             uvicorn: Not installed
2025-01-19 13:19:56,094:INFO:              m2cgen: Not installed
2025-01-19 13:19:56,094:INFO:           evidently: Not installed
2025-01-19 13:19:56,098:INFO:               fugue: Not installed
2025-01-19 13:19:56,098:INFO:           streamlit: Not installed
2025-01-19 13:19:56,098:INFO:             prophet: Not installed
2025-01-19 13:19:56,098:INFO:None
2025-01-19 13:19:56,098:INFO:Set up data.
2025-01-19 13:19:56,144:INFO:Set up folding strategy.
2025-01-19 13:19:56,144:INFO:Set up train/test split.
2025-01-19 13:19:56,177:INFO:Set up index.
2025-01-19 13:19:56,177:INFO:Assigning column types.
2025-01-19 13:19:56,192:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 13:19:56,311:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:19:56,320:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:19:56,398:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:56,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:56,733:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:19:56,733:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:19:56,800:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:56,800:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:56,800:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 13:19:56,917:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:19:57,005:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,007:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,125:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:19:57,188:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,190:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-19 13:19:57,341:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,341:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,541:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,545:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:57,555:INFO:Preparing preprocessing pipeline...
2025-01-19 13:19:57,560:INFO:Set up label encoding.
2025-01-19 13:19:57,560:INFO:Set up simple imputation.
2025-01-19 13:19:57,570:INFO:Set up encoding of ordinal features.
2025-01-19 13:19:57,570:INFO:Set up encoding of categorical features.
2025-01-19 13:19:57,710:INFO:Finished creating preprocessing pipeline.
2025-01-19 13:19:57,802:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-19 13:19:57,802:INFO:Creating final display dataframe.
2025-01-19 13:19:58,248:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             5aa4
2025-01-19 13:19:58,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:58,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:59,189:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:59,189:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:19:59,192:INFO:setup() successfully completed in 3.45s...............
2025-01-19 13:20:45,159:INFO:Initializing compare_models()
2025-01-19 13:20:45,159:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 13:20:45,159:INFO:Checking exceptions
2025-01-19 13:20:45,181:INFO:Preparing display monitor
2025-01-19 13:20:45,301:INFO:Initializing Logistic Regression
2025-01-19 13:20:45,302:INFO:Total runtime is 2.0515918731689452e-05 minutes
2025-01-19 13:20:45,318:INFO:SubProcess create_model() called ==================================
2025-01-19 13:20:45,318:INFO:Initializing create_model()
2025-01-19 13:20:45,318:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:20:45,318:INFO:Checking exceptions
2025-01-19 13:20:45,318:INFO:Importing libraries
2025-01-19 13:20:45,318:INFO:Copying training dataset
2025-01-19 13:20:45,359:INFO:Defining folds
2025-01-19 13:20:45,361:INFO:Declaring metric variables
2025-01-19 13:20:45,383:INFO:Importing untrained model
2025-01-19 13:20:45,428:INFO:Logistic Regression Imported successfully
2025-01-19 13:20:45,464:INFO:Starting cross validation
2025-01-19 13:20:45,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:07,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:07,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,529:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:07,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:07,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,702:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,737:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:07,752:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:08,169:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,179:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,189:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,429:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:08,522:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:08,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,563:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:08,994:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:09,075:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,094:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:09,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:09,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:09,342:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,360:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,402:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,414:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,415:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:09,579:INFO:Calculating mean and std
2025-01-19 13:21:09,602:INFO:Creating metrics dataframe
2025-01-19 13:21:09,609:INFO:Uploading results into container
2025-01-19 13:21:09,612:INFO:Uploading model into container now
2025-01-19 13:21:09,612:INFO:_master_model_container: 1
2025-01-19 13:21:09,612:INFO:_display_container: 2
2025-01-19 13:21:09,612:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:21:09,612:INFO:create_model() successfully completed......................................
2025-01-19 13:21:09,844:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:09,844:INFO:Creating metrics dataframe
2025-01-19 13:21:09,881:INFO:Initializing K Neighbors Classifier
2025-01-19 13:21:09,881:INFO:Total runtime is 0.409665322303772 minutes
2025-01-19 13:21:09,898:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:09,909:INFO:Initializing create_model()
2025-01-19 13:21:09,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:09,909:INFO:Checking exceptions
2025-01-19 13:21:09,909:INFO:Importing libraries
2025-01-19 13:21:09,939:INFO:Copying training dataset
2025-01-19 13:21:09,988:INFO:Defining folds
2025-01-19 13:21:09,988:INFO:Declaring metric variables
2025-01-19 13:21:10,011:INFO:Importing untrained model
2025-01-19 13:21:10,029:INFO:K Neighbors Classifier Imported successfully
2025-01-19 13:21:10,099:INFO:Starting cross validation
2025-01-19 13:21:10,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:10,864:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,919:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,931:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,949:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,965:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:10,982:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,464:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,540:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,621:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,691:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,695:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,703:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,889:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,955:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:11,982:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,022:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,069:INFO:Calculating mean and std
2025-01-19 13:21:12,074:INFO:Creating metrics dataframe
2025-01-19 13:21:12,079:INFO:Uploading results into container
2025-01-19 13:21:12,079:INFO:Uploading model into container now
2025-01-19 13:21:12,084:INFO:_master_model_container: 2
2025-01-19 13:21:12,084:INFO:_display_container: 2
2025-01-19 13:21:12,085:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-19 13:21:12,085:INFO:create_model() successfully completed......................................
2025-01-19 13:21:12,219:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:12,219:INFO:Creating metrics dataframe
2025-01-19 13:21:12,255:INFO:Initializing Naive Bayes
2025-01-19 13:21:12,257:INFO:Total runtime is 0.44926207462946577 minutes
2025-01-19 13:21:12,276:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:12,279:INFO:Initializing create_model()
2025-01-19 13:21:12,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:12,279:INFO:Checking exceptions
2025-01-19 13:21:12,279:INFO:Importing libraries
2025-01-19 13:21:12,279:INFO:Copying training dataset
2025-01-19 13:21:12,322:INFO:Defining folds
2025-01-19 13:21:12,324:INFO:Declaring metric variables
2025-01-19 13:21:12,347:INFO:Importing untrained model
2025-01-19 13:21:12,373:INFO:Naive Bayes Imported successfully
2025-01-19 13:21:12,450:INFO:Starting cross validation
2025-01-19 13:21:12,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:12,763:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,803:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,811:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,819:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,866:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:12,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,189:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,197:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,219:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,219:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,231:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,242:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,259:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,466:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,521:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:13,542:INFO:Calculating mean and std
2025-01-19 13:21:13,546:INFO:Creating metrics dataframe
2025-01-19 13:21:13,555:INFO:Uploading results into container
2025-01-19 13:21:13,559:INFO:Uploading model into container now
2025-01-19 13:21:13,559:INFO:_master_model_container: 3
2025-01-19 13:21:13,559:INFO:_display_container: 2
2025-01-19 13:21:13,559:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-19 13:21:13,559:INFO:create_model() successfully completed......................................
2025-01-19 13:21:13,673:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:13,673:INFO:Creating metrics dataframe
2025-01-19 13:21:13,699:INFO:Initializing Decision Tree Classifier
2025-01-19 13:21:13,699:INFO:Total runtime is 0.4732979377110799 minutes
2025-01-19 13:21:13,713:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:13,714:INFO:Initializing create_model()
2025-01-19 13:21:13,714:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:13,714:INFO:Checking exceptions
2025-01-19 13:21:13,714:INFO:Importing libraries
2025-01-19 13:21:13,714:INFO:Copying training dataset
2025-01-19 13:21:13,759:INFO:Defining folds
2025-01-19 13:21:13,760:INFO:Declaring metric variables
2025-01-19 13:21:13,790:INFO:Importing untrained model
2025-01-19 13:21:13,819:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:21:13,855:INFO:Starting cross validation
2025-01-19 13:21:13,859:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:14,336:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,424:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,541:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,809:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,824:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,841:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,915:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,915:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,944:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,959:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:14,974:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,060:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,069:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,093:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,104:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,132:INFO:Calculating mean and std
2025-01-19 13:21:15,140:INFO:Creating metrics dataframe
2025-01-19 13:21:15,170:INFO:Uploading results into container
2025-01-19 13:21:15,174:INFO:Uploading model into container now
2025-01-19 13:21:15,176:INFO:_master_model_container: 4
2025-01-19 13:21:15,178:INFO:_display_container: 2
2025-01-19 13:21:15,190:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 13:21:15,190:INFO:create_model() successfully completed......................................
2025-01-19 13:21:15,386:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:15,386:INFO:Creating metrics dataframe
2025-01-19 13:21:15,413:INFO:Initializing SVM - Linear Kernel
2025-01-19 13:21:15,413:INFO:Total runtime is 0.5018656929334004 minutes
2025-01-19 13:21:15,425:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:15,427:INFO:Initializing create_model()
2025-01-19 13:21:15,427:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:15,427:INFO:Checking exceptions
2025-01-19 13:21:15,427:INFO:Importing libraries
2025-01-19 13:21:15,427:INFO:Copying training dataset
2025-01-19 13:21:15,469:INFO:Defining folds
2025-01-19 13:21:15,469:INFO:Declaring metric variables
2025-01-19 13:21:15,483:INFO:Importing untrained model
2025-01-19 13:21:15,514:INFO:SVM - Linear Kernel Imported successfully
2025-01-19 13:21:15,546:INFO:Starting cross validation
2025-01-19 13:21:15,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:15,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:15,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,904:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:15,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:15,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,955:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,974:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:15,979:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:15,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:16,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,274:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,289:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

fier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:16,294:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,312:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,320:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,441:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:16,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:16,499:INFO:Calculating mean and std
2025-01-19 13:21:16,500:INFO:Creating metrics dataframe
2025-01-19 13:21:16,510:INFO:Uploading results into container
2025-01-19 13:21:16,512:INFO:Uploading model into container now
2025-01-19 13:21:16,514:INFO:_master_model_container: 5
2025-01-19 13:21:16,514:INFO:_display_container: 2
2025-01-19 13:21:16,517:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-19 13:21:16,517:INFO:create_model() successfully completed......................................
2025-01-19 13:21:16,629:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:16,629:INFO:Creating metrics dataframe
2025-01-19 13:21:16,649:INFO:Initializing Ridge Classifier
2025-01-19 13:21:16,649:INFO:Total runtime is 0.522463345527649 minutes
2025-01-19 13:21:16,659:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:16,659:INFO:Initializing create_model()
2025-01-19 13:21:16,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:16,659:INFO:Checking exceptions
2025-01-19 13:21:16,661:INFO:Importing libraries
2025-01-19 13:21:16,661:INFO:Copying training dataset
2025-01-19 13:21:16,689:INFO:Defining folds
2025-01-19 13:21:16,694:INFO:Declaring metric variables
2025-01-19 13:21:16,710:INFO:Importing untrained model
2025-01-19 13:21:16,729:INFO:Ridge Classifier Imported successfully
2025-01-19 13:21:16,764:INFO:Starting cross validation
2025-01-19 13:21:16,770:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:17,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,154:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,179:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,179:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,189:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,189:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,202:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,219:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,451:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,475:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,538:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,539:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,947:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,955:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:17,989:INFO:Calculating mean and std
2025-01-19 13:21:17,991:INFO:Creating metrics dataframe
2025-01-19 13:21:17,999:INFO:Uploading results into container
2025-01-19 13:21:18,004:INFO:Uploading model into container now
2025-01-19 13:21:18,004:INFO:_master_model_container: 6
2025-01-19 13:21:18,004:INFO:_display_container: 2
2025-01-19 13:21:18,009:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-19 13:21:18,009:INFO:create_model() successfully completed......................................
2025-01-19 13:21:18,164:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:18,164:INFO:Creating metrics dataframe
2025-01-19 13:21:18,190:INFO:Initializing Random Forest Classifier
2025-01-19 13:21:18,190:INFO:Total runtime is 0.5481475194295248 minutes
2025-01-19 13:21:18,199:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:18,199:INFO:Initializing create_model()
2025-01-19 13:21:18,199:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:18,199:INFO:Checking exceptions
2025-01-19 13:21:18,202:INFO:Importing libraries
2025-01-19 13:21:18,203:INFO:Copying training dataset
2025-01-19 13:21:18,212:INFO:Defining folds
2025-01-19 13:21:18,212:INFO:Declaring metric variables
2025-01-19 13:21:18,243:INFO:Importing untrained model
2025-01-19 13:21:18,262:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:21:18,321:INFO:Starting cross validation
2025-01-19 13:21:18,323:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:19,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,759:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,790:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,810:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,819:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:19,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,109:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,676:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,685:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,694:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,774:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,786:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:21,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,302:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,321:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,362:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,369:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:22,395:INFO:Calculating mean and std
2025-01-19 13:21:22,397:INFO:Creating metrics dataframe
2025-01-19 13:21:22,401:INFO:Uploading results into container
2025-01-19 13:21:22,402:INFO:Uploading model into container now
2025-01-19 13:21:22,402:INFO:_master_model_container: 7
2025-01-19 13:21:22,405:INFO:_display_container: 2
2025-01-19 13:21:22,407:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:21:22,433:INFO:create_model() successfully completed......................................
2025-01-19 13:21:22,542:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:22,542:INFO:Creating metrics dataframe
2025-01-19 13:21:22,566:INFO:Initializing Quadratic Discriminant Analysis
2025-01-19 13:21:22,566:INFO:Total runtime is 0.6210875391960144 minutes
2025-01-19 13:21:22,576:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:22,577:INFO:Initializing create_model()
2025-01-19 13:21:22,577:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:22,577:INFO:Checking exceptions
2025-01-19 13:21:22,577:INFO:Importing libraries
2025-01-19 13:21:22,579:INFO:Copying training dataset
2025-01-19 13:21:22,609:INFO:Defining folds
2025-01-19 13:21:22,609:INFO:Declaring metric variables
2025-01-19 13:21:22,630:INFO:Importing untrained model
2025-01-19 13:21:22,739:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-19 13:21:22,834:INFO:Starting cross validation
2025-01-19 13:21:22,839:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:23,184:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,211:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,323:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,355:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,364:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,387:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,589:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,665:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:23,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,764:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,852:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,929:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:23,992:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:24,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:21:24,061:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,109:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:24,131:INFO:Calculating mean and std
2025-01-19 13:21:24,133:INFO:Creating metrics dataframe
2025-01-19 13:21:24,137:INFO:Uploading results into container
2025-01-19 13:21:24,139:INFO:Uploading model into container now
2025-01-19 13:21:24,140:INFO:_master_model_container: 8
2025-01-19 13:21:24,142:INFO:_display_container: 2
2025-01-19 13:21:24,142:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-19 13:21:24,142:INFO:create_model() successfully completed......................................
2025-01-19 13:21:24,280:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:24,280:INFO:Creating metrics dataframe
2025-01-19 13:21:24,314:INFO:Initializing Ada Boost Classifier
2025-01-19 13:21:24,314:INFO:Total runtime is 0.6502092758814494 minutes
2025-01-19 13:21:24,329:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:24,332:INFO:Initializing create_model()
2025-01-19 13:21:24,332:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:24,333:INFO:Checking exceptions
2025-01-19 13:21:24,333:INFO:Importing libraries
2025-01-19 13:21:24,333:INFO:Copying training dataset
2025-01-19 13:21:24,362:INFO:Defining folds
2025-01-19 13:21:24,362:INFO:Declaring metric variables
2025-01-19 13:21:24,385:INFO:Importing untrained model
2025-01-19 13:21:24,406:INFO:Ada Boost Classifier Imported successfully
2025-01-19 13:21:24,454:INFO:Starting cross validation
2025-01-19 13:21:24,465:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:24,754:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:24,754:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:24,765:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:24,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:25,731:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,731:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,773:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,795:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,805:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,841:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,852:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:25,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:26,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:26,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:26,043:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:26,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,659:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,663:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,677:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,689:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,715:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:26,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:26,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:21:27,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,169:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:27,194:INFO:Calculating mean and std
2025-01-19 13:21:27,197:INFO:Creating metrics dataframe
2025-01-19 13:21:27,209:INFO:Uploading results into container
2025-01-19 13:21:27,209:INFO:Uploading model into container now
2025-01-19 13:21:27,214:INFO:_master_model_container: 9
2025-01-19 13:21:27,214:INFO:_display_container: 2
2025-01-19 13:21:27,214:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 13:21:27,214:INFO:create_model() successfully completed......................................
2025-01-19 13:21:27,352:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:27,352:INFO:Creating metrics dataframe
2025-01-19 13:21:27,381:INFO:Initializing Gradient Boosting Classifier
2025-01-19 13:21:27,381:INFO:Total runtime is 0.7013341983159384 minutes
2025-01-19 13:21:27,399:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:27,400:INFO:Initializing create_model()
2025-01-19 13:21:27,402:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:27,402:INFO:Checking exceptions
2025-01-19 13:21:27,402:INFO:Importing libraries
2025-01-19 13:21:27,402:INFO:Copying training dataset
2025-01-19 13:21:27,434:INFO:Defining folds
2025-01-19 13:21:27,439:INFO:Declaring metric variables
2025-01-19 13:21:27,462:INFO:Importing untrained model
2025-01-19 13:21:27,482:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:21:27,514:INFO:Starting cross validation
2025-01-19 13:21:27,516:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:28,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,756:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,773:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,805:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,809:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,815:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,829:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:28,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:29,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:29,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,070:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,089:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,113:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,222:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:30,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,072:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,079:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,089:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,089:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,126:INFO:Calculating mean and std
2025-01-19 13:21:31,139:INFO:Creating metrics dataframe
2025-01-19 13:21:31,154:INFO:Uploading results into container
2025-01-19 13:21:31,154:INFO:Uploading model into container now
2025-01-19 13:21:31,154:INFO:_master_model_container: 10
2025-01-19 13:21:31,154:INFO:_display_container: 2
2025-01-19 13:21:31,154:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:21:31,154:INFO:create_model() successfully completed......................................
2025-01-19 13:21:31,289:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:31,289:INFO:Creating metrics dataframe
2025-01-19 13:21:31,322:INFO:Initializing Linear Discriminant Analysis
2025-01-19 13:21:31,324:INFO:Total runtime is 0.7670425415039063 minutes
2025-01-19 13:21:31,340:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:31,340:INFO:Initializing create_model()
2025-01-19 13:21:31,340:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:31,340:INFO:Checking exceptions
2025-01-19 13:21:31,340:INFO:Importing libraries
2025-01-19 13:21:31,340:INFO:Copying training dataset
2025-01-19 13:21:31,370:INFO:Defining folds
2025-01-19 13:21:31,370:INFO:Declaring metric variables
2025-01-19 13:21:31,399:INFO:Importing untrained model
2025-01-19 13:21:31,436:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:21:31,479:INFO:Starting cross validation
2025-01-19 13:21:31,479:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:31,822:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,852:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,859:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,869:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,882:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,882:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:31,918:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,212:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,220:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,241:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,244:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,484:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,489:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:32,558:INFO:Calculating mean and std
2025-01-19 13:21:32,559:INFO:Creating metrics dataframe
2025-01-19 13:21:32,565:INFO:Uploading results into container
2025-01-19 13:21:32,569:INFO:Uploading model into container now
2025-01-19 13:21:32,569:INFO:_master_model_container: 11
2025-01-19 13:21:32,569:INFO:_display_container: 2
2025-01-19 13:21:32,571:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:21:32,571:INFO:create_model() successfully completed......................................
2025-01-19 13:21:32,789:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:32,789:INFO:Creating metrics dataframe
2025-01-19 13:21:32,829:INFO:Initializing Extra Trees Classifier
2025-01-19 13:21:32,829:INFO:Total runtime is 0.7921347260475159 minutes
2025-01-19 13:21:32,852:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:32,853:INFO:Initializing create_model()
2025-01-19 13:21:32,854:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:32,854:INFO:Checking exceptions
2025-01-19 13:21:32,854:INFO:Importing libraries
2025-01-19 13:21:32,855:INFO:Copying training dataset
2025-01-19 13:21:32,940:INFO:Defining folds
2025-01-19 13:21:32,944:INFO:Declaring metric variables
2025-01-19 13:21:32,969:INFO:Importing untrained model
2025-01-19 13:21:33,019:INFO:Extra Trees Classifier Imported successfully
2025-01-19 13:21:33,053:INFO:Starting cross validation
2025-01-19 13:21:33,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:36,739:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,824:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:36,829:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:37,022:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:37,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:37,122:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,814:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,827:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,827:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:38,932:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:39,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:39,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:39,227:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,029:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:40,103:INFO:Calculating mean and std
2025-01-19 13:21:40,107:INFO:Creating metrics dataframe
2025-01-19 13:21:40,112:INFO:Uploading results into container
2025-01-19 13:21:40,112:INFO:Uploading model into container now
2025-01-19 13:21:40,114:INFO:_master_model_container: 12
2025-01-19 13:21:40,114:INFO:_display_container: 2
2025-01-19 13:21:40,114:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 13:21:40,114:INFO:create_model() successfully completed......................................
2025-01-19 13:21:40,245:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:40,249:INFO:Creating metrics dataframe
2025-01-19 13:21:40,277:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:21:40,277:INFO:Total runtime is 0.9162599205970764 minutes
2025-01-19 13:21:40,286:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:40,289:INFO:Initializing create_model()
2025-01-19 13:21:40,289:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:40,289:INFO:Checking exceptions
2025-01-19 13:21:40,291:INFO:Importing libraries
2025-01-19 13:21:40,291:INFO:Copying training dataset
2025-01-19 13:21:40,313:INFO:Defining folds
2025-01-19 13:21:40,315:INFO:Declaring metric variables
2025-01-19 13:21:40,438:INFO:Importing untrained model
2025-01-19 13:21:40,458:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:21:40,528:INFO:Starting cross validation
2025-01-19 13:21:40,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:42,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,725:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,739:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,801:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:42,999:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,173:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,181:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,244:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,489:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:44,495:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,218:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,221:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,311:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:45,329:INFO:Calculating mean and std
2025-01-19 13:21:45,331:INFO:Creating metrics dataframe
2025-01-19 13:21:45,335:INFO:Uploading results into container
2025-01-19 13:21:45,335:INFO:Uploading model into container now
2025-01-19 13:21:45,339:INFO:_master_model_container: 13
2025-01-19 13:21:45,339:INFO:_display_container: 2
2025-01-19 13:21:45,340:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 13:21:45,341:INFO:create_model() successfully completed......................................
2025-01-19 13:21:45,554:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:45,554:INFO:Creating metrics dataframe
2025-01-19 13:21:45,586:INFO:Initializing Dummy Classifier
2025-01-19 13:21:45,586:INFO:Total runtime is 1.0047406713167826 minutes
2025-01-19 13:21:45,601:INFO:SubProcess create_model() called ==================================
2025-01-19 13:21:45,601:INFO:Initializing create_model()
2025-01-19 13:21:45,601:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EC9B9C760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:45,601:INFO:Checking exceptions
2025-01-19 13:21:45,601:INFO:Importing libraries
2025-01-19 13:21:45,604:INFO:Copying training dataset
2025-01-19 13:21:45,634:INFO:Defining folds
2025-01-19 13:21:45,634:INFO:Declaring metric variables
2025-01-19 13:21:45,699:INFO:Importing untrained model
2025-01-19 13:21:45,722:INFO:Dummy Classifier Imported successfully
2025-01-19 13:21:45,765:INFO:Starting cross validation
2025-01-19 13:21:45,769:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:46,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,204:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,220:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,242:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,242:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,259:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,302:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,309:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,679:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,689:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,689:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,694:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,710:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,714:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:46,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:46,795:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,113:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,132:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:47,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,163:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:21:47,163:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:47,199:INFO:Calculating mean and std
2025-01-19 13:21:47,202:INFO:Creating metrics dataframe
2025-01-19 13:21:47,211:INFO:Uploading results into container
2025-01-19 13:21:47,224:INFO:Uploading model into container now
2025-01-19 13:21:47,227:INFO:_master_model_container: 14
2025-01-19 13:21:47,227:INFO:_display_container: 2
2025-01-19 13:21:47,229:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-19 13:21:47,229:INFO:create_model() successfully completed......................................
2025-01-19 13:21:47,403:INFO:SubProcess create_model() end ==================================
2025-01-19 13:21:47,403:INFO:Creating metrics dataframe
2025-01-19 13:21:47,589:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:21:47,662:INFO:Initializing create_model()
2025-01-19 13:21:47,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:47,674:INFO:Checking exceptions
2025-01-19 13:21:47,680:INFO:Importing libraries
2025-01-19 13:21:47,680:INFO:Copying training dataset
2025-01-19 13:21:47,743:INFO:Defining folds
2025-01-19 13:21:47,743:INFO:Declaring metric variables
2025-01-19 13:21:47,743:INFO:Importing untrained model
2025-01-19 13:21:47,743:INFO:Declaring custom model
2025-01-19 13:21:47,749:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:21:47,752:INFO:Cross validation set to False
2025-01-19 13:21:47,752:INFO:Fitting Model
2025-01-19 13:21:47,999:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:21:47,999:INFO:create_model() successfully completed......................................
2025-01-19 13:21:48,261:INFO:_master_model_container: 14
2025-01-19 13:21:48,261:INFO:_display_container: 2
2025-01-19 13:21:48,263:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:21:48,263:INFO:compare_models() successfully completed......................................
2025-01-19 13:21:48,609:INFO:Initializing create_model()
2025-01-19 13:21:48,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:48,609:INFO:Checking exceptions
2025-01-19 13:21:48,664:INFO:Importing libraries
2025-01-19 13:21:48,664:INFO:Copying training dataset
2025-01-19 13:21:48,740:INFO:Defining folds
2025-01-19 13:21:48,740:INFO:Declaring metric variables
2025-01-19 13:21:48,756:INFO:Importing untrained model
2025-01-19 13:21:48,779:INFO:Logistic Regression Imported successfully
2025-01-19 13:21:48,850:INFO:Starting cross validation
2025-01-19 13:21:48,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:50,291:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:50,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:50,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:50,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:50,432:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,501:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,519:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,539:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:50,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,349:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,405:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,423:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,472:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,472:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,484:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,494:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,513:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:51,959:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,963:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,970:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,980:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:51,995:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:52,010:INFO:Calculating mean and std
2025-01-19 13:21:52,010:INFO:Creating metrics dataframe
2025-01-19 13:21:52,029:INFO:Finalizing model
2025-01-19 13:21:53,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:21:53,452:INFO:Uploading results into container
2025-01-19 13:21:53,452:INFO:Uploading model into container now
2025-01-19 13:21:53,559:INFO:_master_model_container: 15
2025-01-19 13:21:53,559:INFO:_display_container: 3
2025-01-19 13:21:53,569:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:21:53,570:INFO:create_model() successfully completed......................................
2025-01-19 13:21:54,240:INFO:Initializing create_model()
2025-01-19 13:21:54,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:21:54,240:INFO:Checking exceptions
2025-01-19 13:21:54,299:INFO:Importing libraries
2025-01-19 13:21:54,299:INFO:Copying training dataset
2025-01-19 13:21:54,372:INFO:Defining folds
2025-01-19 13:21:54,372:INFO:Declaring metric variables
2025-01-19 13:21:54,389:INFO:Importing untrained model
2025-01-19 13:21:54,399:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:21:54,484:INFO:Starting cross validation
2025-01-19 13:21:54,490:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:21:55,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,281:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,529:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:55,539:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,524:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,569:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,713:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,713:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,729:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:21:56,761:INFO:Calculating mean and std
2025-01-19 13:21:56,763:INFO:Creating metrics dataframe
2025-01-19 13:21:56,779:INFO:Finalizing model
2025-01-19 13:21:56,893:INFO:Uploading results into container
2025-01-19 13:21:56,893:INFO:Uploading model into container now
2025-01-19 13:21:56,959:INFO:_master_model_container: 16
2025-01-19 13:21:56,959:INFO:_display_container: 4
2025-01-19 13:21:56,959:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 13:21:56,959:INFO:create_model() successfully completed......................................
2025-01-19 13:22:10,715:INFO:Initializing create_model()
2025-01-19 13:22:10,715:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:22:10,715:INFO:Checking exceptions
2025-01-19 13:22:10,788:INFO:Importing libraries
2025-01-19 13:22:10,788:INFO:Copying training dataset
2025-01-19 13:22:10,837:INFO:Defining folds
2025-01-19 13:22:10,837:INFO:Declaring metric variables
2025-01-19 13:22:10,912:INFO:Importing untrained model
2025-01-19 13:22:10,937:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:22:11,060:INFO:Starting cross validation
2025-01-19 13:22:11,065:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:22:13,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,866:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,880:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,887:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,908:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,970:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:13,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,861:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,863:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:14,901:INFO:Calculating mean and std
2025-01-19 13:22:14,905:INFO:Creating metrics dataframe
2025-01-19 13:22:14,923:INFO:Finalizing model
2025-01-19 13:22:15,492:INFO:Uploading results into container
2025-01-19 13:22:15,492:INFO:Uploading model into container now
2025-01-19 13:22:15,524:INFO:_master_model_container: 17
2025-01-19 13:22:15,524:INFO:_display_container: 5
2025-01-19 13:22:15,525:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:22:15,525:INFO:create_model() successfully completed......................................
2025-01-19 13:22:26,260:INFO:Initializing create_model()
2025-01-19 13:22:26,260:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:22:26,260:INFO:Checking exceptions
2025-01-19 13:22:26,316:INFO:Importing libraries
2025-01-19 13:22:26,316:INFO:Copying training dataset
2025-01-19 13:22:26,345:INFO:Defining folds
2025-01-19 13:22:26,345:INFO:Declaring metric variables
2025-01-19 13:22:26,358:INFO:Importing untrained model
2025-01-19 13:22:26,374:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:22:26,426:INFO:Starting cross validation
2025-01-19 13:22:26,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:22:27,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,411:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,421:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,451:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,476:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,546:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:27,563:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,035:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,058:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,153:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,187:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,196:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,260:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,415:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,430:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,445:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,466:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,476:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:22:28,509:INFO:Calculating mean and std
2025-01-19 13:22:28,510:INFO:Creating metrics dataframe
2025-01-19 13:22:28,525:INFO:Finalizing model
2025-01-19 13:22:28,644:INFO:Uploading results into container
2025-01-19 13:22:28,648:INFO:Uploading model into container now
2025-01-19 13:22:28,715:INFO:_master_model_container: 18
2025-01-19 13:22:28,715:INFO:_display_container: 6
2025-01-19 13:22:28,715:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:22:28,718:INFO:create_model() successfully completed......................................
2025-01-19 13:22:45,156:INFO:gpu_param set to False
2025-01-19 13:22:45,605:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:22:45,605:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:22:45,723:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:22:45,723:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:04,862:INFO:gpu_param set to False
2025-01-19 13:23:05,567:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:05,567:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:05,730:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:05,730:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:30,327:INFO:gpu_param set to False
2025-01-19 13:23:30,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:30,938:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:31,301:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:31,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:23:31,303:INFO:Initializing compare_models()
2025-01-19 13:23:31,303:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 13:23:31,303:INFO:Checking exceptions
2025-01-19 13:23:31,311:INFO:Preparing display monitor
2025-01-19 13:23:31,690:INFO:Initializing Random Forest Classifier
2025-01-19 13:23:31,698:INFO:Total runtime is 0.0001204530398050944 minutes
2025-01-19 13:23:31,722:INFO:SubProcess create_model() called ==================================
2025-01-19 13:23:31,722:INFO:Initializing create_model()
2025-01-19 13:23:31,722:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EDEE5E9D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:31,722:INFO:Checking exceptions
2025-01-19 13:23:31,726:INFO:Importing libraries
2025-01-19 13:23:31,726:INFO:Copying training dataset
2025-01-19 13:23:31,962:INFO:Defining folds
2025-01-19 13:23:31,962:INFO:Declaring metric variables
2025-01-19 13:23:32,082:INFO:Importing untrained model
2025-01-19 13:23:32,095:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:23:32,215:INFO:Starting cross validation
2025-01-19 13:23:32,223:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:23:33,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:33,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:33,831:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:33,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:33,866:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:34,291:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:34,304:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:34,321:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:34,346:INFO:Calculating mean and std
2025-01-19 13:23:34,352:INFO:Creating metrics dataframe
2025-01-19 13:23:34,355:INFO:Uploading results into container
2025-01-19 13:23:34,355:INFO:Uploading model into container now
2025-01-19 13:23:34,357:INFO:_master_model_container: 19
2025-01-19 13:23:34,363:INFO:_display_container: 7
2025-01-19 13:23:34,363:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:23:34,363:INFO:create_model() successfully completed......................................
2025-01-19 13:23:34,544:INFO:SubProcess create_model() end ==================================
2025-01-19 13:23:34,550:INFO:Creating metrics dataframe
2025-01-19 13:23:34,578:INFO:Initializing Ada Boost Classifier
2025-01-19 13:23:34,578:INFO:Total runtime is 0.04813339710235596 minutes
2025-01-19 13:23:34,594:INFO:SubProcess create_model() called ==================================
2025-01-19 13:23:34,594:INFO:Initializing create_model()
2025-01-19 13:23:34,594:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EDEE5E9D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:34,603:INFO:Checking exceptions
2025-01-19 13:23:34,603:INFO:Importing libraries
2025-01-19 13:23:34,603:INFO:Copying training dataset
2025-01-19 13:23:34,718:INFO:Defining folds
2025-01-19 13:23:34,772:INFO:Declaring metric variables
2025-01-19 13:23:34,803:INFO:Importing untrained model
2025-01-19 13:23:34,844:INFO:Ada Boost Classifier Imported successfully
2025-01-19 13:23:34,909:INFO:Starting cross validation
2025-01-19 13:23:34,910:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:23:35,082:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:23:35,099:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:23:35,115:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:23:35,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,851:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,851:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,867:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,867:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:35,950:INFO:Calculating mean and std
2025-01-19 13:23:35,973:INFO:Creating metrics dataframe
2025-01-19 13:23:35,981:INFO:Uploading results into container
2025-01-19 13:23:35,981:INFO:Uploading model into container now
2025-01-19 13:23:35,981:INFO:_master_model_container: 20
2025-01-19 13:23:35,981:INFO:_display_container: 7
2025-01-19 13:23:35,981:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 13:23:35,981:INFO:create_model() successfully completed......................................
2025-01-19 13:23:36,165:INFO:SubProcess create_model() end ==================================
2025-01-19 13:23:36,167:INFO:Creating metrics dataframe
2025-01-19 13:23:36,205:INFO:Initializing Gradient Boosting Classifier
2025-01-19 13:23:36,205:INFO:Total runtime is 0.07524216572443644 minutes
2025-01-19 13:23:36,277:INFO:SubProcess create_model() called ==================================
2025-01-19 13:23:36,284:INFO:Initializing create_model()
2025-01-19 13:23:36,288:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EDEE5E9D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:36,288:INFO:Checking exceptions
2025-01-19 13:23:36,288:INFO:Importing libraries
2025-01-19 13:23:36,288:INFO:Copying training dataset
2025-01-19 13:23:36,317:INFO:Defining folds
2025-01-19 13:23:36,351:INFO:Declaring metric variables
2025-01-19 13:23:36,427:INFO:Importing untrained model
2025-01-19 13:23:36,442:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:23:36,595:INFO:Starting cross validation
2025-01-19 13:23:36,601:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:23:38,521:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,538:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,539:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,574:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,579:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:38,651:INFO:Calculating mean and std
2025-01-19 13:23:38,657:INFO:Creating metrics dataframe
2025-01-19 13:23:38,665:INFO:Uploading results into container
2025-01-19 13:23:38,674:INFO:Uploading model into container now
2025-01-19 13:23:38,676:INFO:_master_model_container: 21
2025-01-19 13:23:38,676:INFO:_display_container: 7
2025-01-19 13:23:38,680:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:23:38,680:INFO:create_model() successfully completed......................................
2025-01-19 13:23:38,838:INFO:SubProcess create_model() end ==================================
2025-01-19 13:23:38,841:INFO:Creating metrics dataframe
2025-01-19 13:23:38,867:INFO:Initializing Extra Trees Classifier
2025-01-19 13:23:38,867:INFO:Total runtime is 0.11961509386698405 minutes
2025-01-19 13:23:38,884:INFO:SubProcess create_model() called ==================================
2025-01-19 13:23:38,884:INFO:Initializing create_model()
2025-01-19 13:23:38,884:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EDEE5E9D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:38,884:INFO:Checking exceptions
2025-01-19 13:23:38,884:INFO:Importing libraries
2025-01-19 13:23:38,884:INFO:Copying training dataset
2025-01-19 13:23:38,929:INFO:Defining folds
2025-01-19 13:23:38,932:INFO:Declaring metric variables
2025-01-19 13:23:38,960:INFO:Importing untrained model
2025-01-19 13:23:38,985:INFO:Extra Trees Classifier Imported successfully
2025-01-19 13:23:39,025:INFO:Starting cross validation
2025-01-19 13:23:39,030:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:23:41,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,414:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,423:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,429:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,436:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,664:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,678:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,696:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:41,710:INFO:Calculating mean and std
2025-01-19 13:23:41,714:INFO:Creating metrics dataframe
2025-01-19 13:23:41,719:INFO:Uploading results into container
2025-01-19 13:23:41,719:INFO:Uploading model into container now
2025-01-19 13:23:41,725:INFO:_master_model_container: 22
2025-01-19 13:23:41,725:INFO:_display_container: 7
2025-01-19 13:23:41,727:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 13:23:41,727:INFO:create_model() successfully completed......................................
2025-01-19 13:23:42,085:INFO:SubProcess create_model() end ==================================
2025-01-19 13:23:42,088:INFO:Creating metrics dataframe
2025-01-19 13:23:42,162:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:23:42,165:INFO:Total runtime is 0.17457372347513833 minutes
2025-01-19 13:23:42,178:INFO:SubProcess create_model() called ==================================
2025-01-19 13:23:42,178:INFO:Initializing create_model()
2025-01-19 13:23:42,185:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023EDEE5E9D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:42,185:INFO:Checking exceptions
2025-01-19 13:23:42,185:INFO:Importing libraries
2025-01-19 13:23:42,185:INFO:Copying training dataset
2025-01-19 13:23:42,245:INFO:Defining folds
2025-01-19 13:23:42,245:INFO:Declaring metric variables
2025-01-19 13:23:42,314:INFO:Importing untrained model
2025-01-19 13:23:42,345:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:23:42,498:INFO:Starting cross validation
2025-01-19 13:23:42,507:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:23:44,669:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,684:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,695:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,883:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:23:44,933:INFO:Calculating mean and std
2025-01-19 13:23:44,935:INFO:Creating metrics dataframe
2025-01-19 13:23:44,945:INFO:Uploading results into container
2025-01-19 13:23:44,949:INFO:Uploading model into container now
2025-01-19 13:23:44,949:INFO:_master_model_container: 23
2025-01-19 13:23:44,949:INFO:_display_container: 7
2025-01-19 13:23:44,952:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 13:23:44,952:INFO:create_model() successfully completed......................................
2025-01-19 13:23:45,085:INFO:SubProcess create_model() end ==================================
2025-01-19 13:23:45,085:INFO:Creating metrics dataframe
2025-01-19 13:23:45,113:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:23:45,203:INFO:Initializing create_model()
2025-01-19 13:23:45,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023ED21F66D0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:23:45,205:INFO:Checking exceptions
2025-01-19 13:23:45,215:INFO:Importing libraries
2025-01-19 13:23:45,215:INFO:Copying training dataset
2025-01-19 13:23:45,251:INFO:Defining folds
2025-01-19 13:23:45,251:INFO:Declaring metric variables
2025-01-19 13:23:45,251:INFO:Importing untrained model
2025-01-19 13:23:45,256:INFO:Declaring custom model
2025-01-19 13:23:45,260:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:23:45,279:INFO:Cross validation set to False
2025-01-19 13:23:45,279:INFO:Fitting Model
2025-01-19 13:23:45,953:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:23:45,953:INFO:create_model() successfully completed......................................
2025-01-19 13:23:46,210:INFO:_master_model_container: 23
2025-01-19 13:23:46,213:INFO:_display_container: 7
2025-01-19 13:23:46,213:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:23:46,215:INFO:compare_models() successfully completed......................................
2025-01-19 13:43:58,544:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:43:58,545:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:43:58,545:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:43:58,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:44:00,714:INFO:PyCaret ClassificationExperiment
2025-01-19 13:44:00,714:INFO:Logging name: juice1
2025-01-19 13:44:00,714:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-19 13:44:00,714:INFO:version 3.3.2
2025-01-19 13:44:00,714:INFO:Initializing setup()
2025-01-19 13:44:00,714:INFO:self.USI: 39b4
2025-01-19 13:44:00,714:INFO:self._variable_keys: {'X_test', 'pipeline', 'log_plots_param', 'logging_param', 'gpu_param', 'y_train', '_available_plots', 'target_param', 'n_jobs_param', 'fold_shuffle_param', 'X_train', 'X', 'y', 'exp_id', 'y_test', 'memory', 'fold_generator', 'seed', 'data', 'USI', 'gpu_n_jobs_param', 'idx', 'exp_name_log', 'fix_imbalance', 'is_multiclass', 'fold_groups_param', '_ml_usecase', 'html_param'}
2025-01-19 13:44:00,714:INFO:Checking environment
2025-01-19 13:44:00,714:INFO:python_version: 3.9.0
2025-01-19 13:44:00,714:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 13:44:00,715:INFO:machine: AMD64
2025-01-19 13:44:00,715:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 13:44:00,717:INFO:Memory: svmem(total=8416788480, available=1641660416, percent=80.5, used=6775128064, free=1641660416)
2025-01-19 13:44:00,717:INFO:Physical Core: 2
2025-01-19 13:44:00,718:INFO:Logical Core: 4
2025-01-19 13:44:00,718:INFO:Checking libraries
2025-01-19 13:44:00,718:INFO:System:
2025-01-19 13:44:00,718:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 13:44:00,718:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 13:44:00,718:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 13:44:00,718:INFO:PyCaret required dependencies:
2025-01-19 13:44:00,803:INFO:                 pip: 24.2
2025-01-19 13:44:00,804:INFO:          setuptools: 75.1.0
2025-01-19 13:44:00,804:INFO:             pycaret: 3.3.2
2025-01-19 13:44:00,805:INFO:             IPython: 8.18.1
2025-01-19 13:44:00,805:INFO:          ipywidgets: 8.1.5
2025-01-19 13:44:00,805:INFO:                tqdm: 4.67.1
2025-01-19 13:44:00,806:INFO:               numpy: 1.26.4
2025-01-19 13:44:00,807:INFO:              pandas: 2.1.4
2025-01-19 13:44:00,807:INFO:              jinja2: 3.1.5
2025-01-19 13:44:00,807:INFO:               scipy: 1.11.4
2025-01-19 13:44:00,807:INFO:              joblib: 1.3.2
2025-01-19 13:44:00,807:INFO:             sklearn: 1.4.2
2025-01-19 13:44:00,807:INFO:                pyod: 2.0.3
2025-01-19 13:44:00,808:INFO:            imblearn: 0.12.4
2025-01-19 13:44:00,808:INFO:   category_encoders: 2.6.4
2025-01-19 13:44:00,808:INFO:            lightgbm: 4.5.0
2025-01-19 13:44:00,809:INFO:               numba: 0.60.0
2025-01-19 13:44:00,809:INFO:            requests: 2.32.3
2025-01-19 13:44:00,809:INFO:          matplotlib: 3.7.5
2025-01-19 13:44:00,809:INFO:          scikitplot: 0.3.7
2025-01-19 13:44:00,809:INFO:         yellowbrick: 1.5
2025-01-19 13:44:00,809:INFO:              plotly: 5.24.1
2025-01-19 13:44:00,809:INFO:    plotly-resampler: Not installed
2025-01-19 13:44:00,810:INFO:             kaleido: 0.2.1
2025-01-19 13:44:00,810:INFO:           schemdraw: 0.15
2025-01-19 13:44:00,810:INFO:         statsmodels: 0.14.4
2025-01-19 13:44:00,810:INFO:              sktime: 0.26.0
2025-01-19 13:44:00,810:INFO:               tbats: 1.1.3
2025-01-19 13:44:00,810:INFO:            pmdarima: 2.0.4
2025-01-19 13:44:00,810:INFO:              psutil: 6.1.1
2025-01-19 13:44:00,810:INFO:          markupsafe: 3.0.2
2025-01-19 13:44:00,810:INFO:             pickle5: Not installed
2025-01-19 13:44:00,810:INFO:         cloudpickle: 3.1.1
2025-01-19 13:44:00,811:INFO:         deprecation: 2.1.0
2025-01-19 13:44:00,811:INFO:              xxhash: 3.5.0
2025-01-19 13:44:00,811:INFO:           wurlitzer: Not installed
2025-01-19 13:44:00,811:INFO:PyCaret optional dependencies:
2025-01-19 13:44:00,857:INFO:                shap: Not installed
2025-01-19 13:44:00,857:INFO:           interpret: Not installed
2025-01-19 13:44:00,857:INFO:                umap: Not installed
2025-01-19 13:44:00,857:INFO:     ydata_profiling: Not installed
2025-01-19 13:44:00,857:INFO:  explainerdashboard: Not installed
2025-01-19 13:44:00,858:INFO:             autoviz: Not installed
2025-01-19 13:44:00,858:INFO:           fairlearn: Not installed
2025-01-19 13:44:00,858:INFO:          deepchecks: Not installed
2025-01-19 13:44:00,858:INFO:             xgboost: Not installed
2025-01-19 13:44:00,859:INFO:            catboost: Not installed
2025-01-19 13:44:00,859:INFO:              kmodes: Not installed
2025-01-19 13:44:00,859:INFO:             mlxtend: Not installed
2025-01-19 13:44:00,860:INFO:       statsforecast: Not installed
2025-01-19 13:44:00,860:INFO:        tune_sklearn: Not installed
2025-01-19 13:44:00,860:INFO:                 ray: Not installed
2025-01-19 13:44:00,860:INFO:            hyperopt: Not installed
2025-01-19 13:44:00,860:INFO:              optuna: Not installed
2025-01-19 13:44:00,860:INFO:               skopt: Not installed
2025-01-19 13:44:00,861:INFO:              mlflow: Not installed
2025-01-19 13:44:00,861:INFO:              gradio: Not installed
2025-01-19 13:44:00,861:INFO:             fastapi: Not installed
2025-01-19 13:44:00,861:INFO:             uvicorn: Not installed
2025-01-19 13:44:00,861:INFO:              m2cgen: Not installed
2025-01-19 13:44:00,861:INFO:           evidently: Not installed
2025-01-19 13:44:00,861:INFO:               fugue: Not installed
2025-01-19 13:44:00,861:INFO:           streamlit: Not installed
2025-01-19 13:44:00,861:INFO:             prophet: Not installed
2025-01-19 13:44:00,861:INFO:None
2025-01-19 13:44:00,861:INFO:Set up data.
2025-01-19 13:44:00,918:INFO:Set up folding strategy.
2025-01-19 13:44:00,918:INFO:Set up train/test split.
2025-01-19 13:44:00,974:INFO:Set up index.
2025-01-19 13:44:00,979:INFO:Assigning column types.
2025-01-19 13:44:00,996:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 13:44:01,129:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,141:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,232:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,232:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,352:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,355:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,412:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 13:44:01,518:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,602:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,706:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:44:01,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,754:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,755:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-19 13:44:01,920:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:01,920:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,107:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,113:INFO:Preparing preprocessing pipeline...
2025-01-19 13:44:02,120:INFO:Set up label encoding.
2025-01-19 13:44:02,120:INFO:Set up simple imputation.
2025-01-19 13:44:02,126:INFO:Set up encoding of ordinal features.
2025-01-19 13:44:02,129:INFO:Set up encoding of categorical features.
2025-01-19 13:44:02,278:INFO:Finished creating preprocessing pipeline.
2025-01-19 13:44:02,309:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-19 13:44:02,309:INFO:Creating final display dataframe.
2025-01-19 13:44:02,694:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             39b4
2025-01-19 13:44:02,818:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,819:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,928:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,929:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:02,931:INFO:setup() successfully completed in 2.23s...............
2025-01-19 13:44:02,957:INFO:Initializing compare_models()
2025-01-19 13:44:02,957:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 13:44:02,958:INFO:Checking exceptions
2025-01-19 13:44:02,976:INFO:Preparing display monitor
2025-01-19 13:44:03,062:INFO:Initializing Logistic Regression
2025-01-19 13:44:03,062:INFO:Total runtime is 0.0 minutes
2025-01-19 13:44:03,074:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:03,076:INFO:Initializing create_model()
2025-01-19 13:44:03,076:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:03,077:INFO:Checking exceptions
2025-01-19 13:44:03,077:INFO:Importing libraries
2025-01-19 13:44:03,077:INFO:Copying training dataset
2025-01-19 13:44:03,103:INFO:Defining folds
2025-01-19 13:44:03,103:INFO:Declaring metric variables
2025-01-19 13:44:03,120:INFO:Importing untrained model
2025-01-19 13:44:03,130:INFO:Logistic Regression Imported successfully
2025-01-19 13:44:03,195:INFO:Starting cross validation
2025-01-19 13:44:03,199:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:15,131:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:15,186:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:15,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,221:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,228:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,274:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:15,528:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:15,541:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,548:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,625:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:15,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,025:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:16,114:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:16,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,165:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,172:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,436:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:16,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,628:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:16,786:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,795:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:16,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,029:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:17,093:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:17,120:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,212:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:17,332:INFO:Calculating mean and std
2025-01-19 13:44:17,338:INFO:Creating metrics dataframe
2025-01-19 13:44:17,346:INFO:Uploading results into container
2025-01-19 13:44:17,349:INFO:Uploading model into container now
2025-01-19 13:44:17,350:INFO:_master_model_container: 1
2025-01-19 13:44:17,351:INFO:_display_container: 2
2025-01-19 13:44:17,353:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:44:17,353:INFO:create_model() successfully completed......................................
2025-01-19 13:44:17,490:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:17,491:INFO:Creating metrics dataframe
2025-01-19 13:44:17,512:INFO:Initializing K Neighbors Classifier
2025-01-19 13:44:17,512:INFO:Total runtime is 0.24083385070164998 minutes
2025-01-19 13:44:17,522:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:17,523:INFO:Initializing create_model()
2025-01-19 13:44:17,524:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:17,524:INFO:Checking exceptions
2025-01-19 13:44:17,527:INFO:Importing libraries
2025-01-19 13:44:17,527:INFO:Copying training dataset
2025-01-19 13:44:17,548:INFO:Defining folds
2025-01-19 13:44:17,548:INFO:Declaring metric variables
2025-01-19 13:44:17,562:INFO:Importing untrained model
2025-01-19 13:44:17,576:INFO:K Neighbors Classifier Imported successfully
2025-01-19 13:44:17,606:INFO:Starting cross validation
2025-01-19 13:44:17,609:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:18,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,765:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,786:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,815:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,838:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:18,850:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,252:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,306:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,312:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,322:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,367:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,375:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,744:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:19,817:INFO:Calculating mean and std
2025-01-19 13:44:19,821:INFO:Creating metrics dataframe
2025-01-19 13:44:19,827:INFO:Uploading results into container
2025-01-19 13:44:19,850:INFO:Uploading model into container now
2025-01-19 13:44:19,854:INFO:_master_model_container: 2
2025-01-19 13:44:19,854:INFO:_display_container: 2
2025-01-19 13:44:19,855:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-19 13:44:19,855:INFO:create_model() successfully completed......................................
2025-01-19 13:44:19,952:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:19,952:INFO:Creating metrics dataframe
2025-01-19 13:44:19,967:INFO:Initializing Naive Bayes
2025-01-19 13:44:19,967:INFO:Total runtime is 0.2817416985829671 minutes
2025-01-19 13:44:19,978:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:19,979:INFO:Initializing create_model()
2025-01-19 13:44:19,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:19,981:INFO:Checking exceptions
2025-01-19 13:44:19,981:INFO:Importing libraries
2025-01-19 13:44:19,982:INFO:Copying training dataset
2025-01-19 13:44:19,998:INFO:Defining folds
2025-01-19 13:44:19,998:INFO:Declaring metric variables
2025-01-19 13:44:20,008:INFO:Importing untrained model
2025-01-19 13:44:20,022:INFO:Naive Bayes Imported successfully
2025-01-19 13:44:20,042:INFO:Starting cross validation
2025-01-19 13:44:20,048:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:20,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,254:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,257:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,260:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,297:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,309:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,319:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,451:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,494:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,559:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,560:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,572:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:20,580:INFO:Calculating mean and std
2025-01-19 13:44:20,583:INFO:Creating metrics dataframe
2025-01-19 13:44:20,586:INFO:Uploading results into container
2025-01-19 13:44:20,587:INFO:Uploading model into container now
2025-01-19 13:44:20,588:INFO:_master_model_container: 3
2025-01-19 13:44:20,588:INFO:_display_container: 2
2025-01-19 13:44:20,588:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-19 13:44:20,588:INFO:create_model() successfully completed......................................
2025-01-19 13:44:20,664:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:20,665:INFO:Creating metrics dataframe
2025-01-19 13:44:20,752:INFO:Initializing Decision Tree Classifier
2025-01-19 13:44:20,753:INFO:Total runtime is 0.29484097162882483 minutes
2025-01-19 13:44:20,766:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:20,766:INFO:Initializing create_model()
2025-01-19 13:44:20,767:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:20,768:INFO:Checking exceptions
2025-01-19 13:44:20,769:INFO:Importing libraries
2025-01-19 13:44:20,769:INFO:Copying training dataset
2025-01-19 13:44:20,796:INFO:Defining folds
2025-01-19 13:44:20,796:INFO:Declaring metric variables
2025-01-19 13:44:20,816:INFO:Importing untrained model
2025-01-19 13:44:20,831:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:44:20,849:INFO:Starting cross validation
2025-01-19 13:44:20,855:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:21,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,058:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,066:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,069:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,082:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,088:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,091:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,258:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,259:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,284:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,402:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,411:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,412:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,420:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,420:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,438:INFO:Calculating mean and std
2025-01-19 13:44:21,440:INFO:Creating metrics dataframe
2025-01-19 13:44:21,443:INFO:Uploading results into container
2025-01-19 13:44:21,445:INFO:Uploading model into container now
2025-01-19 13:44:21,447:INFO:_master_model_container: 4
2025-01-19 13:44:21,448:INFO:_display_container: 2
2025-01-19 13:44:21,450:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 13:44:21,450:INFO:create_model() successfully completed......................................
2025-01-19 13:44:21,541:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:21,541:INFO:Creating metrics dataframe
2025-01-19 13:44:21,557:INFO:Initializing SVM - Linear Kernel
2025-01-19 13:44:21,557:INFO:Total runtime is 0.3082407116889953 minutes
2025-01-19 13:44:21,565:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:21,565:INFO:Initializing create_model()
2025-01-19 13:44:21,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:21,566:INFO:Checking exceptions
2025-01-19 13:44:21,566:INFO:Importing libraries
2025-01-19 13:44:21,567:INFO:Copying training dataset
2025-01-19 13:44:21,583:INFO:Defining folds
2025-01-19 13:44:21,583:INFO:Declaring metric variables
2025-01-19 13:44:21,592:INFO:Importing untrained model
2025-01-19 13:44:21,605:INFO:SVM - Linear Kernel Imported successfully
2025-01-19 13:44:21,623:INFO:Starting cross validation
2025-01-19 13:44:21,627:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:21,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,911:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,913:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,919:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:21,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:21,922:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:21,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:21,931:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:21,956:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:22,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:22,148:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,260:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,265:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:22,271:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,271:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,292:INFO:Calculating mean and std
2025-01-19 13:44:22,295:INFO:Creating metrics dataframe
2025-01-19 13:44:22,298:INFO:Uploading results into container
2025-01-19 13:44:22,299:INFO:Uploading model into container now
2025-01-19 13:44:22,299:INFO:_master_model_container: 5
2025-01-19 13:44:22,300:INFO:_display_container: 2
2025-01-19 13:44:22,301:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-19 13:44:22,301:INFO:create_model() successfully completed......................................
2025-01-19 13:44:22,400:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:22,401:INFO:Creating metrics dataframe
2025-01-19 13:44:22,420:INFO:Initializing Ridge Classifier
2025-01-19 13:44:22,421:INFO:Total runtime is 0.32265348831812535 minutes
2025-01-19 13:44:22,430:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:22,431:INFO:Initializing create_model()
2025-01-19 13:44:22,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:22,431:INFO:Checking exceptions
2025-01-19 13:44:22,432:INFO:Importing libraries
2025-01-19 13:44:22,432:INFO:Copying training dataset
2025-01-19 13:44:22,444:INFO:Defining folds
2025-01-19 13:44:22,446:INFO:Declaring metric variables
2025-01-19 13:44:22,460:INFO:Importing untrained model
2025-01-19 13:44:22,469:INFO:Ridge Classifier Imported successfully
2025-01-19 13:44:22,488:INFO:Starting cross validation
2025-01-19 13:44:22,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:22,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,728:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,735:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,743:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,762:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,763:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,897:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,924:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,924:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,931:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,937:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,939:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,944:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:22,952:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,028:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,033:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,037:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,060:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:23,071:INFO:Calculating mean and std
2025-01-19 13:44:23,073:INFO:Creating metrics dataframe
2025-01-19 13:44:23,076:INFO:Uploading results into container
2025-01-19 13:44:23,077:INFO:Uploading model into container now
2025-01-19 13:44:23,078:INFO:_master_model_container: 6
2025-01-19 13:44:23,078:INFO:_display_container: 2
2025-01-19 13:44:23,079:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-19 13:44:23,081:INFO:create_model() successfully completed......................................
2025-01-19 13:44:23,175:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:23,175:INFO:Creating metrics dataframe
2025-01-19 13:44:23,191:INFO:Initializing Random Forest Classifier
2025-01-19 13:44:23,191:INFO:Total runtime is 0.3354796091715494 minutes
2025-01-19 13:44:23,202:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:23,205:INFO:Initializing create_model()
2025-01-19 13:44:23,205:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:23,205:INFO:Checking exceptions
2025-01-19 13:44:23,206:INFO:Importing libraries
2025-01-19 13:44:23,206:INFO:Copying training dataset
2025-01-19 13:44:23,224:INFO:Defining folds
2025-01-19 13:44:23,224:INFO:Declaring metric variables
2025-01-19 13:44:23,237:INFO:Importing untrained model
2025-01-19 13:44:23,251:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:44:23,271:INFO:Starting cross validation
2025-01-19 13:44:23,279:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:24,254:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,276:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,291:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,394:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,400:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,408:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,971:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,980:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:24,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,006:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,018:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,038:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,079:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,089:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,752:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,759:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,859:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,888:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,898:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:25,915:INFO:Calculating mean and std
2025-01-19 13:44:25,918:INFO:Creating metrics dataframe
2025-01-19 13:44:25,925:INFO:Uploading results into container
2025-01-19 13:44:25,927:INFO:Uploading model into container now
2025-01-19 13:44:25,928:INFO:_master_model_container: 7
2025-01-19 13:44:25,928:INFO:_display_container: 2
2025-01-19 13:44:25,930:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:44:25,930:INFO:create_model() successfully completed......................................
2025-01-19 13:44:26,036:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:26,036:INFO:Creating metrics dataframe
2025-01-19 13:44:26,082:INFO:Initializing Quadratic Discriminant Analysis
2025-01-19 13:44:26,083:INFO:Total runtime is 0.3836845358212788 minutes
2025-01-19 13:44:26,095:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:26,095:INFO:Initializing create_model()
2025-01-19 13:44:26,096:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:26,099:INFO:Checking exceptions
2025-01-19 13:44:26,100:INFO:Importing libraries
2025-01-19 13:44:26,100:INFO:Copying training dataset
2025-01-19 13:44:26,116:INFO:Defining folds
2025-01-19 13:44:26,118:INFO:Declaring metric variables
2025-01-19 13:44:26,132:INFO:Importing untrained model
2025-01-19 13:44:26,142:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-19 13:44:26,166:INFO:Starting cross validation
2025-01-19 13:44:26,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:26,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,476:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,547:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,559:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,621:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,671:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,672:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,684:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,712:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,951:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:26,967:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,974:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:26,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,030:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:27,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,184:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,265:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:27,286:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:44:27,412:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,424:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,458:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:27,509:INFO:Calculating mean and std
2025-01-19 13:44:27,513:INFO:Creating metrics dataframe
2025-01-19 13:44:27,534:INFO:Uploading results into container
2025-01-19 13:44:27,535:INFO:Uploading model into container now
2025-01-19 13:44:27,536:INFO:_master_model_container: 8
2025-01-19 13:44:27,536:INFO:_display_container: 2
2025-01-19 13:44:27,536:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-19 13:44:27,536:INFO:create_model() successfully completed......................................
2025-01-19 13:44:27,709:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:27,710:INFO:Creating metrics dataframe
2025-01-19 13:44:27,755:INFO:Initializing Ada Boost Classifier
2025-01-19 13:44:27,755:INFO:Total runtime is 0.41155043045679723 minutes
2025-01-19 13:44:27,792:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:27,796:INFO:Initializing create_model()
2025-01-19 13:44:27,798:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:27,798:INFO:Checking exceptions
2025-01-19 13:44:27,798:INFO:Importing libraries
2025-01-19 13:44:27,798:INFO:Copying training dataset
2025-01-19 13:44:27,828:INFO:Defining folds
2025-01-19 13:44:27,829:INFO:Declaring metric variables
2025-01-19 13:44:27,860:INFO:Importing untrained model
2025-01-19 13:44:27,879:INFO:Ada Boost Classifier Imported successfully
2025-01-19 13:44:27,911:INFO:Starting cross validation
2025-01-19 13:44:27,921:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:28,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,765:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,775:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,782:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,798:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,840:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,856:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:28,919:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,951:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,963:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:28,977:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:29,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,519:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,526:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,536:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,604:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,615:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,626:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,677:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:29,831:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:29,853:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:30,103:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,111:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,133:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,150:INFO:Calculating mean and std
2025-01-19 13:44:30,152:INFO:Creating metrics dataframe
2025-01-19 13:44:30,155:INFO:Uploading results into container
2025-01-19 13:44:30,155:INFO:Uploading model into container now
2025-01-19 13:44:30,156:INFO:_master_model_container: 9
2025-01-19 13:44:30,156:INFO:_display_container: 2
2025-01-19 13:44:30,157:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 13:44:30,157:INFO:create_model() successfully completed......................................
2025-01-19 13:44:30,249:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:30,249:INFO:Creating metrics dataframe
2025-01-19 13:44:30,266:INFO:Initializing Gradient Boosting Classifier
2025-01-19 13:44:30,266:INFO:Total runtime is 0.4533966978391011 minutes
2025-01-19 13:44:30,272:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:30,275:INFO:Initializing create_model()
2025-01-19 13:44:30,275:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:30,275:INFO:Checking exceptions
2025-01-19 13:44:30,275:INFO:Importing libraries
2025-01-19 13:44:30,276:INFO:Copying training dataset
2025-01-19 13:44:30,287:INFO:Defining folds
2025-01-19 13:44:30,287:INFO:Declaring metric variables
2025-01-19 13:44:30,298:INFO:Importing untrained model
2025-01-19 13:44:30,309:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:44:30,323:INFO:Starting cross validation
2025-01-19 13:44:30,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:30,962:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,969:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,978:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:30,993:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,009:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,015:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,022:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,055:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,063:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,642:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,661:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,665:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,671:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,696:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,723:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,732:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:31,746:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,197:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,218:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,222:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,238:INFO:Calculating mean and std
2025-01-19 13:44:32,240:INFO:Creating metrics dataframe
2025-01-19 13:44:32,244:INFO:Uploading results into container
2025-01-19 13:44:32,246:INFO:Uploading model into container now
2025-01-19 13:44:32,247:INFO:_master_model_container: 10
2025-01-19 13:44:32,248:INFO:_display_container: 2
2025-01-19 13:44:32,249:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:44:32,249:INFO:create_model() successfully completed......................................
2025-01-19 13:44:32,333:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:32,333:INFO:Creating metrics dataframe
2025-01-19 13:44:32,349:INFO:Initializing Linear Discriminant Analysis
2025-01-19 13:44:32,350:INFO:Total runtime is 0.4881229043006896 minutes
2025-01-19 13:44:32,355:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:32,357:INFO:Initializing create_model()
2025-01-19 13:44:32,357:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:32,357:INFO:Checking exceptions
2025-01-19 13:44:32,358:INFO:Importing libraries
2025-01-19 13:44:32,358:INFO:Copying training dataset
2025-01-19 13:44:32,376:INFO:Defining folds
2025-01-19 13:44:32,377:INFO:Declaring metric variables
2025-01-19 13:44:32,390:INFO:Importing untrained model
2025-01-19 13:44:32,399:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:44:32,414:INFO:Starting cross validation
2025-01-19 13:44:32,417:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:32,588:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,592:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,604:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,744:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,754:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,764:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,770:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,785:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,792:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,871:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,885:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,885:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,888:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,894:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:32,912:INFO:Calculating mean and std
2025-01-19 13:44:32,921:INFO:Creating metrics dataframe
2025-01-19 13:44:32,930:INFO:Uploading results into container
2025-01-19 13:44:32,932:INFO:Uploading model into container now
2025-01-19 13:44:32,933:INFO:_master_model_container: 11
2025-01-19 13:44:32,934:INFO:_display_container: 2
2025-01-19 13:44:32,937:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:44:32,937:INFO:create_model() successfully completed......................................
2025-01-19 13:44:33,025:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:33,025:INFO:Creating metrics dataframe
2025-01-19 13:44:33,042:INFO:Initializing Extra Trees Classifier
2025-01-19 13:44:33,042:INFO:Total runtime is 0.4996665120124816 minutes
2025-01-19 13:44:33,055:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:33,055:INFO:Initializing create_model()
2025-01-19 13:44:33,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:33,056:INFO:Checking exceptions
2025-01-19 13:44:33,056:INFO:Importing libraries
2025-01-19 13:44:33,056:INFO:Copying training dataset
2025-01-19 13:44:33,076:INFO:Defining folds
2025-01-19 13:44:33,076:INFO:Declaring metric variables
2025-01-19 13:44:33,099:INFO:Importing untrained model
2025-01-19 13:44:33,120:INFO:Extra Trees Classifier Imported successfully
2025-01-19 13:44:33,178:INFO:Starting cross validation
2025-01-19 13:44:33,185:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:34,056:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,111:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,192:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,200:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,234:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,248:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,960:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,969:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:34,987:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,030:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,980:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,987:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:35,995:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:36,000:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:36,010:INFO:Calculating mean and std
2025-01-19 13:44:36,011:INFO:Creating metrics dataframe
2025-01-19 13:44:36,015:INFO:Uploading results into container
2025-01-19 13:44:36,015:INFO:Uploading model into container now
2025-01-19 13:44:36,016:INFO:_master_model_container: 12
2025-01-19 13:44:36,016:INFO:_display_container: 2
2025-01-19 13:44:36,017:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 13:44:36,017:INFO:create_model() successfully completed......................................
2025-01-19 13:44:36,097:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:36,097:INFO:Creating metrics dataframe
2025-01-19 13:44:36,113:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:44:36,113:INFO:Total runtime is 0.5508533358573913 minutes
2025-01-19 13:44:36,119:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:36,121:INFO:Initializing create_model()
2025-01-19 13:44:36,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:36,122:INFO:Checking exceptions
2025-01-19 13:44:36,122:INFO:Importing libraries
2025-01-19 13:44:36,122:INFO:Copying training dataset
2025-01-19 13:44:36,134:INFO:Defining folds
2025-01-19 13:44:36,134:INFO:Declaring metric variables
2025-01-19 13:44:36,146:INFO:Importing untrained model
2025-01-19 13:44:36,153:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:44:36,171:INFO:Starting cross validation
2025-01-19 13:44:36,176:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:37,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,805:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,809:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,811:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,815:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,871:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:37,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,743:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,757:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,759:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,774:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,775:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,889:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:38,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,439:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,446:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,468:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,475:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,501:INFO:Calculating mean and std
2025-01-19 13:44:39,505:INFO:Creating metrics dataframe
2025-01-19 13:44:39,513:INFO:Uploading results into container
2025-01-19 13:44:39,514:INFO:Uploading model into container now
2025-01-19 13:44:39,515:INFO:_master_model_container: 13
2025-01-19 13:44:39,515:INFO:_display_container: 2
2025-01-19 13:44:39,516:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 13:44:39,516:INFO:create_model() successfully completed......................................
2025-01-19 13:44:39,627:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:39,628:INFO:Creating metrics dataframe
2025-01-19 13:44:39,702:INFO:Initializing Dummy Classifier
2025-01-19 13:44:39,703:INFO:Total runtime is 0.6106781403223672 minutes
2025-01-19 13:44:39,716:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:39,717:INFO:Initializing create_model()
2025-01-19 13:44:39,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D830BEADF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:39,718:INFO:Checking exceptions
2025-01-19 13:44:39,718:INFO:Importing libraries
2025-01-19 13:44:39,718:INFO:Copying training dataset
2025-01-19 13:44:39,740:INFO:Defining folds
2025-01-19 13:44:39,740:INFO:Declaring metric variables
2025-01-19 13:44:39,749:INFO:Importing untrained model
2025-01-19 13:44:39,759:INFO:Dummy Classifier Imported successfully
2025-01-19 13:44:39,780:INFO:Starting cross validation
2025-01-19 13:44:39,785:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:39,952:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,958:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,960:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,963:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:39,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:39,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,993:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:39,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,019:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,028:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,158:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,165:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,168:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,175:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,178:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,182:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,197:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,200:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,210:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,213:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,348:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:44:40,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:40,389:INFO:Calculating mean and std
2025-01-19 13:44:40,392:INFO:Creating metrics dataframe
2025-01-19 13:44:40,397:INFO:Uploading results into container
2025-01-19 13:44:40,399:INFO:Uploading model into container now
2025-01-19 13:44:40,400:INFO:_master_model_container: 14
2025-01-19 13:44:40,401:INFO:_display_container: 2
2025-01-19 13:44:40,402:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-19 13:44:40,403:INFO:create_model() successfully completed......................................
2025-01-19 13:44:40,510:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:40,511:INFO:Creating metrics dataframe
2025-01-19 13:44:40,544:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:44:40,572:INFO:Initializing create_model()
2025-01-19 13:44:40,572:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:40,572:INFO:Checking exceptions
2025-01-19 13:44:40,580:INFO:Importing libraries
2025-01-19 13:44:40,580:INFO:Copying training dataset
2025-01-19 13:44:40,603:INFO:Defining folds
2025-01-19 13:44:40,603:INFO:Declaring metric variables
2025-01-19 13:44:40,604:INFO:Importing untrained model
2025-01-19 13:44:40,604:INFO:Declaring custom model
2025-01-19 13:44:40,605:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:44:40,607:INFO:Cross validation set to False
2025-01-19 13:44:40,607:INFO:Fitting Model
2025-01-19 13:44:40,676:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:44:40,676:INFO:create_model() successfully completed......................................
2025-01-19 13:44:40,832:INFO:_master_model_container: 14
2025-01-19 13:44:40,832:INFO:_display_container: 2
2025-01-19 13:44:40,833:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:44:40,833:INFO:compare_models() successfully completed......................................
2025-01-19 13:44:40,877:INFO:Initializing create_model()
2025-01-19 13:44:40,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:40,877:INFO:Checking exceptions
2025-01-19 13:44:40,960:INFO:Importing libraries
2025-01-19 13:44:40,960:INFO:Copying training dataset
2025-01-19 13:44:40,975:INFO:Defining folds
2025-01-19 13:44:40,975:INFO:Declaring metric variables
2025-01-19 13:44:40,986:INFO:Importing untrained model
2025-01-19 13:44:41,036:INFO:Logistic Regression Imported successfully
2025-01-19 13:44:41,088:INFO:Starting cross validation
2025-01-19 13:44:41,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:41,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:41,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:41,954:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:41,994:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,003:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,010:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,019:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,025:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:42,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,118:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,125:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,601:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:42,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:42,672:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:42,682:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,692:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,748:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:42,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,833:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:42,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,293:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:43,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:43,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,347:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,352:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,360:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,368:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:43,389:INFO:Calculating mean and std
2025-01-19 13:44:43,392:INFO:Creating metrics dataframe
2025-01-19 13:44:43,405:INFO:Finalizing model
2025-01-19 13:44:44,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:44,348:INFO:Uploading results into container
2025-01-19 13:44:44,351:INFO:Uploading model into container now
2025-01-19 13:44:44,372:INFO:_master_model_container: 15
2025-01-19 13:44:44,373:INFO:_display_container: 3
2025-01-19 13:44:44,374:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:44:44,376:INFO:create_model() successfully completed......................................
2025-01-19 13:44:44,505:INFO:Initializing create_model()
2025-01-19 13:44:44,505:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:44,505:INFO:Checking exceptions
2025-01-19 13:44:44,559:INFO:Importing libraries
2025-01-19 13:44:44,560:INFO:Copying training dataset
2025-01-19 13:44:44,583:INFO:Defining folds
2025-01-19 13:44:44,583:INFO:Declaring metric variables
2025-01-19 13:44:44,609:INFO:Importing untrained model
2025-01-19 13:44:44,629:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:44:44,655:INFO:Starting cross validation
2025-01-19 13:44:44,659:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:45,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,018:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,047:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,205:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,224:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,238:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,255:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,409:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,417:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,421:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:45,443:INFO:Calculating mean and std
2025-01-19 13:44:45,447:INFO:Creating metrics dataframe
2025-01-19 13:44:45,456:INFO:Finalizing model
2025-01-19 13:44:45,532:INFO:Uploading results into container
2025-01-19 13:44:45,535:INFO:Uploading model into container now
2025-01-19 13:44:45,561:INFO:_master_model_container: 16
2025-01-19 13:44:45,562:INFO:_display_container: 4
2025-01-19 13:44:45,563:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 13:44:45,563:INFO:create_model() successfully completed......................................
2025-01-19 13:44:45,716:INFO:Initializing create_model()
2025-01-19 13:44:45,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:45,716:INFO:Checking exceptions
2025-01-19 13:44:45,765:INFO:Importing libraries
2025-01-19 13:44:45,765:INFO:Copying training dataset
2025-01-19 13:44:45,799:INFO:Defining folds
2025-01-19 13:44:45,799:INFO:Declaring metric variables
2025-01-19 13:44:45,887:INFO:Importing untrained model
2025-01-19 13:44:45,905:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:44:45,963:INFO:Starting cross validation
2025-01-19 13:44:45,967:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:46,962:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:46,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:46,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,086:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,122:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,252:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,261:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,810:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,815:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:47,832:INFO:Calculating mean and std
2025-01-19 13:44:47,834:INFO:Creating metrics dataframe
2025-01-19 13:44:47,850:INFO:Finalizing model
2025-01-19 13:44:48,263:INFO:Uploading results into container
2025-01-19 13:44:48,265:INFO:Uploading model into container now
2025-01-19 13:44:48,286:INFO:_master_model_container: 17
2025-01-19 13:44:48,287:INFO:_display_container: 5
2025-01-19 13:44:48,287:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:44:48,287:INFO:create_model() successfully completed......................................
2025-01-19 13:44:48,404:INFO:Initializing create_model()
2025-01-19 13:44:48,405:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:48,405:INFO:Checking exceptions
2025-01-19 13:44:48,459:INFO:Importing libraries
2025-01-19 13:44:48,461:INFO:Copying training dataset
2025-01-19 13:44:48,476:INFO:Defining folds
2025-01-19 13:44:48,476:INFO:Declaring metric variables
2025-01-19 13:44:48,507:INFO:Importing untrained model
2025-01-19 13:44:48,522:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:44:48,551:INFO:Starting cross validation
2025-01-19 13:44:48,576:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:48,822:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,828:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,838:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,883:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,898:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:48,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,018:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,037:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,177:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,181:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:49,197:INFO:Calculating mean and std
2025-01-19 13:44:49,198:INFO:Creating metrics dataframe
2025-01-19 13:44:49,205:INFO:Finalizing model
2025-01-19 13:44:49,312:INFO:Uploading results into container
2025-01-19 13:44:49,313:INFO:Uploading model into container now
2025-01-19 13:44:49,339:INFO:_master_model_container: 18
2025-01-19 13:44:49,340:INFO:_display_container: 6
2025-01-19 13:44:49,341:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 13:44:49,341:INFO:create_model() successfully completed......................................
2025-01-19 13:44:49,516:INFO:gpu_param set to False
2025-01-19 13:44:49,799:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:49,799:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,000:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,001:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,090:INFO:gpu_param set to False
2025-01-19 13:44:50,365:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,570:INFO:gpu_param set to False
2025-01-19 13:44:50,952:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:50,953:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:51,283:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:51,283:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:44:51,287:INFO:Initializing compare_models()
2025-01-19 13:44:51,288:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 13:44:51,289:INFO:Checking exceptions
2025-01-19 13:44:51,294:INFO:Preparing display monitor
2025-01-19 13:44:51,411:INFO:Initializing Random Forest Classifier
2025-01-19 13:44:51,411:INFO:Total runtime is 0.0 minutes
2025-01-19 13:44:51,433:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:51,433:INFO:Initializing create_model()
2025-01-19 13:44:51,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844B96E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:51,433:INFO:Checking exceptions
2025-01-19 13:44:51,433:INFO:Importing libraries
2025-01-19 13:44:51,433:INFO:Copying training dataset
2025-01-19 13:44:51,452:INFO:Defining folds
2025-01-19 13:44:51,452:INFO:Declaring metric variables
2025-01-19 13:44:51,460:INFO:Importing untrained model
2025-01-19 13:44:51,473:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:44:51,498:INFO:Starting cross validation
2025-01-19 13:44:51,500:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:52,362:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,375:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,385:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,385:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,516:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,536:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,553:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:52,583:INFO:Calculating mean and std
2025-01-19 13:44:52,584:INFO:Creating metrics dataframe
2025-01-19 13:44:52,593:INFO:Uploading results into container
2025-01-19 13:44:52,594:INFO:Uploading model into container now
2025-01-19 13:44:52,596:INFO:_master_model_container: 19
2025-01-19 13:44:52,596:INFO:_display_container: 7
2025-01-19 13:44:52,597:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:44:52,597:INFO:create_model() successfully completed......................................
2025-01-19 13:44:52,685:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:52,686:INFO:Creating metrics dataframe
2025-01-19 13:44:52,700:INFO:Initializing Ada Boost Classifier
2025-01-19 13:44:52,701:INFO:Total runtime is 0.021507410208384196 minutes
2025-01-19 13:44:52,709:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:52,710:INFO:Initializing create_model()
2025-01-19 13:44:52,711:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844B96E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:52,711:INFO:Checking exceptions
2025-01-19 13:44:52,712:INFO:Importing libraries
2025-01-19 13:44:52,712:INFO:Copying training dataset
2025-01-19 13:44:52,727:INFO:Defining folds
2025-01-19 13:44:52,727:INFO:Declaring metric variables
2025-01-19 13:44:52,741:INFO:Importing untrained model
2025-01-19 13:44:52,751:INFO:Ada Boost Classifier Imported successfully
2025-01-19 13:44:52,771:INFO:Starting cross validation
2025-01-19 13:44:52,773:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:52,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:52,893:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:52,893:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:44:53,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,289:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,315:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,321:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,327:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:53,351:INFO:Calculating mean and std
2025-01-19 13:44:53,360:INFO:Creating metrics dataframe
2025-01-19 13:44:53,368:INFO:Uploading results into container
2025-01-19 13:44:53,370:INFO:Uploading model into container now
2025-01-19 13:44:53,371:INFO:_master_model_container: 20
2025-01-19 13:44:53,371:INFO:_display_container: 7
2025-01-19 13:44:53,371:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 13:44:53,372:INFO:create_model() successfully completed......................................
2025-01-19 13:44:53,611:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:53,611:INFO:Creating metrics dataframe
2025-01-19 13:44:53,662:INFO:Initializing Gradient Boosting Classifier
2025-01-19 13:44:53,663:INFO:Total runtime is 0.03754227956136068 minutes
2025-01-19 13:44:53,692:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:53,694:INFO:Initializing create_model()
2025-01-19 13:44:53,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844B96E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:53,696:INFO:Checking exceptions
2025-01-19 13:44:53,696:INFO:Importing libraries
2025-01-19 13:44:53,697:INFO:Copying training dataset
2025-01-19 13:44:53,727:INFO:Defining folds
2025-01-19 13:44:53,728:INFO:Declaring metric variables
2025-01-19 13:44:53,776:INFO:Importing untrained model
2025-01-19 13:44:53,790:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:44:53,818:INFO:Starting cross validation
2025-01-19 13:44:53,829:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:54,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,602:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,608:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:54,645:INFO:Calculating mean and std
2025-01-19 13:44:54,650:INFO:Creating metrics dataframe
2025-01-19 13:44:54,658:INFO:Uploading results into container
2025-01-19 13:44:54,659:INFO:Uploading model into container now
2025-01-19 13:44:54,660:INFO:_master_model_container: 21
2025-01-19 13:44:54,660:INFO:_display_container: 7
2025-01-19 13:44:54,660:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:44:54,660:INFO:create_model() successfully completed......................................
2025-01-19 13:44:54,859:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:54,859:INFO:Creating metrics dataframe
2025-01-19 13:44:54,889:INFO:Initializing Extra Trees Classifier
2025-01-19 13:44:54,889:INFO:Total runtime is 0.05797541538874308 minutes
2025-01-19 13:44:54,901:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:54,902:INFO:Initializing create_model()
2025-01-19 13:44:54,902:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844B96E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:54,903:INFO:Checking exceptions
2025-01-19 13:44:54,903:INFO:Importing libraries
2025-01-19 13:44:54,903:INFO:Copying training dataset
2025-01-19 13:44:54,919:INFO:Defining folds
2025-01-19 13:44:54,920:INFO:Declaring metric variables
2025-01-19 13:44:54,933:INFO:Importing untrained model
2025-01-19 13:44:54,949:INFO:Extra Trees Classifier Imported successfully
2025-01-19 13:44:54,988:INFO:Starting cross validation
2025-01-19 13:44:54,991:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:55,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,809:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,824:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,849:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,861:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:55,890:INFO:Calculating mean and std
2025-01-19 13:44:55,893:INFO:Creating metrics dataframe
2025-01-19 13:44:55,898:INFO:Uploading results into container
2025-01-19 13:44:55,900:INFO:Uploading model into container now
2025-01-19 13:44:55,901:INFO:_master_model_container: 22
2025-01-19 13:44:55,901:INFO:_display_container: 7
2025-01-19 13:44:55,904:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 13:44:55,904:INFO:create_model() successfully completed......................................
2025-01-19 13:44:55,995:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:55,995:INFO:Creating metrics dataframe
2025-01-19 13:44:56,009:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 13:44:56,009:INFO:Total runtime is 0.0766412377357483 minutes
2025-01-19 13:44:56,019:INFO:SubProcess create_model() called ==================================
2025-01-19 13:44:56,020:INFO:Initializing create_model()
2025-01-19 13:44:56,020:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844B96E80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:56,020:INFO:Checking exceptions
2025-01-19 13:44:56,020:INFO:Importing libraries
2025-01-19 13:44:56,020:INFO:Copying training dataset
2025-01-19 13:44:56,036:INFO:Defining folds
2025-01-19 13:44:56,036:INFO:Declaring metric variables
2025-01-19 13:44:56,045:INFO:Importing untrained model
2025-01-19 13:44:56,058:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:44:56,086:INFO:Starting cross validation
2025-01-19 13:44:56,089:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:44:56,775:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,793:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:44:56,932:INFO:Calculating mean and std
2025-01-19 13:44:56,936:INFO:Creating metrics dataframe
2025-01-19 13:44:56,943:INFO:Uploading results into container
2025-01-19 13:44:56,951:INFO:Uploading model into container now
2025-01-19 13:44:56,953:INFO:_master_model_container: 23
2025-01-19 13:44:56,953:INFO:_display_container: 7
2025-01-19 13:44:56,954:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 13:44:56,954:INFO:create_model() successfully completed......................................
2025-01-19 13:44:57,053:INFO:SubProcess create_model() end ==================================
2025-01-19 13:44:57,053:INFO:Creating metrics dataframe
2025-01-19 13:44:57,068:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 13:44:57,097:INFO:Initializing create_model()
2025-01-19 13:44:57,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:44:57,098:INFO:Checking exceptions
2025-01-19 13:44:57,100:INFO:Importing libraries
2025-01-19 13:44:57,100:INFO:Copying training dataset
2025-01-19 13:44:57,116:INFO:Defining folds
2025-01-19 13:44:57,116:INFO:Declaring metric variables
2025-01-19 13:44:57,116:INFO:Importing untrained model
2025-01-19 13:44:57,116:INFO:Declaring custom model
2025-01-19 13:44:57,118:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:44:57,121:INFO:Cross validation set to False
2025-01-19 13:44:57,121:INFO:Fitting Model
2025-01-19 13:44:57,445:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:44:57,445:INFO:create_model() successfully completed......................................
2025-01-19 13:44:57,600:INFO:_master_model_container: 23
2025-01-19 13:44:57,601:INFO:_display_container: 7
2025-01-19 13:44:57,601:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:44:57,601:INFO:compare_models() successfully completed......................................
2025-01-19 13:44:57,649:INFO:Initializing tune_model()
2025-01-19 13:44:57,649:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>)
2025-01-19 13:44:57,651:INFO:Checking exceptions
2025-01-19 13:44:57,719:INFO:Copying training dataset
2025-01-19 13:44:57,735:INFO:Checking base model
2025-01-19 13:44:57,736:INFO:Base model : Logistic Regression
2025-01-19 13:44:57,784:INFO:Declaring metric variables
2025-01-19 13:44:57,867:INFO:Defining Hyperparameters
2025-01-19 13:44:58,170:INFO:Tuning with n_jobs=-1
2025-01-19 13:44:58,170:INFO:Initializing RandomizedSearchCV
2025-01-19 13:44:59,763:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:59,844:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:59,961:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:44:59,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:00,349:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:00,462:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:00,589:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:00,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:00,932:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,026:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,678:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:01,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,215:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,330:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,369:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,467:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,729:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:02,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,012:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,856:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:03,993:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:04,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:04,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:04,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:04,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:04,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:05,293:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:05,406:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:05,468:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:05,583:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:07,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:07,103:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:07,575:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:07,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:07,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:08,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:08,792:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:08,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:09,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:09,439:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:09,746:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:09,791:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:09,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,347:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:10,993:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,176:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,357:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,643:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:11,868:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,317:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,358:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,516:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:12,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,131:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,526:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:13,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,121:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-19 13:45:14,123:INFO:Hyperparameter search completed
2025-01-19 13:45:14,123:INFO:SubProcess create_model() called ==================================
2025-01-19 13:45:14,124:INFO:Initializing create_model()
2025-01-19 13:45:14,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844E4C0D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-19 13:45:14,126:INFO:Checking exceptions
2025-01-19 13:45:14,127:INFO:Importing libraries
2025-01-19 13:45:14,127:INFO:Copying training dataset
2025-01-19 13:45:14,150:INFO:Defining folds
2025-01-19 13:45:14,150:INFO:Declaring metric variables
2025-01-19 13:45:14,158:INFO:Importing untrained model
2025-01-19 13:45:14,158:INFO:Declaring custom model
2025-01-19 13:45:14,170:INFO:Logistic Regression Imported successfully
2025-01-19 13:45:14,189:INFO:Starting cross validation
2025-01-19 13:45:14,193:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:45:14,693:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,694:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:14,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,761:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,765:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,771:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,798:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,805:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:14,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:15,251:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:15,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:15,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,306:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,317:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,320:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,357:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,363:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,868:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:15,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:15,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,931:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:15,958:INFO:Calculating mean and std
2025-01-19 13:45:15,964:INFO:Creating metrics dataframe
2025-01-19 13:45:15,983:INFO:Finalizing model
2025-01-19 13:45:16,908:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:16,926:INFO:Uploading results into container
2025-01-19 13:45:16,927:INFO:Uploading model into container now
2025-01-19 13:45:16,929:INFO:_master_model_container: 24
2025-01-19 13:45:16,929:INFO:_display_container: 8
2025-01-19 13:45:16,931:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:45:16,931:INFO:create_model() successfully completed......................................
2025-01-19 13:45:17,040:INFO:SubProcess create_model() end ==================================
2025-01-19 13:45:17,040:INFO:choose_better activated
2025-01-19 13:45:17,045:INFO:SubProcess create_model() called ==================================
2025-01-19 13:45:17,046:INFO:Initializing create_model()
2025-01-19 13:45:17,046:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:45:17,046:INFO:Checking exceptions
2025-01-19 13:45:17,049:INFO:Importing libraries
2025-01-19 13:45:17,049:INFO:Copying training dataset
2025-01-19 13:45:17,061:INFO:Defining folds
2025-01-19 13:45:17,061:INFO:Declaring metric variables
2025-01-19 13:45:17,061:INFO:Importing untrained model
2025-01-19 13:45:17,061:INFO:Declaring custom model
2025-01-19 13:45:17,062:INFO:Logistic Regression Imported successfully
2025-01-19 13:45:17,063:INFO:Starting cross validation
2025-01-19 13:45:17,066:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:45:17,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:17,671:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:17,682:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:17,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:17,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,730:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,741:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,743:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:17,794:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,274:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,346:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,362:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,388:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,454:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,536:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,546:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,560:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,872:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:18,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,925:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,925:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:18,966:INFO:Calculating mean and std
2025-01-19 13:45:18,968:INFO:Creating metrics dataframe
2025-01-19 13:45:18,972:INFO:Finalizing model
2025-01-19 13:45:20,119:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:45:20,120:INFO:Uploading results into container
2025-01-19 13:45:20,121:INFO:Uploading model into container now
2025-01-19 13:45:20,121:INFO:_master_model_container: 25
2025-01-19 13:45:20,121:INFO:_display_container: 9
2025-01-19 13:45:20,122:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:45:20,122:INFO:create_model() successfully completed......................................
2025-01-19 13:45:20,211:INFO:SubProcess create_model() end ==================================
2025-01-19 13:45:20,213:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-19 13:45:20,214:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-19 13:45:20,215:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-19 13:45:20,215:INFO:choose_better completed
2025-01-19 13:45:20,251:INFO:_master_model_container: 25
2025-01-19 13:45:20,252:INFO:_display_container: 8
2025-01-19 13:45:20,253:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:45:20,253:INFO:tune_model() successfully completed......................................
2025-01-19 13:45:20,435:INFO:Initializing tune_model()
2025-01-19 13:45:20,435:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>)
2025-01-19 13:45:20,437:INFO:Checking exceptions
2025-01-19 13:45:20,501:INFO:Copying training dataset
2025-01-19 13:45:20,546:INFO:Checking base model
2025-01-19 13:45:20,548:INFO:Base model : Random Forest Classifier
2025-01-19 13:45:20,564:INFO:Declaring metric variables
2025-01-19 13:45:20,572:INFO:Defining Hyperparameters
2025-01-19 13:45:20,729:INFO:Tuning with n_jobs=-1
2025-01-19 13:45:20,729:INFO:Initializing RandomizedSearchCV
2025-01-19 13:45:48,937:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-19 13:45:48,938:INFO:Hyperparameter search completed
2025-01-19 13:45:48,938:INFO:SubProcess create_model() called ==================================
2025-01-19 13:45:48,939:INFO:Initializing create_model()
2025-01-19 13:45:48,939:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D831FFF370>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-19 13:45:48,939:INFO:Checking exceptions
2025-01-19 13:45:48,939:INFO:Importing libraries
2025-01-19 13:45:48,939:INFO:Copying training dataset
2025-01-19 13:45:48,957:INFO:Defining folds
2025-01-19 13:45:48,957:INFO:Declaring metric variables
2025-01-19 13:45:48,966:INFO:Importing untrained model
2025-01-19 13:45:48,967:INFO:Declaring custom model
2025-01-19 13:45:48,976:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:45:48,996:INFO:Starting cross validation
2025-01-19 13:45:49,001:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:45:50,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,301:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:50,314:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,123:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,173:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,182:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,260:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,979:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:51,995:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,339:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,346:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,580:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,583:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,588:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:52,605:INFO:Calculating mean and std
2025-01-19 13:45:52,607:INFO:Creating metrics dataframe
2025-01-19 13:45:52,617:INFO:Finalizing model
2025-01-19 13:45:53,385:INFO:Uploading results into container
2025-01-19 13:45:53,387:INFO:Uploading model into container now
2025-01-19 13:45:53,388:INFO:_master_model_container: 26
2025-01-19 13:45:53,388:INFO:_display_container: 9
2025-01-19 13:45:53,389:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 13:45:53,389:INFO:create_model() successfully completed......................................
2025-01-19 13:45:53,473:INFO:SubProcess create_model() end ==================================
2025-01-19 13:45:53,473:INFO:choose_better activated
2025-01-19 13:45:53,482:INFO:SubProcess create_model() called ==================================
2025-01-19 13:45:53,483:INFO:Initializing create_model()
2025-01-19 13:45:53,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:45:53,483:INFO:Checking exceptions
2025-01-19 13:45:53,486:INFO:Importing libraries
2025-01-19 13:45:53,486:INFO:Copying training dataset
2025-01-19 13:45:53,502:INFO:Defining folds
2025-01-19 13:45:53,502:INFO:Declaring metric variables
2025-01-19 13:45:53,502:INFO:Importing untrained model
2025-01-19 13:45:53,502:INFO:Declaring custom model
2025-01-19 13:45:53,503:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:45:53,503:INFO:Starting cross validation
2025-01-19 13:45:53,505:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:45:54,427:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,436:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,489:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,521:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,540:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,707:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,715:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:54,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,281:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,290:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,306:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,867:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,873:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,991:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:55,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:56,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:56,019:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:56,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:56,043:INFO:Calculating mean and std
2025-01-19 13:45:56,043:INFO:Creating metrics dataframe
2025-01-19 13:45:56,046:INFO:Finalizing model
2025-01-19 13:45:56,582:INFO:Uploading results into container
2025-01-19 13:45:56,583:INFO:Uploading model into container now
2025-01-19 13:45:56,583:INFO:_master_model_container: 27
2025-01-19 13:45:56,583:INFO:_display_container: 10
2025-01-19 13:45:56,590:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:45:56,590:INFO:create_model() successfully completed......................................
2025-01-19 13:45:56,753:INFO:SubProcess create_model() end ==================================
2025-01-19 13:45:56,755:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-19 13:45:56,755:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-19 13:45:56,756:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-19 13:45:56,756:INFO:choose_better completed
2025-01-19 13:45:56,774:INFO:_master_model_container: 27
2025-01-19 13:45:56,775:INFO:_display_container: 9
2025-01-19 13:45:56,776:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 13:45:56,778:INFO:tune_model() successfully completed......................................
2025-01-19 13:45:56,926:INFO:Initializing ensemble_model()
2025-01-19 13:45:56,927:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 13:45:56,927:INFO:Checking exceptions
2025-01-19 13:45:56,977:INFO:Importing libraries
2025-01-19 13:45:56,978:INFO:Copying training dataset
2025-01-19 13:45:56,979:INFO:Checking base model
2025-01-19 13:45:56,986:INFO:Base model : Decision Tree Classifier
2025-01-19 13:45:57,013:INFO:Importing untrained ensembler
2025-01-19 13:45:57,013:INFO:Ensemble method set to Bagging
2025-01-19 13:45:57,014:INFO:SubProcess create_model() called ==================================
2025-01-19 13:45:57,021:INFO:Initializing create_model()
2025-01-19 13:45:57,021:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844E4C0D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:45:57,022:INFO:Checking exceptions
2025-01-19 13:45:57,022:INFO:Importing libraries
2025-01-19 13:45:57,022:INFO:Copying training dataset
2025-01-19 13:45:57,043:INFO:Defining folds
2025-01-19 13:45:57,044:INFO:Declaring metric variables
2025-01-19 13:45:57,066:INFO:Importing untrained model
2025-01-19 13:45:57,069:INFO:Declaring custom model
2025-01-19 13:45:57,092:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:45:57,144:INFO:Starting cross validation
2025-01-19 13:45:57,150:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:45:57,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,949:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,955:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,959:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:57,999:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,257:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,275:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,278:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,284:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,316:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,322:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,328:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,480:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,485:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,492:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:45:58,512:INFO:Calculating mean and std
2025-01-19 13:45:58,514:INFO:Creating metrics dataframe
2025-01-19 13:45:58,525:INFO:Finalizing model
2025-01-19 13:45:58,655:INFO:Uploading results into container
2025-01-19 13:45:58,657:INFO:Uploading model into container now
2025-01-19 13:45:58,659:INFO:_master_model_container: 28
2025-01-19 13:45:58,659:INFO:_display_container: 10
2025-01-19 13:45:58,661:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 13:45:58,661:INFO:create_model() successfully completed......................................
2025-01-19 13:45:58,794:INFO:SubProcess create_model() end ==================================
2025-01-19 13:45:58,812:INFO:_master_model_container: 28
2025-01-19 13:45:58,812:INFO:_display_container: 10
2025-01-19 13:45:58,815:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 13:45:58,815:INFO:ensemble_model() successfully completed......................................
2025-01-19 13:46:14,273:INFO:Initializing ensemble_model()
2025-01-19 13:46:14,273:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 13:46:14,273:INFO:Checking exceptions
2025-01-19 13:46:14,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:14,731:INFO:Importing libraries
2025-01-19 13:46:14,732:INFO:Copying training dataset
2025-01-19 13:46:14,732:INFO:Checking base model
2025-01-19 13:46:14,733:INFO:Base model : Decision Tree Classifier
2025-01-19 13:46:14,785:INFO:Importing untrained ensembler
2025-01-19 13:46:14,785:INFO:Ensemble method set to Boosting
2025-01-19 13:46:14,785:INFO:SubProcess create_model() called ==================================
2025-01-19 13:46:14,789:INFO:Initializing create_model()
2025-01-19 13:46:14,789:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844E6E5E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:46:14,789:INFO:Checking exceptions
2025-01-19 13:46:14,789:INFO:Importing libraries
2025-01-19 13:46:14,790:INFO:Copying training dataset
2025-01-19 13:46:14,842:INFO:Defining folds
2025-01-19 13:46:14,843:INFO:Declaring metric variables
2025-01-19 13:46:14,860:INFO:Importing untrained model
2025-01-19 13:46:14,861:INFO:Declaring custom model
2025-01-19 13:46:14,881:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:46:14,917:INFO:Starting cross validation
2025-01-19 13:46:14,920:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:46:15,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,289:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,306:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,331:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,340:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,421:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,439:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,461:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,496:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,513:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,522:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,551:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,574:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,578:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,591:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,652:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,683:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,737:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,747:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,761:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,775:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:15,796:INFO:Calculating mean and std
2025-01-19 13:46:15,798:INFO:Creating metrics dataframe
2025-01-19 13:46:15,816:INFO:Finalizing model
2025-01-19 13:46:15,882:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:15,904:INFO:Uploading results into container
2025-01-19 13:46:15,905:INFO:Uploading model into container now
2025-01-19 13:46:15,906:INFO:_master_model_container: 29
2025-01-19 13:46:15,907:INFO:_display_container: 11
2025-01-19 13:46:15,911:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 13:46:15,912:INFO:create_model() successfully completed......................................
2025-01-19 13:46:16,061:INFO:SubProcess create_model() end ==================================
2025-01-19 13:46:16,080:INFO:_master_model_container: 29
2025-01-19 13:46:16,080:INFO:_display_container: 11
2025-01-19 13:46:16,081:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 13:46:16,083:INFO:ensemble_model() successfully completed......................................
2025-01-19 13:46:20,276:INFO:Initializing blend_models()
2025-01-19 13:46:20,277:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 13:46:20,277:INFO:Checking exceptions
2025-01-19 13:46:20,334:INFO:Importing libraries
2025-01-19 13:46:20,335:INFO:Copying training dataset
2025-01-19 13:46:20,348:INFO:Getting model names
2025-01-19 13:46:20,442:INFO:SubProcess create_model() called ==================================
2025-01-19 13:46:20,468:INFO:Initializing create_model()
2025-01-19 13:46:20,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844E4C0D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:46:20,468:INFO:Checking exceptions
2025-01-19 13:46:20,468:INFO:Importing libraries
2025-01-19 13:46:20,468:INFO:Copying training dataset
2025-01-19 13:46:20,504:INFO:Defining folds
2025-01-19 13:46:20,505:INFO:Declaring metric variables
2025-01-19 13:46:20,518:INFO:Importing untrained model
2025-01-19 13:46:20,518:INFO:Declaring custom model
2025-01-19 13:46:20,563:INFO:Voting Classifier Imported successfully
2025-01-19 13:46:20,589:INFO:Starting cross validation
2025-01-19 13:46:20,593:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:46:20,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:20,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:20,801:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:20,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:22,238:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,287:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,320:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,327:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:22,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:22,402:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:22,432:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:22,460:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:23,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,473:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,537:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,547:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,551:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,553:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,568:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,606:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:23,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:23,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:24,467:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:46:24,560:INFO:Calculating mean and std
2025-01-19 13:46:24,566:INFO:Creating metrics dataframe
2025-01-19 13:46:24,597:INFO:Finalizing model
2025-01-19 13:46:24,715:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:25,503:INFO:Uploading results into container
2025-01-19 13:46:25,505:INFO:Uploading model into container now
2025-01-19 13:46:25,509:INFO:_master_model_container: 30
2025-01-19 13:46:25,509:INFO:_display_container: 12
2025-01-19 13:46:25,521:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 13:46:25,521:INFO:create_model() successfully completed......................................
2025-01-19 13:46:25,623:INFO:SubProcess create_model() end ==================================
2025-01-19 13:46:25,641:INFO:_master_model_container: 30
2025-01-19 13:46:25,641:INFO:_display_container: 12
2025-01-19 13:46:25,656:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 13:46:25,657:INFO:blend_models() successfully completed......................................
2025-01-19 13:46:58,408:INFO:Initializing stack_models()
2025-01-19 13:46:58,408:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 13:46:58,408:INFO:Checking exceptions
2025-01-19 13:46:58,415:INFO:Defining meta model
2025-01-19 13:46:58,472:INFO:Getting model names
2025-01-19 13:46:58,475:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-19 13:46:58,543:INFO:SubProcess create_model() called ==================================
2025-01-19 13:46:58,622:INFO:Initializing create_model()
2025-01-19 13:46:58,622:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D844E7A580>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:46:58,623:INFO:Checking exceptions
2025-01-19 13:46:58,623:INFO:Importing libraries
2025-01-19 13:46:58,623:INFO:Copying training dataset
2025-01-19 13:46:58,702:INFO:Defining folds
2025-01-19 13:46:58,702:INFO:Declaring metric variables
2025-01-19 13:46:58,755:INFO:Importing untrained model
2025-01-19 13:46:58,755:INFO:Declaring custom model
2025-01-19 13:46:58,773:INFO:Stacking Classifier Imported successfully
2025-01-19 13:46:58,836:INFO:Starting cross validation
2025-01-19 13:46:58,838:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:46:59,088:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:59,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:59,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:46:59,172:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,287:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,336:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,432:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,517:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,667:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:00,735:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:05,589:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,615:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,693:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,701:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,727:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,737:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:05,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:05,793:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:05,881:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:05,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,673:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,674:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,698:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,824:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,838:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,894:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,913:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,913:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,929:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,971:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,971:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:06,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:07,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:07,020:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:07,028:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:07,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:12,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,385:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,415:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,585:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:12,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:12,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:12,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:13,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,251:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,306:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:13,368:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:16,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,648:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:47:16,678:INFO:Calculating mean and std
2025-01-19 13:47:16,684:INFO:Creating metrics dataframe
2025-01-19 13:47:16,700:INFO:Finalizing model
2025-01-19 13:47:16,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:17,632:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:17,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:17,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:17,641:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:17,675:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:47:21,399:INFO:Uploading results into container
2025-01-19 13:47:21,402:INFO:Uploading model into container now
2025-01-19 13:47:21,405:INFO:_master_model_container: 31
2025-01-19 13:47:21,406:INFO:_display_container: 13
2025-01-19 13:47:21,441:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 13:47:21,442:INFO:create_model() successfully completed......................................
2025-01-19 13:47:21,656:INFO:SubProcess create_model() end ==================================
2025-01-19 13:47:21,686:INFO:_master_model_container: 31
2025-01-19 13:47:21,686:INFO:_display_container: 13
2025-01-19 13:47:21,707:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 13:47:21,707:INFO:stack_models() successfully completed......................................
2025-01-19 13:47:25,517:INFO:Initializing plot_model()
2025-01-19 13:47:25,518:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:47:25,518:INFO:Checking exceptions
2025-01-19 13:47:25,593:INFO:Preloading libraries
2025-01-19 13:47:25,642:INFO:Copying training dataset
2025-01-19 13:47:25,658:INFO:Plot type: auc
2025-01-19 13:47:25,963:INFO:Fitting Model
2025-01-19 13:47:25,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 13:47:25,969:INFO:Scoring test/hold-out set
2025-01-19 13:47:26,646:INFO:Visual Rendered Successfully
2025-01-19 13:47:26,840:INFO:plot_model() successfully completed......................................
2025-01-19 13:47:39,353:INFO:Initializing plot_model()
2025-01-19 13:47:39,353:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:47:39,355:INFO:Checking exceptions
2025-01-19 13:47:39,431:INFO:Preloading libraries
2025-01-19 13:47:39,459:INFO:Copying training dataset
2025-01-19 13:47:39,459:INFO:Plot type: confusion_matrix
2025-01-19 13:47:39,814:INFO:Fitting Model
2025-01-19 13:47:39,814:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 13:47:39,814:INFO:Scoring test/hold-out set
2025-01-19 13:47:40,188:INFO:Visual Rendered Successfully
2025-01-19 13:47:40,348:INFO:plot_model() successfully completed......................................
2025-01-19 13:47:51,189:INFO:Initializing plot_model()
2025-01-19 13:47:51,190:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:47:51,190:INFO:Checking exceptions
2025-01-19 13:47:51,269:INFO:Preloading libraries
2025-01-19 13:47:51,297:INFO:Copying training dataset
2025-01-19 13:47:51,297:INFO:Plot type: feature
2025-01-19 13:47:51,297:WARNING:No coef_ found. Trying feature_importances_
2025-01-19 13:47:51,746:INFO:Visual Rendered Successfully
2025-01-19 13:47:51,825:INFO:plot_model() successfully completed......................................
2025-01-19 13:48:12,211:INFO:Initializing plot_model()
2025-01-19 13:48:12,212:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:48:12,212:INFO:Checking exceptions
2025-01-19 13:48:12,283:INFO:Preloading libraries
2025-01-19 13:48:12,316:INFO:Copying training dataset
2025-01-19 13:48:12,317:INFO:Plot type: boundary
2025-01-19 13:48:12,553:INFO:Fitting StandardScaler()
2025-01-19 13:48:12,562:INFO:Fitting PCA()
2025-01-19 13:48:12,708:INFO:Fitting Model
2025-01-19 13:48:15,604:INFO:Visual Rendered Successfully
2025-01-19 13:48:15,792:INFO:plot_model() successfully completed......................................
2025-01-19 13:48:23,535:INFO:Initializing plot_model()
2025-01-19 13:48:23,535:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:48:23,535:INFO:Checking exceptions
2025-01-19 13:48:23,611:INFO:Preloading libraries
2025-01-19 13:48:23,647:INFO:Copying training dataset
2025-01-19 13:48:23,647:INFO:Plot type: pr
2025-01-19 13:48:23,988:INFO:Fitting Model
2025-01-19 13:48:23,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 13:48:23,989:INFO:Scoring test/hold-out set
2025-01-19 13:48:24,535:INFO:Visual Rendered Successfully
2025-01-19 13:48:24,639:INFO:plot_model() successfully completed......................................
2025-01-19 13:48:36,646:INFO:Initializing plot_model()
2025-01-19 13:48:36,646:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:48:36,646:INFO:Checking exceptions
2025-01-19 13:48:36,724:INFO:Preloading libraries
2025-01-19 13:48:36,777:INFO:Copying training dataset
2025-01-19 13:48:36,778:INFO:Plot type: class_report
2025-01-19 13:48:37,089:INFO:Fitting Model
2025-01-19 13:48:37,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 13:48:37,090:INFO:Scoring test/hold-out set
2025-01-19 13:48:37,735:INFO:Visual Rendered Successfully
2025-01-19 13:48:37,828:INFO:plot_model() successfully completed......................................
2025-01-19 13:48:46,921:INFO:Initializing evaluate_model()
2025-01-19 13:48:46,922:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 13:48:46,957:INFO:Initializing plot_model()
2025-01-19 13:48:46,957:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, system=True)
2025-01-19 13:48:46,957:INFO:Checking exceptions
2025-01-19 13:48:47,292:INFO:Preloading libraries
2025-01-19 13:48:47,312:INFO:Copying training dataset
2025-01-19 13:48:47,312:INFO:Plot type: pipeline
2025-01-19 13:48:47,821:INFO:Visual Rendered Successfully
2025-01-19 13:48:47,916:INFO:plot_model() successfully completed......................................
2025-01-19 13:49:38,527:INFO:Initializing create_model()
2025-01-19 13:49:38,529:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:49:38,529:INFO:Checking exceptions
2025-01-19 13:49:38,573:INFO:Importing libraries
2025-01-19 13:49:38,574:INFO:Copying training dataset
2025-01-19 13:49:38,600:INFO:Defining folds
2025-01-19 13:49:38,600:INFO:Declaring metric variables
2025-01-19 13:49:38,613:INFO:Importing untrained model
2025-01-19 13:49:38,626:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 13:49:38,649:INFO:Cross validation set to False
2025-01-19 13:49:38,650:INFO:Fitting Model
2025-01-19 13:49:38,962:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 13:49:38,967:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.004383 seconds.
2025-01-19 13:49:38,968:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-19 13:49:38,968:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-19 13:49:38,969:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 13:49:38,970:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 13:49:39,001:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 13:49:39,002:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 13:49:39,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,050:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,112:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,117:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,122:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,124:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,128:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,135:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,138:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,143:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,147:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,157:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,160:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,171:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,175:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,186:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,189:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,203:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,208:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,212:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,218:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,224:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,236:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,394:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,470:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,478:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,481:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,496:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,500:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,512:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,515:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,520:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,527:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,529:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,558:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 13:49:39,705:INFO:Initializing predict_model()
2025-01-19 13:49:39,706:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D849F9CA60>)
2025-01-19 13:49:39,706:INFO:Checking exceptions
2025-01-19 13:49:39,706:INFO:Preloading libraries
2025-01-19 13:49:40,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:49:40,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:49:40,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:49:40,441:INFO:_display_container: 14
2025-01-19 13:49:40,447:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 13:49:40,448:INFO:create_model() successfully completed......................................
2025-01-19 13:50:15,571:INFO:Initializing interpret_model()
2025-01-19 13:50:15,571:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>)
2025-01-19 13:50:15,572:INFO:Checking exceptions
2025-01-19 13:50:15,572:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 13:50:57,042:INFO:Initializing interpret_model()
2025-01-19 13:50:57,043:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>)
2025-01-19 13:50:57,043:INFO:Checking exceptions
2025-01-19 13:50:57,044:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 13:51:23,846:INFO:Initializing interpret_model()
2025-01-19 13:51:23,847:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D831E89D60>)
2025-01-19 13:51:23,847:INFO:Checking exceptions
2025-01-19 13:51:23,847:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 13:59:21,221:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:59:21,222:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:59:21,222:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:59:21,222:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 13:59:25,924:INFO:PyCaret ClassificationExperiment
2025-01-19 13:59:25,924:INFO:Logging name: juice1
2025-01-19 13:59:25,924:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-19 13:59:25,925:INFO:version 3.3.2
2025-01-19 13:59:25,925:INFO:Initializing setup()
2025-01-19 13:59:25,925:INFO:self.USI: 02fb
2025-01-19 13:59:25,925:INFO:self._variable_keys: {'memory', 'y', 'exp_name_log', '_ml_usecase', '_available_plots', 'html_param', 'y_train', 'fold_generator', 'data', 'gpu_n_jobs_param', 'logging_param', 'fold_shuffle_param', 'X_test', 'fold_groups_param', 'target_param', 'X', 'pipeline', 'X_train', 'n_jobs_param', 'USI', 'fix_imbalance', 'y_test', 'seed', 'log_plots_param', 'idx', 'exp_id', 'is_multiclass', 'gpu_param'}
2025-01-19 13:59:25,925:INFO:Checking environment
2025-01-19 13:59:25,925:INFO:python_version: 3.9.0
2025-01-19 13:59:25,925:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 13:59:25,925:INFO:machine: AMD64
2025-01-19 13:59:25,926:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 13:59:25,936:INFO:Memory: svmem(total=8416788480, available=1878056960, percent=77.7, used=6538731520, free=1878056960)
2025-01-19 13:59:25,937:INFO:Physical Core: 2
2025-01-19 13:59:25,937:INFO:Logical Core: 4
2025-01-19 13:59:25,937:INFO:Checking libraries
2025-01-19 13:59:25,937:INFO:System:
2025-01-19 13:59:25,937:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 13:59:25,938:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 13:59:25,938:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 13:59:25,938:INFO:PyCaret required dependencies:
2025-01-19 13:59:25,994:INFO:                 pip: 24.2
2025-01-19 13:59:25,994:INFO:          setuptools: 75.1.0
2025-01-19 13:59:25,994:INFO:             pycaret: 3.3.2
2025-01-19 13:59:25,995:INFO:             IPython: 8.18.1
2025-01-19 13:59:25,995:INFO:          ipywidgets: 8.1.5
2025-01-19 13:59:25,995:INFO:                tqdm: 4.67.1
2025-01-19 13:59:25,995:INFO:               numpy: 1.26.4
2025-01-19 13:59:25,995:INFO:              pandas: 2.1.4
2025-01-19 13:59:25,995:INFO:              jinja2: 3.1.5
2025-01-19 13:59:25,995:INFO:               scipy: 1.11.4
2025-01-19 13:59:25,995:INFO:              joblib: 1.3.2
2025-01-19 13:59:25,995:INFO:             sklearn: 1.4.2
2025-01-19 13:59:25,995:INFO:                pyod: 2.0.3
2025-01-19 13:59:25,996:INFO:            imblearn: 0.12.4
2025-01-19 13:59:25,996:INFO:   category_encoders: 2.6.4
2025-01-19 13:59:25,996:INFO:            lightgbm: 4.5.0
2025-01-19 13:59:25,996:INFO:               numba: 0.60.0
2025-01-19 13:59:25,996:INFO:            requests: 2.32.3
2025-01-19 13:59:25,996:INFO:          matplotlib: 3.7.5
2025-01-19 13:59:25,996:INFO:          scikitplot: 0.3.7
2025-01-19 13:59:25,996:INFO:         yellowbrick: 1.5
2025-01-19 13:59:25,996:INFO:              plotly: 5.24.1
2025-01-19 13:59:25,996:INFO:    plotly-resampler: Not installed
2025-01-19 13:59:25,996:INFO:             kaleido: 0.2.1
2025-01-19 13:59:25,996:INFO:           schemdraw: 0.15
2025-01-19 13:59:25,996:INFO:         statsmodels: 0.14.4
2025-01-19 13:59:25,996:INFO:              sktime: 0.26.0
2025-01-19 13:59:25,997:INFO:               tbats: 1.1.3
2025-01-19 13:59:25,997:INFO:            pmdarima: 2.0.4
2025-01-19 13:59:25,997:INFO:              psutil: 6.1.1
2025-01-19 13:59:25,997:INFO:          markupsafe: 3.0.2
2025-01-19 13:59:25,997:INFO:             pickle5: Not installed
2025-01-19 13:59:25,997:INFO:         cloudpickle: 3.1.1
2025-01-19 13:59:25,997:INFO:         deprecation: 2.1.0
2025-01-19 13:59:25,997:INFO:              xxhash: 3.5.0
2025-01-19 13:59:25,997:INFO:           wurlitzer: Not installed
2025-01-19 13:59:25,997:INFO:PyCaret optional dependencies:
2025-01-19 13:59:26,041:INFO:                shap: Not installed
2025-01-19 13:59:26,041:INFO:           interpret: Not installed
2025-01-19 13:59:26,041:INFO:                umap: Not installed
2025-01-19 13:59:26,041:INFO:     ydata_profiling: Not installed
2025-01-19 13:59:26,042:INFO:  explainerdashboard: Not installed
2025-01-19 13:59:26,042:INFO:             autoviz: Not installed
2025-01-19 13:59:26,042:INFO:           fairlearn: Not installed
2025-01-19 13:59:26,042:INFO:          deepchecks: Not installed
2025-01-19 13:59:26,042:INFO:             xgboost: Not installed
2025-01-19 13:59:26,042:INFO:            catboost: Not installed
2025-01-19 13:59:26,043:INFO:              kmodes: Not installed
2025-01-19 13:59:26,043:INFO:             mlxtend: Not installed
2025-01-19 13:59:26,043:INFO:       statsforecast: Not installed
2025-01-19 13:59:26,043:INFO:        tune_sklearn: Not installed
2025-01-19 13:59:26,044:INFO:                 ray: Not installed
2025-01-19 13:59:26,044:INFO:            hyperopt: Not installed
2025-01-19 13:59:26,044:INFO:              optuna: Not installed
2025-01-19 13:59:26,045:INFO:               skopt: Not installed
2025-01-19 13:59:26,045:INFO:              mlflow: 2.19.0
2025-01-19 13:59:26,045:INFO:              gradio: Not installed
2025-01-19 13:59:26,045:INFO:             fastapi: Not installed
2025-01-19 13:59:26,046:INFO:             uvicorn: Not installed
2025-01-19 13:59:26,046:INFO:              m2cgen: Not installed
2025-01-19 13:59:26,046:INFO:           evidently: Not installed
2025-01-19 13:59:26,046:INFO:               fugue: Not installed
2025-01-19 13:59:26,046:INFO:           streamlit: Not installed
2025-01-19 13:59:26,046:INFO:             prophet: Not installed
2025-01-19 13:59:26,046:INFO:None
2025-01-19 13:59:26,046:INFO:Set up data.
2025-01-19 13:59:26,067:INFO:Set up folding strategy.
2025-01-19 13:59:26,068:INFO:Set up train/test split.
2025-01-19 13:59:26,089:INFO:Set up index.
2025-01-19 13:59:26,089:INFO:Assigning column types.
2025-01-19 13:59:26,102:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 13:59:26,198:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,206:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,281:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,384:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,388:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,437:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,438:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,439:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 13:59:26,517:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,571:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 13:59:26,760:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,761:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,762:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-19 13:59:26,923:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:26,923:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,081:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,086:INFO:Preparing preprocessing pipeline...
2025-01-19 13:59:27,090:INFO:Set up label encoding.
2025-01-19 13:59:27,092:INFO:Set up simple imputation.
2025-01-19 13:59:27,102:INFO:Set up encoding of ordinal features.
2025-01-19 13:59:27,108:INFO:Set up encoding of categorical features.
2025-01-19 13:59:27,239:INFO:Finished creating preprocessing pipeline.
2025-01-19 13:59:27,280:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-19 13:59:27,280:INFO:Creating final display dataframe.
2025-01-19 13:59:27,420:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             02fb
2025-01-19 13:59:27,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,746:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,925:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,925:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 13:59:27,930:INFO:setup() successfully completed in 2.01s...............
2025-01-19 13:59:27,957:INFO:Initializing compare_models()
2025-01-19 13:59:27,958:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 13:59:27,958:INFO:Checking exceptions
2025-01-19 13:59:27,971:INFO:Preparing display monitor
2025-01-19 13:59:28,091:INFO:Initializing Logistic Regression
2025-01-19 13:59:28,092:INFO:Total runtime is 1.666545867919922e-05 minutes
2025-01-19 13:59:28,107:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:28,108:INFO:Initializing create_model()
2025-01-19 13:59:28,108:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:28,108:INFO:Checking exceptions
2025-01-19 13:59:28,108:INFO:Importing libraries
2025-01-19 13:59:28,109:INFO:Copying training dataset
2025-01-19 13:59:28,151:INFO:Defining folds
2025-01-19 13:59:28,151:INFO:Declaring metric variables
2025-01-19 13:59:28,177:INFO:Importing untrained model
2025-01-19 13:59:28,190:INFO:Logistic Regression Imported successfully
2025-01-19 13:59:28,222:INFO:Starting cross validation
2025-01-19 13:59:28,225:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:41,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:41,650:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:41,735:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,744:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,761:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:41,932:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:42,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:42,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:42,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,495:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,515:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,522:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:42,658:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:42,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,673:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,744:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:42,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:43,026:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:43,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,051:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,093:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,189:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 13:59:43,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,238:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,242:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:43,254:INFO:Calculating mean and std
2025-01-19 13:59:43,258:INFO:Creating metrics dataframe
2025-01-19 13:59:43,262:INFO:Uploading results into container
2025-01-19 13:59:43,262:INFO:Uploading model into container now
2025-01-19 13:59:43,264:INFO:_master_model_container: 1
2025-01-19 13:59:43,264:INFO:_display_container: 2
2025-01-19 13:59:43,265:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 13:59:43,265:INFO:create_model() successfully completed......................................
2025-01-19 13:59:43,383:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:43,383:INFO:Creating metrics dataframe
2025-01-19 13:59:43,398:INFO:Initializing K Neighbors Classifier
2025-01-19 13:59:43,398:INFO:Total runtime is 0.25512390931447343 minutes
2025-01-19 13:59:43,408:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:43,408:INFO:Initializing create_model()
2025-01-19 13:59:43,408:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:43,409:INFO:Checking exceptions
2025-01-19 13:59:43,409:INFO:Importing libraries
2025-01-19 13:59:43,411:INFO:Copying training dataset
2025-01-19 13:59:43,433:INFO:Defining folds
2025-01-19 13:59:43,434:INFO:Declaring metric variables
2025-01-19 13:59:43,443:INFO:Importing untrained model
2025-01-19 13:59:43,453:INFO:K Neighbors Classifier Imported successfully
2025-01-19 13:59:43,473:INFO:Starting cross validation
2025-01-19 13:59:43,476:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:44,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,021:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,029:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,234:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,275:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,290:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,297:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,312:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,318:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,386:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,393:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,448:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,453:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,464:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,473:INFO:Calculating mean and std
2025-01-19 13:59:44,478:INFO:Creating metrics dataframe
2025-01-19 13:59:44,483:INFO:Uploading results into container
2025-01-19 13:59:44,484:INFO:Uploading model into container now
2025-01-19 13:59:44,485:INFO:_master_model_container: 2
2025-01-19 13:59:44,486:INFO:_display_container: 2
2025-01-19 13:59:44,487:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-19 13:59:44,487:INFO:create_model() successfully completed......................................
2025-01-19 13:59:44,612:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:44,612:INFO:Creating metrics dataframe
2025-01-19 13:59:44,623:INFO:Initializing Naive Bayes
2025-01-19 13:59:44,624:INFO:Total runtime is 0.27556288639704385 minutes
2025-01-19 13:59:44,633:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:44,633:INFO:Initializing create_model()
2025-01-19 13:59:44,634:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:44,635:INFO:Checking exceptions
2025-01-19 13:59:44,635:INFO:Importing libraries
2025-01-19 13:59:44,636:INFO:Copying training dataset
2025-01-19 13:59:44,651:INFO:Defining folds
2025-01-19 13:59:44,651:INFO:Declaring metric variables
2025-01-19 13:59:44,660:INFO:Importing untrained model
2025-01-19 13:59:44,669:INFO:Naive Bayes Imported successfully
2025-01-19 13:59:44,688:INFO:Starting cross validation
2025-01-19 13:59:44,690:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:44,886:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,886:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,887:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,893:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,893:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,908:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,916:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,922:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:44,930:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,124:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,165:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,169:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,257:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,265:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,575:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,583:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:45,623:INFO:Calculating mean and std
2025-01-19 13:59:45,625:INFO:Creating metrics dataframe
2025-01-19 13:59:45,635:INFO:Uploading results into container
2025-01-19 13:59:45,637:INFO:Uploading model into container now
2025-01-19 13:59:45,638:INFO:_master_model_container: 3
2025-01-19 13:59:45,638:INFO:_display_container: 2
2025-01-19 13:59:45,639:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-19 13:59:45,639:INFO:create_model() successfully completed......................................
2025-01-19 13:59:45,802:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:45,803:INFO:Creating metrics dataframe
2025-01-19 13:59:45,823:INFO:Initializing Decision Tree Classifier
2025-01-19 13:59:45,823:INFO:Total runtime is 0.2955349365870158 minutes
2025-01-19 13:59:45,832:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:45,832:INFO:Initializing create_model()
2025-01-19 13:59:45,833:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:45,833:INFO:Checking exceptions
2025-01-19 13:59:45,833:INFO:Importing libraries
2025-01-19 13:59:45,834:INFO:Copying training dataset
2025-01-19 13:59:45,849:INFO:Defining folds
2025-01-19 13:59:45,850:INFO:Declaring metric variables
2025-01-19 13:59:45,866:INFO:Importing untrained model
2025-01-19 13:59:45,878:INFO:Decision Tree Classifier Imported successfully
2025-01-19 13:59:45,898:INFO:Starting cross validation
2025-01-19 13:59:45,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:46,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,086:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,506:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,515:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,526:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,529:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,535:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,538:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,546:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,579:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,703:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,715:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,731:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:46,742:INFO:Calculating mean and std
2025-01-19 13:59:46,745:INFO:Creating metrics dataframe
2025-01-19 13:59:46,751:INFO:Uploading results into container
2025-01-19 13:59:46,753:INFO:Uploading model into container now
2025-01-19 13:59:46,754:INFO:_master_model_container: 4
2025-01-19 13:59:46,755:INFO:_display_container: 2
2025-01-19 13:59:46,756:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 13:59:46,756:INFO:create_model() successfully completed......................................
2025-01-19 13:59:46,868:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:46,868:INFO:Creating metrics dataframe
2025-01-19 13:59:46,879:INFO:Initializing SVM - Linear Kernel
2025-01-19 13:59:46,880:INFO:Total runtime is 0.31315736373265585 minutes
2025-01-19 13:59:46,886:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:46,887:INFO:Initializing create_model()
2025-01-19 13:59:46,888:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:46,889:INFO:Checking exceptions
2025-01-19 13:59:46,890:INFO:Importing libraries
2025-01-19 13:59:46,890:INFO:Copying training dataset
2025-01-19 13:59:46,903:INFO:Defining folds
2025-01-19 13:59:46,903:INFO:Declaring metric variables
2025-01-19 13:59:46,912:INFO:Importing untrained model
2025-01-19 13:59:46,921:INFO:SVM - Linear Kernel Imported successfully
2025-01-19 13:59:46,938:INFO:Starting cross validation
2025-01-19 13:59:46,942:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:47,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,133:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,142:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,147:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,164:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,164:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,173:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,196:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,330:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,337:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,338:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,339:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,346:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,484:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 13:59:47,496:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,496:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,518:INFO:Calculating mean and std
2025-01-19 13:59:47,521:INFO:Creating metrics dataframe
2025-01-19 13:59:47,528:INFO:Uploading results into container
2025-01-19 13:59:47,529:INFO:Uploading model into container now
2025-01-19 13:59:47,530:INFO:_master_model_container: 5
2025-01-19 13:59:47,530:INFO:_display_container: 2
2025-01-19 13:59:47,532:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-19 13:59:47,532:INFO:create_model() successfully completed......................................
2025-01-19 13:59:47,639:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:47,640:INFO:Creating metrics dataframe
2025-01-19 13:59:47,654:INFO:Initializing Ridge Classifier
2025-01-19 13:59:47,655:INFO:Total runtime is 0.3260739247004191 minutes
2025-01-19 13:59:47,664:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:47,665:INFO:Initializing create_model()
2025-01-19 13:59:47,665:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:47,666:INFO:Checking exceptions
2025-01-19 13:59:47,666:INFO:Importing libraries
2025-01-19 13:59:47,666:INFO:Copying training dataset
2025-01-19 13:59:47,679:INFO:Defining folds
2025-01-19 13:59:47,679:INFO:Declaring metric variables
2025-01-19 13:59:47,691:INFO:Importing untrained model
2025-01-19 13:59:47,701:INFO:Ridge Classifier Imported successfully
2025-01-19 13:59:47,717:INFO:Starting cross validation
2025-01-19 13:59:47,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:47,904:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,911:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,918:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,929:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,942:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,948:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:47,964:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,106:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,123:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,124:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,138:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,181:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,188:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,195:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,360:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,367:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:48,383:INFO:Calculating mean and std
2025-01-19 13:59:48,385:INFO:Creating metrics dataframe
2025-01-19 13:59:48,393:INFO:Uploading results into container
2025-01-19 13:59:48,395:INFO:Uploading model into container now
2025-01-19 13:59:48,396:INFO:_master_model_container: 6
2025-01-19 13:59:48,397:INFO:_display_container: 2
2025-01-19 13:59:48,397:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-19 13:59:48,397:INFO:create_model() successfully completed......................................
2025-01-19 13:59:48,558:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:48,558:INFO:Creating metrics dataframe
2025-01-19 13:59:48,579:INFO:Initializing Random Forest Classifier
2025-01-19 13:59:48,579:INFO:Total runtime is 0.3414678692817688 minutes
2025-01-19 13:59:48,589:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:48,590:INFO:Initializing create_model()
2025-01-19 13:59:48,590:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:48,590:INFO:Checking exceptions
2025-01-19 13:59:48,591:INFO:Importing libraries
2025-01-19 13:59:48,591:INFO:Copying training dataset
2025-01-19 13:59:48,610:INFO:Defining folds
2025-01-19 13:59:48,611:INFO:Declaring metric variables
2025-01-19 13:59:48,627:INFO:Importing untrained model
2025-01-19 13:59:48,638:INFO:Random Forest Classifier Imported successfully
2025-01-19 13:59:48,669:INFO:Starting cross validation
2025-01-19 13:59:48,674:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:50,664:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,672:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,674:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,678:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,712:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:50,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:51,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:51,060:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:51,066:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,572:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,579:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,584:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,586:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:52,728:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,085:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,687:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,695:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,702:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,718:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,728:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:53,740:INFO:Calculating mean and std
2025-01-19 13:59:53,745:INFO:Creating metrics dataframe
2025-01-19 13:59:53,752:INFO:Uploading results into container
2025-01-19 13:59:53,756:INFO:Uploading model into container now
2025-01-19 13:59:53,759:INFO:_master_model_container: 7
2025-01-19 13:59:53,759:INFO:_display_container: 2
2025-01-19 13:59:53,760:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 13:59:53,761:INFO:create_model() successfully completed......................................
2025-01-19 13:59:53,921:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:53,921:INFO:Creating metrics dataframe
2025-01-19 13:59:53,940:INFO:Initializing Quadratic Discriminant Analysis
2025-01-19 13:59:53,940:INFO:Total runtime is 0.4308190107345581 minutes
2025-01-19 13:59:53,953:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:53,954:INFO:Initializing create_model()
2025-01-19 13:59:53,955:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:53,955:INFO:Checking exceptions
2025-01-19 13:59:53,955:INFO:Importing libraries
2025-01-19 13:59:53,956:INFO:Copying training dataset
2025-01-19 13:59:53,980:INFO:Defining folds
2025-01-19 13:59:53,981:INFO:Declaring metric variables
2025-01-19 13:59:54,006:INFO:Importing untrained model
2025-01-19 13:59:54,019:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-19 13:59:54,051:INFO:Starting cross validation
2025-01-19 13:59:54,058:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:54,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,215:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,271:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,278:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,286:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,319:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,336:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,357:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,372:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,414:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,458:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,541:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,548:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,564:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,572:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,579:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,604:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 13:59:54,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,651:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:54,672:INFO:Calculating mean and std
2025-01-19 13:59:54,674:INFO:Creating metrics dataframe
2025-01-19 13:59:54,677:INFO:Uploading results into container
2025-01-19 13:59:54,678:INFO:Uploading model into container now
2025-01-19 13:59:54,679:INFO:_master_model_container: 8
2025-01-19 13:59:54,681:INFO:_display_container: 2
2025-01-19 13:59:54,682:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-19 13:59:54,682:INFO:create_model() successfully completed......................................
2025-01-19 13:59:54,789:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:54,789:INFO:Creating metrics dataframe
2025-01-19 13:59:54,805:INFO:Initializing Ada Boost Classifier
2025-01-19 13:59:54,806:INFO:Total runtime is 0.4452588399251302 minutes
2025-01-19 13:59:54,813:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:54,813:INFO:Initializing create_model()
2025-01-19 13:59:54,814:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:54,814:INFO:Checking exceptions
2025-01-19 13:59:54,814:INFO:Importing libraries
2025-01-19 13:59:54,815:INFO:Copying training dataset
2025-01-19 13:59:54,828:INFO:Defining folds
2025-01-19 13:59:54,828:INFO:Declaring metric variables
2025-01-19 13:59:54,838:INFO:Importing untrained model
2025-01-19 13:59:54,848:INFO:Ada Boost Classifier Imported successfully
2025-01-19 13:59:54,870:INFO:Starting cross validation
2025-01-19 13:59:54,873:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:54,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:54,999:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,422:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,434:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,441:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,477:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,484:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,501:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:55,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,552:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,591:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:55,602:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:56,082:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,099:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,153:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,231:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:56,235:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 13:59:56,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:56,521:INFO:Calculating mean and std
2025-01-19 13:59:56,524:INFO:Creating metrics dataframe
2025-01-19 13:59:56,527:INFO:Uploading results into container
2025-01-19 13:59:56,528:INFO:Uploading model into container now
2025-01-19 13:59:56,529:INFO:_master_model_container: 9
2025-01-19 13:59:56,530:INFO:_display_container: 2
2025-01-19 13:59:56,531:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 13:59:56,531:INFO:create_model() successfully completed......................................
2025-01-19 13:59:56,636:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:56,637:INFO:Creating metrics dataframe
2025-01-19 13:59:56,652:INFO:Initializing Gradient Boosting Classifier
2025-01-19 13:59:56,652:INFO:Total runtime is 0.4760256091753642 minutes
2025-01-19 13:59:56,662:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:56,663:INFO:Initializing create_model()
2025-01-19 13:59:56,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:56,663:INFO:Checking exceptions
2025-01-19 13:59:56,663:INFO:Importing libraries
2025-01-19 13:59:56,664:INFO:Copying training dataset
2025-01-19 13:59:56,678:INFO:Defining folds
2025-01-19 13:59:56,678:INFO:Declaring metric variables
2025-01-19 13:59:56,689:INFO:Importing untrained model
2025-01-19 13:59:56,700:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 13:59:56,717:INFO:Starting cross validation
2025-01-19 13:59:56,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:57,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,455:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,458:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,461:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,467:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,519:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:57,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,480:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,528:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,585:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,605:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:58,628:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,122:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,129:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,158:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,178:INFO:Calculating mean and std
2025-01-19 13:59:59,181:INFO:Creating metrics dataframe
2025-01-19 13:59:59,185:INFO:Uploading results into container
2025-01-19 13:59:59,186:INFO:Uploading model into container now
2025-01-19 13:59:59,187:INFO:_master_model_container: 10
2025-01-19 13:59:59,187:INFO:_display_container: 2
2025-01-19 13:59:59,188:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 13:59:59,189:INFO:create_model() successfully completed......................................
2025-01-19 13:59:59,322:INFO:SubProcess create_model() end ==================================
2025-01-19 13:59:59,323:INFO:Creating metrics dataframe
2025-01-19 13:59:59,342:INFO:Initializing Linear Discriminant Analysis
2025-01-19 13:59:59,342:INFO:Total runtime is 0.5208603024482727 minutes
2025-01-19 13:59:59,350:INFO:SubProcess create_model() called ==================================
2025-01-19 13:59:59,351:INFO:Initializing create_model()
2025-01-19 13:59:59,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 13:59:59,353:INFO:Checking exceptions
2025-01-19 13:59:59,353:INFO:Importing libraries
2025-01-19 13:59:59,353:INFO:Copying training dataset
2025-01-19 13:59:59,362:INFO:Defining folds
2025-01-19 13:59:59,362:INFO:Declaring metric variables
2025-01-19 13:59:59,375:INFO:Importing untrained model
2025-01-19 13:59:59,385:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 13:59:59,402:INFO:Starting cross validation
2025-01-19 13:59:59,407:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 13:59:59,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,579:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,589:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,591:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,604:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,605:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,918:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,942:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,984:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 13:59:59,994:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,003:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:00,239:INFO:Calculating mean and std
2025-01-19 14:00:00,247:INFO:Creating metrics dataframe
2025-01-19 14:00:00,259:INFO:Uploading results into container
2025-01-19 14:00:00,261:INFO:Uploading model into container now
2025-01-19 14:00:00,262:INFO:_master_model_container: 11
2025-01-19 14:00:00,262:INFO:_display_container: 2
2025-01-19 14:00:00,263:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:00:00,263:INFO:create_model() successfully completed......................................
2025-01-19 14:00:00,434:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:00,435:INFO:Creating metrics dataframe
2025-01-19 14:00:00,467:INFO:Initializing Extra Trees Classifier
2025-01-19 14:00:00,468:INFO:Total runtime is 0.5396039565404257 minutes
2025-01-19 14:00:00,482:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:00,482:INFO:Initializing create_model()
2025-01-19 14:00:00,482:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:00,482:INFO:Checking exceptions
2025-01-19 14:00:00,482:INFO:Importing libraries
2025-01-19 14:00:00,482:INFO:Copying training dataset
2025-01-19 14:00:00,501:INFO:Defining folds
2025-01-19 14:00:00,501:INFO:Declaring metric variables
2025-01-19 14:00:00,515:INFO:Importing untrained model
2025-01-19 14:00:00,527:INFO:Extra Trees Classifier Imported successfully
2025-01-19 14:00:00,555:INFO:Starting cross validation
2025-01-19 14:00:00,559:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:01,356:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,372:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,418:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,432:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,445:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,684:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,693:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:01,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,148:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,154:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,196:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,202:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,212:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,473:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,782:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,788:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,795:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,849:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:02,867:INFO:Calculating mean and std
2025-01-19 14:00:02,870:INFO:Creating metrics dataframe
2025-01-19 14:00:02,875:INFO:Uploading results into container
2025-01-19 14:00:02,877:INFO:Uploading model into container now
2025-01-19 14:00:02,879:INFO:_master_model_container: 12
2025-01-19 14:00:02,879:INFO:_display_container: 2
2025-01-19 14:00:02,880:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 14:00:02,880:INFO:create_model() successfully completed......................................
2025-01-19 14:00:02,986:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:02,986:INFO:Creating metrics dataframe
2025-01-19 14:00:03,009:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 14:00:03,009:INFO:Total runtime is 0.5819786469141643 minutes
2025-01-19 14:00:03,018:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:03,019:INFO:Initializing create_model()
2025-01-19 14:00:03,019:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:03,019:INFO:Checking exceptions
2025-01-19 14:00:03,020:INFO:Importing libraries
2025-01-19 14:00:03,020:INFO:Copying training dataset
2025-01-19 14:00:03,030:INFO:Defining folds
2025-01-19 14:00:03,030:INFO:Declaring metric variables
2025-01-19 14:00:03,046:INFO:Importing untrained model
2025-01-19 14:00:03,099:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:00:03,123:INFO:Starting cross validation
2025-01-19 14:00:03,128:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:04,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,541:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,602:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,609:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:04,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,704:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,718:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,774:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,954:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,960:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:05,966:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,064:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,071:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,628:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,701:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,714:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:06,728:INFO:Calculating mean and std
2025-01-19 14:00:06,731:INFO:Creating metrics dataframe
2025-01-19 14:00:06,738:INFO:Uploading results into container
2025-01-19 14:00:06,740:INFO:Uploading model into container now
2025-01-19 14:00:06,743:INFO:_master_model_container: 13
2025-01-19 14:00:06,743:INFO:_display_container: 2
2025-01-19 14:00:06,745:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:00:06,745:INFO:create_model() successfully completed......................................
2025-01-19 14:00:06,874:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:06,874:INFO:Creating metrics dataframe
2025-01-19 14:00:06,893:INFO:Initializing Dummy Classifier
2025-01-19 14:00:06,894:INFO:Total runtime is 0.6467295567194622 minutes
2025-01-19 14:00:06,904:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:06,905:INFO:Initializing create_model()
2025-01-19 14:00:06,905:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD05FE20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:06,906:INFO:Checking exceptions
2025-01-19 14:00:06,906:INFO:Importing libraries
2025-01-19 14:00:06,906:INFO:Copying training dataset
2025-01-19 14:00:06,918:INFO:Defining folds
2025-01-19 14:00:06,918:INFO:Declaring metric variables
2025-01-19 14:00:06,932:INFO:Importing untrained model
2025-01-19 14:00:06,940:INFO:Dummy Classifier Imported successfully
2025-01-19 14:00:06,957:INFO:Starting cross validation
2025-01-19 14:00:06,962:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:07,166:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,177:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,178:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,182:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,184:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,186:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,186:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,199:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,219:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,230:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,382:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,412:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,424:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,451:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,454:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,462:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,468:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,475:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,559:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,568:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,571:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,584:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,588:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:00:07,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:07,611:INFO:Calculating mean and std
2025-01-19 14:00:07,614:INFO:Creating metrics dataframe
2025-01-19 14:00:07,622:INFO:Uploading results into container
2025-01-19 14:00:07,623:INFO:Uploading model into container now
2025-01-19 14:00:07,624:INFO:_master_model_container: 14
2025-01-19 14:00:07,624:INFO:_display_container: 2
2025-01-19 14:00:07,624:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-19 14:00:07,624:INFO:create_model() successfully completed......................................
2025-01-19 14:00:07,731:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:07,731:INFO:Creating metrics dataframe
2025-01-19 14:00:07,757:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 14:00:07,777:INFO:Initializing create_model()
2025-01-19 14:00:07,778:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:07,778:INFO:Checking exceptions
2025-01-19 14:00:07,781:INFO:Importing libraries
2025-01-19 14:00:07,781:INFO:Copying training dataset
2025-01-19 14:00:07,791:INFO:Defining folds
2025-01-19 14:00:07,792:INFO:Declaring metric variables
2025-01-19 14:00:07,792:INFO:Importing untrained model
2025-01-19 14:00:07,792:INFO:Declaring custom model
2025-01-19 14:00:07,793:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:00:07,794:INFO:Cross validation set to False
2025-01-19 14:00:07,794:INFO:Fitting Model
2025-01-19 14:00:07,843:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:00:07,843:INFO:create_model() successfully completed......................................
2025-01-19 14:00:08,012:INFO:_master_model_container: 14
2025-01-19 14:00:08,014:INFO:_display_container: 2
2025-01-19 14:00:08,015:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:00:08,015:INFO:compare_models() successfully completed......................................
2025-01-19 14:00:08,111:INFO:Initializing create_model()
2025-01-19 14:00:08,111:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:08,111:INFO:Checking exceptions
2025-01-19 14:00:08,155:INFO:Importing libraries
2025-01-19 14:00:08,156:INFO:Copying training dataset
2025-01-19 14:00:08,179:INFO:Defining folds
2025-01-19 14:00:08,179:INFO:Declaring metric variables
2025-01-19 14:00:08,233:INFO:Importing untrained model
2025-01-19 14:00:08,250:INFO:Logistic Regression Imported successfully
2025-01-19 14:00:08,281:INFO:Starting cross validation
2025-01-19 14:00:08,285:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:09,034:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,069:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,109:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,111:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,119:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,124:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,142:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,166:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,212:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,221:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,756:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,828:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,833:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,839:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,853:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:09,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,904:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,919:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,929:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:09,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,273:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:10,298:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:10,323:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,349:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,355:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:10,377:INFO:Calculating mean and std
2025-01-19 14:00:10,380:INFO:Creating metrics dataframe
2025-01-19 14:00:10,396:INFO:Finalizing model
2025-01-19 14:00:11,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:11,060:INFO:Uploading results into container
2025-01-19 14:00:11,062:INFO:Uploading model into container now
2025-01-19 14:00:11,088:INFO:_master_model_container: 15
2025-01-19 14:00:11,088:INFO:_display_container: 3
2025-01-19 14:00:11,089:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:00:11,090:INFO:create_model() successfully completed......................................
2025-01-19 14:00:11,230:INFO:Initializing create_model()
2025-01-19 14:00:11,231:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:11,231:INFO:Checking exceptions
2025-01-19 14:00:11,279:INFO:Importing libraries
2025-01-19 14:00:11,279:INFO:Copying training dataset
2025-01-19 14:00:11,357:INFO:Defining folds
2025-01-19 14:00:11,358:INFO:Declaring metric variables
2025-01-19 14:00:11,372:INFO:Importing untrained model
2025-01-19 14:00:11,390:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:00:11,411:INFO:Starting cross validation
2025-01-19 14:00:11,418:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:11,712:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,748:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,788:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,803:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,963:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:11,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,013:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,019:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,142:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,163:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:12,187:INFO:Calculating mean and std
2025-01-19 14:00:12,187:INFO:Creating metrics dataframe
2025-01-19 14:00:12,199:INFO:Finalizing model
2025-01-19 14:00:12,275:INFO:Uploading results into container
2025-01-19 14:00:12,277:INFO:Uploading model into container now
2025-01-19 14:00:12,303:INFO:_master_model_container: 16
2025-01-19 14:00:12,304:INFO:_display_container: 4
2025-01-19 14:00:12,306:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 14:00:12,307:INFO:create_model() successfully completed......................................
2025-01-19 14:00:12,460:INFO:Initializing create_model()
2025-01-19 14:00:12,460:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:12,461:INFO:Checking exceptions
2025-01-19 14:00:12,508:INFO:Importing libraries
2025-01-19 14:00:12,510:INFO:Copying training dataset
2025-01-19 14:00:12,531:INFO:Defining folds
2025-01-19 14:00:12,531:INFO:Declaring metric variables
2025-01-19 14:00:12,580:INFO:Importing untrained model
2025-01-19 14:00:12,595:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:00:12,630:INFO:Starting cross validation
2025-01-19 14:00:12,634:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:13,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,615:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,618:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,626:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,712:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:13,730:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:14,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:14,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:14,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:14,388:INFO:Calculating mean and std
2025-01-19 14:00:14,391:INFO:Creating metrics dataframe
2025-01-19 14:00:14,400:INFO:Finalizing model
2025-01-19 14:00:14,824:INFO:Uploading results into container
2025-01-19 14:00:14,827:INFO:Uploading model into container now
2025-01-19 14:00:14,847:INFO:_master_model_container: 17
2025-01-19 14:00:14,848:INFO:_display_container: 5
2025-01-19 14:00:14,849:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:00:14,849:INFO:create_model() successfully completed......................................
2025-01-19 14:00:15,006:INFO:Initializing create_model()
2025-01-19 14:00:15,006:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:15,007:INFO:Checking exceptions
2025-01-19 14:00:15,076:INFO:Importing libraries
2025-01-19 14:00:15,077:INFO:Copying training dataset
2025-01-19 14:00:15,098:INFO:Defining folds
2025-01-19 14:00:15,098:INFO:Declaring metric variables
2025-01-19 14:00:15,113:INFO:Importing untrained model
2025-01-19 14:00:15,133:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:00:15,157:INFO:Starting cross validation
2025-01-19 14:00:15,160:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:15,348:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,363:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,372:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,374:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,379:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,379:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,386:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,408:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,573:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,600:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,608:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,618:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,670:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,676:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,685:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,785:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,793:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,803:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:15,837:INFO:Calculating mean and std
2025-01-19 14:00:15,839:INFO:Creating metrics dataframe
2025-01-19 14:00:15,850:INFO:Finalizing model
2025-01-19 14:00:15,941:INFO:Uploading results into container
2025-01-19 14:00:15,942:INFO:Uploading model into container now
2025-01-19 14:00:16,028:INFO:_master_model_container: 18
2025-01-19 14:00:16,029:INFO:_display_container: 6
2025-01-19 14:00:16,029:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:00:16,029:INFO:create_model() successfully completed......................................
2025-01-19 14:00:16,274:INFO:gpu_param set to False
2025-01-19 14:00:16,468:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:16,469:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:16,606:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:16,607:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:16,682:INFO:gpu_param set to False
2025-01-19 14:00:17,089:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,290:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,347:INFO:gpu_param set to False
2025-01-19 14:00:17,609:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,776:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:00:17,778:INFO:Initializing compare_models()
2025-01-19 14:00:17,779:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 14:00:17,779:INFO:Checking exceptions
2025-01-19 14:00:17,782:INFO:Preparing display monitor
2025-01-19 14:00:17,852:INFO:Initializing Random Forest Classifier
2025-01-19 14:00:17,852:INFO:Total runtime is 0.0 minutes
2025-01-19 14:00:17,865:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:17,866:INFO:Initializing create_model()
2025-01-19 14:00:17,867:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC333130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:17,868:INFO:Checking exceptions
2025-01-19 14:00:17,868:INFO:Importing libraries
2025-01-19 14:00:17,868:INFO:Copying training dataset
2025-01-19 14:00:17,888:INFO:Defining folds
2025-01-19 14:00:17,889:INFO:Declaring metric variables
2025-01-19 14:00:17,900:INFO:Importing untrained model
2025-01-19 14:00:17,910:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:00:17,937:INFO:Starting cross validation
2025-01-19 14:00:17,940:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:18,694:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,719:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,728:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,748:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,763:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:18,776:INFO:Calculating mean and std
2025-01-19 14:00:18,777:INFO:Creating metrics dataframe
2025-01-19 14:00:18,780:INFO:Uploading results into container
2025-01-19 14:00:18,781:INFO:Uploading model into container now
2025-01-19 14:00:18,782:INFO:_master_model_container: 19
2025-01-19 14:00:18,782:INFO:_display_container: 7
2025-01-19 14:00:18,783:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:00:18,783:INFO:create_model() successfully completed......................................
2025-01-19 14:00:18,895:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:18,896:INFO:Creating metrics dataframe
2025-01-19 14:00:18,908:INFO:Initializing Ada Boost Classifier
2025-01-19 14:00:18,909:INFO:Total runtime is 0.017618974049886067 minutes
2025-01-19 14:00:18,918:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:18,918:INFO:Initializing create_model()
2025-01-19 14:00:18,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC333130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:18,919:INFO:Checking exceptions
2025-01-19 14:00:18,920:INFO:Importing libraries
2025-01-19 14:00:18,920:INFO:Copying training dataset
2025-01-19 14:00:18,938:INFO:Defining folds
2025-01-19 14:00:18,973:INFO:Declaring metric variables
2025-01-19 14:00:18,986:INFO:Importing untrained model
2025-01-19 14:00:19,000:INFO:Ada Boost Classifier Imported successfully
2025-01-19 14:00:19,024:INFO:Starting cross validation
2025-01-19 14:00:19,066:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:19,164:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:00:19,186:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:00:19,188:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:00:19,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,491:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,500:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,501:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,517:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:19,539:INFO:Calculating mean and std
2025-01-19 14:00:19,542:INFO:Creating metrics dataframe
2025-01-19 14:00:19,545:INFO:Uploading results into container
2025-01-19 14:00:19,546:INFO:Uploading model into container now
2025-01-19 14:00:19,547:INFO:_master_model_container: 20
2025-01-19 14:00:19,547:INFO:_display_container: 7
2025-01-19 14:00:19,548:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 14:00:19,549:INFO:create_model() successfully completed......................................
2025-01-19 14:00:19,666:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:19,666:INFO:Creating metrics dataframe
2025-01-19 14:00:19,677:INFO:Initializing Gradient Boosting Classifier
2025-01-19 14:00:19,677:INFO:Total runtime is 0.03040682077407837 minutes
2025-01-19 14:00:19,687:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:19,688:INFO:Initializing create_model()
2025-01-19 14:00:19,688:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC333130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:19,688:INFO:Checking exceptions
2025-01-19 14:00:19,688:INFO:Importing libraries
2025-01-19 14:00:19,689:INFO:Copying training dataset
2025-01-19 14:00:19,706:INFO:Defining folds
2025-01-19 14:00:19,706:INFO:Declaring metric variables
2025-01-19 14:00:19,716:INFO:Importing untrained model
2025-01-19 14:00:19,726:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 14:00:19,738:INFO:Starting cross validation
2025-01-19 14:00:19,745:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:20,330:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,344:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,354:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,388:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:20,410:INFO:Calculating mean and std
2025-01-19 14:00:20,415:INFO:Creating metrics dataframe
2025-01-19 14:00:20,419:INFO:Uploading results into container
2025-01-19 14:00:20,422:INFO:Uploading model into container now
2025-01-19 14:00:20,423:INFO:_master_model_container: 21
2025-01-19 14:00:20,423:INFO:_display_container: 7
2025-01-19 14:00:20,426:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:00:20,426:INFO:create_model() successfully completed......................................
2025-01-19 14:00:20,557:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:20,557:INFO:Creating metrics dataframe
2025-01-19 14:00:20,571:INFO:Initializing Extra Trees Classifier
2025-01-19 14:00:20,572:INFO:Total runtime is 0.045331553618113196 minutes
2025-01-19 14:00:20,579:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:20,579:INFO:Initializing create_model()
2025-01-19 14:00:20,580:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC333130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:20,580:INFO:Checking exceptions
2025-01-19 14:00:20,580:INFO:Importing libraries
2025-01-19 14:00:20,581:INFO:Copying training dataset
2025-01-19 14:00:20,593:INFO:Defining folds
2025-01-19 14:00:20,593:INFO:Declaring metric variables
2025-01-19 14:00:20,606:INFO:Importing untrained model
2025-01-19 14:00:20,614:INFO:Extra Trees Classifier Imported successfully
2025-01-19 14:00:20,631:INFO:Starting cross validation
2025-01-19 14:00:20,635:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:21,217:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,218:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,226:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,228:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,231:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,249:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:21,285:INFO:Calculating mean and std
2025-01-19 14:00:21,287:INFO:Creating metrics dataframe
2025-01-19 14:00:21,295:INFO:Uploading results into container
2025-01-19 14:00:21,296:INFO:Uploading model into container now
2025-01-19 14:00:21,296:INFO:_master_model_container: 22
2025-01-19 14:00:21,296:INFO:_display_container: 7
2025-01-19 14:00:21,297:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 14:00:21,297:INFO:create_model() successfully completed......................................
2025-01-19 14:00:21,402:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:21,402:INFO:Creating metrics dataframe
2025-01-19 14:00:21,418:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 14:00:21,418:INFO:Total runtime is 0.05942507982254028 minutes
2025-01-19 14:00:21,425:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:21,426:INFO:Initializing create_model()
2025-01-19 14:00:21,426:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC333130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:21,426:INFO:Checking exceptions
2025-01-19 14:00:21,427:INFO:Importing libraries
2025-01-19 14:00:21,427:INFO:Copying training dataset
2025-01-19 14:00:21,438:INFO:Defining folds
2025-01-19 14:00:21,439:INFO:Declaring metric variables
2025-01-19 14:00:21,449:INFO:Importing untrained model
2025-01-19 14:00:21,458:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:00:21,474:INFO:Starting cross validation
2025-01-19 14:00:21,477:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:22,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,202:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,210:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,215:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:22,363:INFO:Calculating mean and std
2025-01-19 14:00:22,365:INFO:Creating metrics dataframe
2025-01-19 14:00:22,369:INFO:Uploading results into container
2025-01-19 14:00:22,370:INFO:Uploading model into container now
2025-01-19 14:00:22,371:INFO:_master_model_container: 23
2025-01-19 14:00:22,372:INFO:_display_container: 7
2025-01-19 14:00:22,374:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:00:22,375:INFO:create_model() successfully completed......................................
2025-01-19 14:00:22,492:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:22,492:INFO:Creating metrics dataframe
2025-01-19 14:00:22,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 14:00:22,534:INFO:Initializing create_model()
2025-01-19 14:00:22,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:22,537:INFO:Checking exceptions
2025-01-19 14:00:22,542:INFO:Importing libraries
2025-01-19 14:00:22,542:INFO:Copying training dataset
2025-01-19 14:00:22,564:INFO:Defining folds
2025-01-19 14:00:22,564:INFO:Declaring metric variables
2025-01-19 14:00:22,564:INFO:Importing untrained model
2025-01-19 14:00:22,566:INFO:Declaring custom model
2025-01-19 14:00:22,567:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 14:00:22,569:INFO:Cross validation set to False
2025-01-19 14:00:22,569:INFO:Fitting Model
2025-01-19 14:00:22,969:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:00:22,969:INFO:create_model() successfully completed......................................
2025-01-19 14:00:23,183:INFO:_master_model_container: 23
2025-01-19 14:00:23,183:INFO:_display_container: 7
2025-01-19 14:00:23,185:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:00:23,186:INFO:compare_models() successfully completed......................................
2025-01-19 14:00:23,257:INFO:Initializing tune_model()
2025-01-19 14:00:23,257:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:00:23,257:INFO:Checking exceptions
2025-01-19 14:00:23,309:INFO:Copying training dataset
2025-01-19 14:00:23,321:INFO:Checking base model
2025-01-19 14:00:23,322:INFO:Base model : Logistic Regression
2025-01-19 14:00:23,331:INFO:Declaring metric variables
2025-01-19 14:00:23,429:INFO:Defining Hyperparameters
2025-01-19 14:00:23,609:INFO:Tuning with n_jobs=-1
2025-01-19 14:00:23,610:INFO:Initializing RandomizedSearchCV
2025-01-19 14:00:25,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:25,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:25,885:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:25,922:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:26,298:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:26,366:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:26,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:26,542:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:26,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,015:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,660:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,770:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:27,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,463:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:28,948:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,106:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,500:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,692:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:29,821:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,234:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,355:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,405:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,791:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:30,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:31,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:31,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:31,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:31,735:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:31,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:33,315:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:33,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:33,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:33,873:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:33,992:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:34,009:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:34,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:34,508:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:34,659:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:34,661:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:35,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:35,328:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:35,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:35,671:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,013:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,071:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,275:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,600:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,686:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,902:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:36,916:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,187:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,509:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:37,902:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:38,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:38,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:38,531:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:38,801:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:38,976:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,087:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,297:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,837:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:39,984:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-19 14:00:39,986:INFO:Hyperparameter search completed
2025-01-19 14:00:39,986:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:39,987:INFO:Initializing create_model()
2025-01-19 14:00:39,988:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC594850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-19 14:00:39,988:INFO:Checking exceptions
2025-01-19 14:00:39,989:INFO:Importing libraries
2025-01-19 14:00:39,989:INFO:Copying training dataset
2025-01-19 14:00:40,004:INFO:Defining folds
2025-01-19 14:00:40,005:INFO:Declaring metric variables
2025-01-19 14:00:40,011:INFO:Importing untrained model
2025-01-19 14:00:40,012:INFO:Declaring custom model
2025-01-19 14:00:40,022:INFO:Logistic Regression Imported successfully
2025-01-19 14:00:40,037:INFO:Starting cross validation
2025-01-19 14:00:40,041:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:40,566:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:40,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:40,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:40,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:40,633:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,690:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,696:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,697:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,701:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,702:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,703:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,708:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,710:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:40,714:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,221:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:41,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,311:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:41,331:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:41,398:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,405:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,430:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,436:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,438:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,795:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:41,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,839:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:41,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,849:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,876:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,884:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:41,900:INFO:Calculating mean and std
2025-01-19 14:00:41,903:INFO:Creating metrics dataframe
2025-01-19 14:00:41,918:INFO:Finalizing model
2025-01-19 14:00:42,584:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:42,598:INFO:Uploading results into container
2025-01-19 14:00:42,600:INFO:Uploading model into container now
2025-01-19 14:00:42,603:INFO:_master_model_container: 24
2025-01-19 14:00:42,603:INFO:_display_container: 8
2025-01-19 14:00:42,605:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:00:42,606:INFO:create_model() successfully completed......................................
2025-01-19 14:00:42,721:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:42,721:INFO:choose_better activated
2025-01-19 14:00:42,728:INFO:SubProcess create_model() called ==================================
2025-01-19 14:00:42,728:INFO:Initializing create_model()
2025-01-19 14:00:42,730:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:00:42,730:INFO:Checking exceptions
2025-01-19 14:00:42,733:INFO:Importing libraries
2025-01-19 14:00:42,734:INFO:Copying training dataset
2025-01-19 14:00:42,747:INFO:Defining folds
2025-01-19 14:00:42,747:INFO:Declaring metric variables
2025-01-19 14:00:42,747:INFO:Importing untrained model
2025-01-19 14:00:42,748:INFO:Declaring custom model
2025-01-19 14:00:42,749:INFO:Logistic Regression Imported successfully
2025-01-19 14:00:42,750:INFO:Starting cross validation
2025-01-19 14:00:42,751:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:00:43,338:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:43,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:43,375:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:43,381:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:43,405:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,411:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,420:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:43,722:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,678:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:44,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:44,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:44,778:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:44,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,831:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,856:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,965:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,976:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:44,984:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:45,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:45,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,535:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:00:45,552:INFO:Calculating mean and std
2025-01-19 14:00:45,553:INFO:Creating metrics dataframe
2025-01-19 14:00:45,556:INFO:Finalizing model
2025-01-19 14:00:46,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:00:46,207:INFO:Uploading results into container
2025-01-19 14:00:46,208:INFO:Uploading model into container now
2025-01-19 14:00:46,209:INFO:_master_model_container: 25
2025-01-19 14:00:46,209:INFO:_display_container: 9
2025-01-19 14:00:46,210:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:00:46,211:INFO:create_model() successfully completed......................................
2025-01-19 14:00:46,311:INFO:SubProcess create_model() end ==================================
2025-01-19 14:00:46,312:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-19 14:00:46,313:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-19 14:00:46,315:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-19 14:00:46,315:INFO:choose_better completed
2025-01-19 14:00:46,334:INFO:_master_model_container: 25
2025-01-19 14:00:46,335:INFO:_display_container: 8
2025-01-19 14:00:46,336:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:00:46,336:INFO:tune_model() successfully completed......................................
2025-01-19 14:00:46,490:INFO:Initializing tune_model()
2025-01-19 14:00:46,490:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:00:46,490:INFO:Checking exceptions
2025-01-19 14:00:46,548:INFO:Copying training dataset
2025-01-19 14:00:46,557:INFO:Checking base model
2025-01-19 14:00:46,557:INFO:Base model : Random Forest Classifier
2025-01-19 14:00:46,600:INFO:Declaring metric variables
2025-01-19 14:00:46,612:INFO:Defining Hyperparameters
2025-01-19 14:00:46,842:INFO:Tuning with n_jobs=-1
2025-01-19 14:00:46,842:INFO:Initializing RandomizedSearchCV
2025-01-19 14:01:20,576:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-19 14:01:20,578:INFO:Hyperparameter search completed
2025-01-19 14:01:20,578:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:20,580:INFO:Initializing create_model()
2025-01-19 14:01:20,580:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC73CBE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-19 14:01:20,581:INFO:Checking exceptions
2025-01-19 14:01:20,581:INFO:Importing libraries
2025-01-19 14:01:20,581:INFO:Copying training dataset
2025-01-19 14:01:20,596:INFO:Defining folds
2025-01-19 14:01:20,596:INFO:Declaring metric variables
2025-01-19 14:01:20,653:INFO:Importing untrained model
2025-01-19 14:01:20,653:INFO:Declaring custom model
2025-01-19 14:01:20,663:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:01:20,684:INFO:Starting cross validation
2025-01-19 14:01:20,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:22,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,248:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,254:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,316:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,322:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,535:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,542:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:22,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,499:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,824:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:23,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,397:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,971:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:24,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:25,255:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:25,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:25,276:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:25,324:INFO:Calculating mean and std
2025-01-19 14:01:25,334:INFO:Creating metrics dataframe
2025-01-19 14:01:25,354:INFO:Finalizing model
2025-01-19 14:01:26,237:INFO:Uploading results into container
2025-01-19 14:01:26,239:INFO:Uploading model into container now
2025-01-19 14:01:26,240:INFO:_master_model_container: 26
2025-01-19 14:01:26,241:INFO:_display_container: 9
2025-01-19 14:01:26,244:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 14:01:26,244:INFO:create_model() successfully completed......................................
2025-01-19 14:01:26,349:INFO:SubProcess create_model() end ==================================
2025-01-19 14:01:26,349:INFO:choose_better activated
2025-01-19 14:01:26,355:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:26,357:INFO:Initializing create_model()
2025-01-19 14:01:26,357:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:01:26,357:INFO:Checking exceptions
2025-01-19 14:01:26,361:INFO:Importing libraries
2025-01-19 14:01:26,362:INFO:Copying training dataset
2025-01-19 14:01:26,371:INFO:Defining folds
2025-01-19 14:01:26,372:INFO:Declaring metric variables
2025-01-19 14:01:26,372:INFO:Importing untrained model
2025-01-19 14:01:26,372:INFO:Declaring custom model
2025-01-19 14:01:26,373:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:01:26,373:INFO:Starting cross validation
2025-01-19 14:01:26,374:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:27,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,238:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,958:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,966:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:27,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,069:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,079:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,091:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,096:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,274:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:28,280:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,081:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,103:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:29,118:INFO:Calculating mean and std
2025-01-19 14:01:29,119:INFO:Creating metrics dataframe
2025-01-19 14:01:29,121:INFO:Finalizing model
2025-01-19 14:01:29,622:INFO:Uploading results into container
2025-01-19 14:01:29,623:INFO:Uploading model into container now
2025-01-19 14:01:29,624:INFO:_master_model_container: 27
2025-01-19 14:01:29,624:INFO:_display_container: 10
2025-01-19 14:01:29,625:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:01:29,625:INFO:create_model() successfully completed......................................
2025-01-19 14:01:29,747:INFO:SubProcess create_model() end ==================================
2025-01-19 14:01:29,748:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-19 14:01:29,749:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-19 14:01:29,749:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-19 14:01:29,750:INFO:choose_better completed
2025-01-19 14:01:29,768:INFO:_master_model_container: 27
2025-01-19 14:01:29,768:INFO:_display_container: 9
2025-01-19 14:01:29,769:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 14:01:29,770:INFO:tune_model() successfully completed......................................
2025-01-19 14:01:30,055:INFO:Initializing ensemble_model()
2025-01-19 14:01:30,055:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:01:30,056:INFO:Checking exceptions
2025-01-19 14:01:30,111:INFO:Importing libraries
2025-01-19 14:01:30,111:INFO:Copying training dataset
2025-01-19 14:01:30,112:INFO:Checking base model
2025-01-19 14:01:30,112:INFO:Base model : Decision Tree Classifier
2025-01-19 14:01:30,171:INFO:Importing untrained ensembler
2025-01-19 14:01:30,171:INFO:Ensemble method set to Bagging
2025-01-19 14:01:30,171:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:30,175:INFO:Initializing create_model()
2025-01-19 14:01:30,175:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171CD094130>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:01:30,176:INFO:Checking exceptions
2025-01-19 14:01:30,176:INFO:Importing libraries
2025-01-19 14:01:30,176:INFO:Copying training dataset
2025-01-19 14:01:30,201:INFO:Defining folds
2025-01-19 14:01:30,202:INFO:Declaring metric variables
2025-01-19 14:01:30,223:INFO:Importing untrained model
2025-01-19 14:01:30,223:INFO:Declaring custom model
2025-01-19 14:01:30,240:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:01:30,264:INFO:Starting cross validation
2025-01-19 14:01:30,267:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:30,690:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,713:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,723:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,730:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,731:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,743:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,762:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:30,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,003:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,012:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,026:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,043:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,051:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,072:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,230:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,239:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,243:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:31,256:INFO:Calculating mean and std
2025-01-19 14:01:31,260:INFO:Creating metrics dataframe
2025-01-19 14:01:31,270:INFO:Finalizing model
2025-01-19 14:01:31,400:INFO:Uploading results into container
2025-01-19 14:01:31,402:INFO:Uploading model into container now
2025-01-19 14:01:31,404:INFO:_master_model_container: 28
2025-01-19 14:01:31,404:INFO:_display_container: 10
2025-01-19 14:01:31,407:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 14:01:31,407:INFO:create_model() successfully completed......................................
2025-01-19 14:01:31,510:INFO:SubProcess create_model() end ==================================
2025-01-19 14:01:31,529:INFO:_master_model_container: 28
2025-01-19 14:01:31,530:INFO:_display_container: 10
2025-01-19 14:01:31,533:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 14:01:31,533:INFO:ensemble_model() successfully completed......................................
2025-01-19 14:01:31,682:INFO:Initializing ensemble_model()
2025-01-19 14:01:31,682:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:01:31,683:INFO:Checking exceptions
2025-01-19 14:01:31,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:31,862:INFO:Importing libraries
2025-01-19 14:01:31,863:INFO:Copying training dataset
2025-01-19 14:01:31,863:INFO:Checking base model
2025-01-19 14:01:31,864:INFO:Base model : Decision Tree Classifier
2025-01-19 14:01:31,889:INFO:Importing untrained ensembler
2025-01-19 14:01:31,890:INFO:Ensemble method set to Boosting
2025-01-19 14:01:31,890:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:31,893:INFO:Initializing create_model()
2025-01-19 14:01:31,893:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171DC2BC940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:01:31,893:INFO:Checking exceptions
2025-01-19 14:01:31,893:INFO:Importing libraries
2025-01-19 14:01:31,893:INFO:Copying training dataset
2025-01-19 14:01:31,920:INFO:Defining folds
2025-01-19 14:01:31,920:INFO:Declaring metric variables
2025-01-19 14:01:31,925:INFO:Importing untrained model
2025-01-19 14:01:31,925:INFO:Declaring custom model
2025-01-19 14:01:31,936:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:01:31,950:INFO:Starting cross validation
2025-01-19 14:01:31,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:32,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,246:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,432:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,476:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,552:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,626:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,659:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:32,726:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,732:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,801:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,839:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,851:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,889:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:32,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:33,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:33,064:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,079:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:33,213:INFO:Calculating mean and std
2025-01-19 14:01:33,217:INFO:Creating metrics dataframe
2025-01-19 14:01:33,239:INFO:Finalizing model
2025-01-19 14:01:33,338:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:33,380:INFO:Uploading results into container
2025-01-19 14:01:33,385:INFO:Uploading model into container now
2025-01-19 14:01:33,387:INFO:_master_model_container: 29
2025-01-19 14:01:33,388:INFO:_display_container: 11
2025-01-19 14:01:33,390:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 14:01:33,390:INFO:create_model() successfully completed......................................
2025-01-19 14:01:33,628:INFO:SubProcess create_model() end ==================================
2025-01-19 14:01:33,657:INFO:_master_model_container: 29
2025-01-19 14:01:33,657:INFO:_display_container: 11
2025-01-19 14:01:33,659:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 14:01:33,660:INFO:ensemble_model() successfully completed......................................
2025-01-19 14:01:33,922:INFO:Initializing blend_models()
2025-01-19 14:01:33,922:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:01:33,923:INFO:Checking exceptions
2025-01-19 14:01:33,981:INFO:Importing libraries
2025-01-19 14:01:33,981:INFO:Copying training dataset
2025-01-19 14:01:33,990:INFO:Getting model names
2025-01-19 14:01:34,004:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:34,034:INFO:Initializing create_model()
2025-01-19 14:01:34,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171D95A6D60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:01:34,037:INFO:Checking exceptions
2025-01-19 14:01:34,038:INFO:Importing libraries
2025-01-19 14:01:34,039:INFO:Copying training dataset
2025-01-19 14:01:34,074:INFO:Defining folds
2025-01-19 14:01:34,074:INFO:Declaring metric variables
2025-01-19 14:01:34,087:INFO:Importing untrained model
2025-01-19 14:01:34,087:INFO:Declaring custom model
2025-01-19 14:01:34,097:INFO:Voting Classifier Imported successfully
2025-01-19 14:01:34,120:INFO:Starting cross validation
2025-01-19 14:01:34,123:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:34,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:34,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:34,417:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:34,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:35,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,782:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,784:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,880:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,889:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:35,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:36,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:36,206:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:36,217:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:36,225:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:36,241:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:36,342:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:36,689:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:37,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,494:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,494:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,502:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:37,685:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,692:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:37,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:38,013:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,020:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,030:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,615:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:38,652:INFO:Calculating mean and std
2025-01-19 14:01:38,656:INFO:Creating metrics dataframe
2025-01-19 14:01:38,668:INFO:Finalizing model
2025-01-19 14:01:38,738:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:39,665:INFO:Uploading results into container
2025-01-19 14:01:39,667:INFO:Uploading model into container now
2025-01-19 14:01:39,668:INFO:_master_model_container: 30
2025-01-19 14:01:39,669:INFO:_display_container: 12
2025-01-19 14:01:39,691:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 14:01:39,691:INFO:create_model() successfully completed......................................
2025-01-19 14:01:39,814:INFO:SubProcess create_model() end ==================================
2025-01-19 14:01:39,840:INFO:_master_model_container: 30
2025-01-19 14:01:39,841:INFO:_display_container: 12
2025-01-19 14:01:39,858:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 14:01:39,858:INFO:blend_models() successfully completed......................................
2025-01-19 14:01:40,012:INFO:Initializing stack_models()
2025-01-19 14:01:40,013:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:01:40,013:INFO:Checking exceptions
2025-01-19 14:01:40,020:INFO:Defining meta model
2025-01-19 14:01:40,082:INFO:Getting model names
2025-01-19 14:01:40,085:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-19 14:01:40,129:INFO:SubProcess create_model() called ==================================
2025-01-19 14:01:40,173:INFO:Initializing create_model()
2025-01-19 14:01:40,174:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000171C67993D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:01:40,175:INFO:Checking exceptions
2025-01-19 14:01:40,176:INFO:Importing libraries
2025-01-19 14:01:40,176:INFO:Copying training dataset
2025-01-19 14:01:40,207:INFO:Defining folds
2025-01-19 14:01:40,208:INFO:Declaring metric variables
2025-01-19 14:01:40,215:INFO:Importing untrained model
2025-01-19 14:01:40,215:INFO:Declaring custom model
2025-01-19 14:01:40,234:INFO:Stacking Classifier Imported successfully
2025-01-19 14:01:40,250:INFO:Starting cross validation
2025-01-19 14:01:40,253:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:01:40,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:40,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:40,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:40,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,738:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,764:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,911:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,947:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,956:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,979:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:41,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,037:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,063:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,212:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,387:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:42,548:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:47,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,422:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,908:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:47,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:48,638:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,362:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:49,369:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:49,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:49,438:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,676:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:49,996:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:50,002:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:50,010:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:50,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,778:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,833:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:50,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,181:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,314:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,346:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,373:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,531:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,872:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:52,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:57,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:57,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:57,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:57,478:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:57,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:57,632:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:57,641:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:58,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:58,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:58,967:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,142:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,175:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:59,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:59,261:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:59,495:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,572:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,642:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,674:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,723:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:01:59,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:59,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:01:59,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,351:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,491:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:04,530:INFO:Calculating mean and std
2025-01-19 14:02:04,533:INFO:Creating metrics dataframe
2025-01-19 14:02:04,550:INFO:Finalizing model
2025-01-19 14:02:04,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:05,523:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:05,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:05,537:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:05,538:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:05,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:02:09,804:INFO:Uploading results into container
2025-01-19 14:02:09,806:INFO:Uploading model into container now
2025-01-19 14:02:09,808:INFO:_master_model_container: 31
2025-01-19 14:02:09,808:INFO:_display_container: 13
2025-01-19 14:02:09,824:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 14:02:09,824:INFO:create_model() successfully completed......................................
2025-01-19 14:02:09,950:INFO:SubProcess create_model() end ==================================
2025-01-19 14:02:09,969:INFO:_master_model_container: 31
2025-01-19 14:02:09,970:INFO:_display_container: 13
2025-01-19 14:02:09,992:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 14:02:09,992:INFO:stack_models() successfully completed......................................
2025-01-19 14:02:10,158:INFO:Initializing plot_model()
2025-01-19 14:02:10,158:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:10,159:INFO:Checking exceptions
2025-01-19 14:02:10,242:INFO:Preloading libraries
2025-01-19 14:02:10,275:INFO:Copying training dataset
2025-01-19 14:02:10,276:INFO:Plot type: auc
2025-01-19 14:02:10,389:INFO:Fitting Model
2025-01-19 14:02:10,399:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:02:10,400:INFO:Scoring test/hold-out set
2025-01-19 14:02:11,321:INFO:Visual Rendered Successfully
2025-01-19 14:02:11,611:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:11,653:INFO:Initializing plot_model()
2025-01-19 14:02:11,653:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:11,653:INFO:Checking exceptions
2025-01-19 14:02:11,749:INFO:Preloading libraries
2025-01-19 14:02:11,769:INFO:Copying training dataset
2025-01-19 14:02:11,769:INFO:Plot type: confusion_matrix
2025-01-19 14:02:11,892:INFO:Fitting Model
2025-01-19 14:02:11,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:02:11,892:INFO:Scoring test/hold-out set
2025-01-19 14:02:12,339:INFO:Visual Rendered Successfully
2025-01-19 14:02:12,456:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:12,502:INFO:Initializing plot_model()
2025-01-19 14:02:12,503:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:12,503:INFO:Checking exceptions
2025-01-19 14:02:12,605:INFO:Preloading libraries
2025-01-19 14:02:12,625:INFO:Copying training dataset
2025-01-19 14:02:12,626:INFO:Plot type: feature
2025-01-19 14:02:12,627:WARNING:No coef_ found. Trying feature_importances_
2025-01-19 14:02:13,221:INFO:Visual Rendered Successfully
2025-01-19 14:02:13,383:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:13,436:INFO:Initializing plot_model()
2025-01-19 14:02:13,437:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:13,438:INFO:Checking exceptions
2025-01-19 14:02:13,535:INFO:Preloading libraries
2025-01-19 14:02:13,561:INFO:Copying training dataset
2025-01-19 14:02:13,561:INFO:Plot type: boundary
2025-01-19 14:02:13,625:INFO:Fitting StandardScaler()
2025-01-19 14:02:13,638:INFO:Fitting PCA()
2025-01-19 14:02:13,847:INFO:Fitting Model
2025-01-19 14:02:16,845:INFO:Visual Rendered Successfully
2025-01-19 14:02:17,042:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:17,165:INFO:Initializing plot_model()
2025-01-19 14:02:17,165:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:17,166:INFO:Checking exceptions
2025-01-19 14:02:17,289:INFO:Preloading libraries
2025-01-19 14:02:17,330:INFO:Copying training dataset
2025-01-19 14:02:17,330:INFO:Plot type: pr
2025-01-19 14:02:17,530:INFO:Fitting Model
2025-01-19 14:02:17,531:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:02:17,531:INFO:Scoring test/hold-out set
2025-01-19 14:02:17,984:INFO:Visual Rendered Successfully
2025-01-19 14:02:18,092:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:18,130:INFO:Initializing plot_model()
2025-01-19 14:02:18,130:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:18,130:INFO:Checking exceptions
2025-01-19 14:02:18,235:INFO:Preloading libraries
2025-01-19 14:02:18,281:INFO:Copying training dataset
2025-01-19 14:02:18,281:INFO:Plot type: class_report
2025-01-19 14:02:18,437:INFO:Fitting Model
2025-01-19 14:02:18,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:02:18,438:INFO:Scoring test/hold-out set
2025-01-19 14:02:19,114:INFO:Visual Rendered Successfully
2025-01-19 14:02:19,241:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:19,279:INFO:Initializing evaluate_model()
2025-01-19 14:02:19,279:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 14:02:19,322:INFO:Initializing plot_model()
2025-01-19 14:02:19,322:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, system=True)
2025-01-19 14:02:19,322:INFO:Checking exceptions
2025-01-19 14:02:19,479:INFO:Preloading libraries
2025-01-19 14:02:19,534:INFO:Copying training dataset
2025-01-19 14:02:19,534:INFO:Plot type: pipeline
2025-01-19 14:02:19,934:INFO:Visual Rendered Successfully
2025-01-19 14:02:20,059:INFO:plot_model() successfully completed......................................
2025-01-19 14:02:20,122:INFO:Initializing create_model()
2025-01-19 14:02:20,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:02:20,122:INFO:Checking exceptions
2025-01-19 14:02:20,176:INFO:Importing libraries
2025-01-19 14:02:20,176:INFO:Copying training dataset
2025-01-19 14:02:20,206:INFO:Defining folds
2025-01-19 14:02:20,206:INFO:Declaring metric variables
2025-01-19 14:02:20,236:INFO:Importing untrained model
2025-01-19 14:02:20,248:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:02:20,263:INFO:Cross validation set to False
2025-01-19 14:02:20,264:INFO:Fitting Model
2025-01-19 14:02:20,353:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 14:02:20,354:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000440 seconds.
2025-01-19 14:02:20,354:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-19 14:02:20,354:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-19 14:02:20,354:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 14:02:20,355:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 14:02:20,356:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 14:02:20,356:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 14:02:20,358:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,362:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,370:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,375:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,379:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,386:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,407:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,415:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,418:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,420:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,432:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,436:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,478:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,504:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,509:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,524:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,529:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,536:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,545:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,552:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,559:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,561:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,562:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,577:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,579:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,588:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,590:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,596:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:02:20,703:INFO:Initializing predict_model()
2025-01-19 14:02:20,703:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000171DC445820>)
2025-01-19 14:02:20,703:INFO:Checking exceptions
2025-01-19 14:02:20,703:INFO:Preloading libraries
2025-01-19 14:02:20,808:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:20,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:20,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:02:21,074:INFO:_display_container: 14
2025-01-19 14:02:21,076:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:02:21,077:INFO:create_model() successfully completed......................................
2025-01-19 14:02:21,526:INFO:Initializing interpret_model()
2025-01-19 14:02:21,527:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:02:21,527:INFO:Checking exceptions
2025-01-19 14:02:21,528:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:04:13,927:INFO:Initializing interpret_model()
2025-01-19 14:04:13,928:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:04:13,928:INFO:Checking exceptions
2025-01-19 14:04:13,929:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:04:20,190:INFO:Initializing interpret_model()
2025-01-19 14:04:20,190:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:04:20,190:INFO:Checking exceptions
2025-01-19 14:04:20,191:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:07:08,752:INFO:Initializing interpret_model()
2025-01-19 14:07:08,752:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:07:08,753:INFO:Checking exceptions
2025-01-19 14:07:08,753:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:08:43,677:INFO:Initializing interpret_model()
2025-01-19 14:08:43,677:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:08:43,678:INFO:Checking exceptions
2025-01-19 14:08:43,678:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:08:50,132:INFO:Initializing interpret_model()
2025-01-19 14:08:50,133:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000171C67822E0>)
2025-01-19 14:08:50,133:INFO:Checking exceptions
2025-01-19 14:08:50,133:ERROR:
'shap' is a soft dependency and not included in the pycaret installation. Please run: `pip install shap` to install.
Alternately, you can install this by running `pip install pycaret[analysis]`
NoneType: None
2025-01-19 14:11:16,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 14:11:16,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 14:11:16,630:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 14:11:16,631:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 14:11:20,822:INFO:PyCaret ClassificationExperiment
2025-01-19 14:11:20,822:INFO:Logging name: juice1
2025-01-19 14:11:20,822:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-19 14:11:20,822:INFO:version 3.3.2
2025-01-19 14:11:20,822:INFO:Initializing setup()
2025-01-19 14:11:20,822:INFO:self.USI: 26a5
2025-01-19 14:11:20,823:INFO:self._variable_keys: {'html_param', 'y_train', 'exp_name_log', 'memory', 'pipeline', '_available_plots', '_ml_usecase', 'logging_param', 'exp_id', 'fold_generator', 'n_jobs_param', 'fold_shuffle_param', 'fix_imbalance', 'fold_groups_param', 'log_plots_param', 'seed', 'USI', 'gpu_n_jobs_param', 'X_train', 'y', 'is_multiclass', 'data', 'idx', 'gpu_param', 'X_test', 'target_param', 'X', 'y_test'}
2025-01-19 14:11:20,823:INFO:Checking environment
2025-01-19 14:11:20,823:INFO:python_version: 3.9.0
2025-01-19 14:11:20,823:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 14:11:20,823:INFO:machine: AMD64
2025-01-19 14:11:20,823:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 14:11:20,826:INFO:Memory: svmem(total=8416788480, available=1791721472, percent=78.7, used=6625067008, free=1791721472)
2025-01-19 14:11:20,826:INFO:Physical Core: 2
2025-01-19 14:11:20,826:INFO:Logical Core: 4
2025-01-19 14:11:20,826:INFO:Checking libraries
2025-01-19 14:11:20,826:INFO:System:
2025-01-19 14:11:20,826:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 14:11:20,827:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 14:11:20,827:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 14:11:20,827:INFO:PyCaret required dependencies:
2025-01-19 14:11:20,881:INFO:                 pip: 24.2
2025-01-19 14:11:20,881:INFO:          setuptools: 75.1.0
2025-01-19 14:11:20,881:INFO:             pycaret: 3.3.2
2025-01-19 14:11:20,881:INFO:             IPython: 8.18.1
2025-01-19 14:11:20,881:INFO:          ipywidgets: 8.1.5
2025-01-19 14:11:20,881:INFO:                tqdm: 4.67.1
2025-01-19 14:11:20,881:INFO:               numpy: 1.26.4
2025-01-19 14:11:20,882:INFO:              pandas: 2.1.4
2025-01-19 14:11:20,882:INFO:              jinja2: 3.1.5
2025-01-19 14:11:20,882:INFO:               scipy: 1.11.4
2025-01-19 14:11:20,882:INFO:              joblib: 1.3.2
2025-01-19 14:11:20,882:INFO:             sklearn: 1.4.2
2025-01-19 14:11:20,882:INFO:                pyod: 2.0.3
2025-01-19 14:11:20,882:INFO:            imblearn: 0.12.4
2025-01-19 14:11:20,883:INFO:   category_encoders: 2.6.4
2025-01-19 14:11:20,883:INFO:            lightgbm: 4.5.0
2025-01-19 14:11:20,883:INFO:               numba: 0.60.0
2025-01-19 14:11:20,883:INFO:            requests: 2.32.3
2025-01-19 14:11:20,883:INFO:          matplotlib: 3.7.5
2025-01-19 14:11:20,883:INFO:          scikitplot: 0.3.7
2025-01-19 14:11:20,883:INFO:         yellowbrick: 1.5
2025-01-19 14:11:20,883:INFO:              plotly: 5.24.1
2025-01-19 14:11:20,883:INFO:    plotly-resampler: Not installed
2025-01-19 14:11:20,884:INFO:             kaleido: 0.2.1
2025-01-19 14:11:20,884:INFO:           schemdraw: 0.15
2025-01-19 14:11:20,884:INFO:         statsmodels: 0.14.4
2025-01-19 14:11:20,884:INFO:              sktime: 0.26.0
2025-01-19 14:11:20,884:INFO:               tbats: 1.1.3
2025-01-19 14:11:20,884:INFO:            pmdarima: 2.0.4
2025-01-19 14:11:20,884:INFO:              psutil: 6.1.1
2025-01-19 14:11:20,884:INFO:          markupsafe: 3.0.2
2025-01-19 14:11:20,884:INFO:             pickle5: Not installed
2025-01-19 14:11:20,884:INFO:         cloudpickle: 3.1.1
2025-01-19 14:11:20,885:INFO:         deprecation: 2.1.0
2025-01-19 14:11:20,885:INFO:              xxhash: 3.5.0
2025-01-19 14:11:20,885:INFO:           wurlitzer: Not installed
2025-01-19 14:11:20,885:INFO:PyCaret optional dependencies:
2025-01-19 14:11:20,913:INFO:                shap: 0.46.0
2025-01-19 14:11:20,913:INFO:           interpret: Not installed
2025-01-19 14:11:20,913:INFO:                umap: Not installed
2025-01-19 14:11:20,913:INFO:     ydata_profiling: Not installed
2025-01-19 14:11:20,914:INFO:  explainerdashboard: Not installed
2025-01-19 14:11:20,914:INFO:             autoviz: Not installed
2025-01-19 14:11:20,914:INFO:           fairlearn: Not installed
2025-01-19 14:11:20,914:INFO:          deepchecks: Not installed
2025-01-19 14:11:20,914:INFO:             xgboost: Not installed
2025-01-19 14:11:20,914:INFO:            catboost: Not installed
2025-01-19 14:11:20,915:INFO:              kmodes: Not installed
2025-01-19 14:11:20,915:INFO:             mlxtend: Not installed
2025-01-19 14:11:20,915:INFO:       statsforecast: Not installed
2025-01-19 14:11:20,915:INFO:        tune_sklearn: Not installed
2025-01-19 14:11:20,915:INFO:                 ray: Not installed
2025-01-19 14:11:20,915:INFO:            hyperopt: Not installed
2025-01-19 14:11:20,915:INFO:              optuna: Not installed
2025-01-19 14:11:20,916:INFO:               skopt: Not installed
2025-01-19 14:11:20,916:INFO:              mlflow: 2.19.0
2025-01-19 14:11:20,916:INFO:              gradio: Not installed
2025-01-19 14:11:20,916:INFO:             fastapi: Not installed
2025-01-19 14:11:20,916:INFO:             uvicorn: Not installed
2025-01-19 14:11:20,916:INFO:              m2cgen: Not installed
2025-01-19 14:11:20,916:INFO:           evidently: Not installed
2025-01-19 14:11:20,916:INFO:               fugue: Not installed
2025-01-19 14:11:20,916:INFO:           streamlit: Not installed
2025-01-19 14:11:20,917:INFO:             prophet: Not installed
2025-01-19 14:11:20,917:INFO:None
2025-01-19 14:11:20,917:INFO:Set up data.
2025-01-19 14:11:20,934:INFO:Set up folding strategy.
2025-01-19 14:11:20,934:INFO:Set up train/test split.
2025-01-19 14:11:20,951:INFO:Set up index.
2025-01-19 14:11:20,952:INFO:Assigning column types.
2025-01-19 14:11:20,964:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 14:11:21,066:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,113:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,197:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,197:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,309:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,313:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,387:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,388:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,388:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 14:11:21,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,561:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,562:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,639:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 14:11:21,699:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,700:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-19 14:11:21,898:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:21,899:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,056:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,057:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,061:INFO:Preparing preprocessing pipeline...
2025-01-19 14:11:22,063:INFO:Set up label encoding.
2025-01-19 14:11:22,063:INFO:Set up simple imputation.
2025-01-19 14:11:22,074:INFO:Set up encoding of ordinal features.
2025-01-19 14:11:22,078:INFO:Set up encoding of categorical features.
2025-01-19 14:11:22,236:INFO:Finished creating preprocessing pipeline.
2025-01-19 14:11:22,277:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-19 14:11:22,277:INFO:Creating final display dataframe.
2025-01-19 14:11:22,399:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             26a5
2025-01-19 14:11:22,703:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,704:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,936:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:11:22,937:INFO:setup() successfully completed in 2.12s...............
2025-01-19 14:11:22,959:INFO:Initializing compare_models()
2025-01-19 14:11:22,959:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 14:11:22,960:INFO:Checking exceptions
2025-01-19 14:11:22,974:INFO:Preparing display monitor
2025-01-19 14:11:23,214:INFO:Initializing Logistic Regression
2025-01-19 14:11:23,214:INFO:Total runtime is 0.0 minutes
2025-01-19 14:11:23,227:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:23,227:INFO:Initializing create_model()
2025-01-19 14:11:23,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:23,228:INFO:Checking exceptions
2025-01-19 14:11:23,228:INFO:Importing libraries
2025-01-19 14:11:23,228:INFO:Copying training dataset
2025-01-19 14:11:23,248:INFO:Defining folds
2025-01-19 14:11:23,248:INFO:Declaring metric variables
2025-01-19 14:11:23,279:INFO:Importing untrained model
2025-01-19 14:11:23,293:INFO:Logistic Regression Imported successfully
2025-01-19 14:11:23,341:INFO:Starting cross validation
2025-01-19 14:11:23,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:36,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:36,223:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:36,235:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,235:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,248:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,253:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,260:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,336:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:36,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,656:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,665:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:36,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:36,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:37,002:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:37,020:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,042:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,087:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,095:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,228:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:37,274:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,288:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,394:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:37,414:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:11:37,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,460:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,468:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:37,477:INFO:Calculating mean and std
2025-01-19 14:11:37,480:INFO:Creating metrics dataframe
2025-01-19 14:11:37,483:INFO:Uploading results into container
2025-01-19 14:11:37,484:INFO:Uploading model into container now
2025-01-19 14:11:37,485:INFO:_master_model_container: 1
2025-01-19 14:11:37,485:INFO:_display_container: 2
2025-01-19 14:11:37,485:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:11:37,485:INFO:create_model() successfully completed......................................
2025-01-19 14:11:37,592:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:37,592:INFO:Creating metrics dataframe
2025-01-19 14:11:37,609:INFO:Initializing K Neighbors Classifier
2025-01-19 14:11:37,610:INFO:Total runtime is 0.23993444045384724 minutes
2025-01-19 14:11:37,618:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:37,618:INFO:Initializing create_model()
2025-01-19 14:11:37,618:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:37,618:INFO:Checking exceptions
2025-01-19 14:11:37,618:INFO:Importing libraries
2025-01-19 14:11:37,618:INFO:Copying training dataset
2025-01-19 14:11:37,636:INFO:Defining folds
2025-01-19 14:11:37,637:INFO:Declaring metric variables
2025-01-19 14:11:37,643:INFO:Importing untrained model
2025-01-19 14:11:37,655:INFO:K Neighbors Classifier Imported successfully
2025-01-19 14:11:37,670:INFO:Starting cross validation
2025-01-19 14:11:37,672:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:38,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,147:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,166:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,177:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,184:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,327:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,340:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,347:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,347:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,356:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,364:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,374:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,381:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,484:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,489:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,528:INFO:Calculating mean and std
2025-01-19 14:11:38,531:INFO:Creating metrics dataframe
2025-01-19 14:11:38,535:INFO:Uploading results into container
2025-01-19 14:11:38,536:INFO:Uploading model into container now
2025-01-19 14:11:38,537:INFO:_master_model_container: 2
2025-01-19 14:11:38,537:INFO:_display_container: 2
2025-01-19 14:11:38,539:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-19 14:11:38,539:INFO:create_model() successfully completed......................................
2025-01-19 14:11:38,655:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:38,656:INFO:Creating metrics dataframe
2025-01-19 14:11:38,672:INFO:Initializing Naive Bayes
2025-01-19 14:11:38,672:INFO:Total runtime is 0.25763805707295734 minutes
2025-01-19 14:11:38,678:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:38,679:INFO:Initializing create_model()
2025-01-19 14:11:38,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:38,681:INFO:Checking exceptions
2025-01-19 14:11:38,681:INFO:Importing libraries
2025-01-19 14:11:38,682:INFO:Copying training dataset
2025-01-19 14:11:38,696:INFO:Defining folds
2025-01-19 14:11:38,697:INFO:Declaring metric variables
2025-01-19 14:11:38,704:INFO:Importing untrained model
2025-01-19 14:11:38,715:INFO:Naive Bayes Imported successfully
2025-01-19 14:11:38,746:INFO:Starting cross validation
2025-01-19 14:11:38,750:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:38,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,913:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,916:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,922:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,924:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,929:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:38,949:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,072:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,091:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,095:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,105:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,201:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,220:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,226:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,231:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,253:INFO:Calculating mean and std
2025-01-19 14:11:39,264:INFO:Creating metrics dataframe
2025-01-19 14:11:39,270:INFO:Uploading results into container
2025-01-19 14:11:39,272:INFO:Uploading model into container now
2025-01-19 14:11:39,274:INFO:_master_model_container: 3
2025-01-19 14:11:39,275:INFO:_display_container: 2
2025-01-19 14:11:39,276:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-19 14:11:39,276:INFO:create_model() successfully completed......................................
2025-01-19 14:11:39,388:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:39,388:INFO:Creating metrics dataframe
2025-01-19 14:11:39,400:INFO:Initializing Decision Tree Classifier
2025-01-19 14:11:39,400:INFO:Total runtime is 0.2697668155034383 minutes
2025-01-19 14:11:39,408:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:39,408:INFO:Initializing create_model()
2025-01-19 14:11:39,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:39,409:INFO:Checking exceptions
2025-01-19 14:11:39,410:INFO:Importing libraries
2025-01-19 14:11:39,410:INFO:Copying training dataset
2025-01-19 14:11:39,423:INFO:Defining folds
2025-01-19 14:11:39,424:INFO:Declaring metric variables
2025-01-19 14:11:39,431:INFO:Importing untrained model
2025-01-19 14:11:39,442:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:11:39,458:INFO:Starting cross validation
2025-01-19 14:11:39,460:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:39,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,730:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,735:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,803:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:39,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,039:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,056:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,072:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,109:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,114:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,119:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,244:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,250:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,251:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,255:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,273:INFO:Calculating mean and std
2025-01-19 14:11:40,277:INFO:Creating metrics dataframe
2025-01-19 14:11:40,292:INFO:Uploading results into container
2025-01-19 14:11:40,293:INFO:Uploading model into container now
2025-01-19 14:11:40,294:INFO:_master_model_container: 4
2025-01-19 14:11:40,294:INFO:_display_container: 2
2025-01-19 14:11:40,295:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 14:11:40,295:INFO:create_model() successfully completed......................................
2025-01-19 14:11:40,441:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:40,441:INFO:Creating metrics dataframe
2025-01-19 14:11:40,458:INFO:Initializing SVM - Linear Kernel
2025-01-19 14:11:40,458:INFO:Total runtime is 0.2873992641766866 minutes
2025-01-19 14:11:40,467:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:40,468:INFO:Initializing create_model()
2025-01-19 14:11:40,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:40,468:INFO:Checking exceptions
2025-01-19 14:11:40,469:INFO:Importing libraries
2025-01-19 14:11:40,469:INFO:Copying training dataset
2025-01-19 14:11:40,486:INFO:Defining folds
2025-01-19 14:11:40,486:INFO:Declaring metric variables
2025-01-19 14:11:40,495:INFO:Importing untrained model
2025-01-19 14:11:40,502:INFO:SVM - Linear Kernel Imported successfully
2025-01-19 14:11:40,526:INFO:Starting cross validation
2025-01-19 14:11:40,532:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:40,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,909:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:40,914:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,982:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:40,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:40,991:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:40,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,014:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:41,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,167:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:41,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,234:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

fier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:41,282:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,287:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,393:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,398:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:41,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,429:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,465:INFO:Calculating mean and std
2025-01-19 14:11:41,471:INFO:Creating metrics dataframe
2025-01-19 14:11:41,487:INFO:Uploading results into container
2025-01-19 14:11:41,490:INFO:Uploading model into container now
2025-01-19 14:11:41,492:INFO:_master_model_container: 5
2025-01-19 14:11:41,492:INFO:_display_container: 2
2025-01-19 14:11:41,493:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-19 14:11:41,493:INFO:create_model() successfully completed......................................
2025-01-19 14:11:41,627:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:41,628:INFO:Creating metrics dataframe
2025-01-19 14:11:41,646:INFO:Initializing Ridge Classifier
2025-01-19 14:11:41,646:INFO:Total runtime is 0.3072100003560384 minutes
2025-01-19 14:11:41,657:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:41,658:INFO:Initializing create_model()
2025-01-19 14:11:41,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:41,659:INFO:Checking exceptions
2025-01-19 14:11:41,659:INFO:Importing libraries
2025-01-19 14:11:41,659:INFO:Copying training dataset
2025-01-19 14:11:41,680:INFO:Defining folds
2025-01-19 14:11:41,680:INFO:Declaring metric variables
2025-01-19 14:11:41,695:INFO:Importing untrained model
2025-01-19 14:11:41,706:INFO:Ridge Classifier Imported successfully
2025-01-19 14:11:41,725:INFO:Starting cross validation
2025-01-19 14:11:41,732:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:41,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,914:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,919:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,921:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,926:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:41,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,007:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,147:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,173:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,183:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,192:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,286:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,294:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,298:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,317:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:42,341:INFO:Calculating mean and std
2025-01-19 14:11:42,349:INFO:Creating metrics dataframe
2025-01-19 14:11:42,358:INFO:Uploading results into container
2025-01-19 14:11:42,359:INFO:Uploading model into container now
2025-01-19 14:11:42,360:INFO:_master_model_container: 6
2025-01-19 14:11:42,360:INFO:_display_container: 2
2025-01-19 14:11:42,362:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-19 14:11:42,362:INFO:create_model() successfully completed......................................
2025-01-19 14:11:42,490:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:42,490:INFO:Creating metrics dataframe
2025-01-19 14:11:42,504:INFO:Initializing Random Forest Classifier
2025-01-19 14:11:42,504:INFO:Total runtime is 0.32151060899098716 minutes
2025-01-19 14:11:42,510:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:42,511:INFO:Initializing create_model()
2025-01-19 14:11:42,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:42,513:INFO:Checking exceptions
2025-01-19 14:11:42,513:INFO:Importing libraries
2025-01-19 14:11:42,513:INFO:Copying training dataset
2025-01-19 14:11:42,523:INFO:Defining folds
2025-01-19 14:11:42,523:INFO:Declaring metric variables
2025-01-19 14:11:42,537:INFO:Importing untrained model
2025-01-19 14:11:42,548:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:11:42,564:INFO:Starting cross validation
2025-01-19 14:11:42,567:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:43,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,714:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,714:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:43,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,222:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,235:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,564:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,575:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,675:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,685:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,925:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:44,939:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,315:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,323:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,330:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,477:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,485:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,495:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:45,635:INFO:Calculating mean and std
2025-01-19 14:11:45,639:INFO:Creating metrics dataframe
2025-01-19 14:11:45,648:INFO:Uploading results into container
2025-01-19 14:11:45,649:INFO:Uploading model into container now
2025-01-19 14:11:45,651:INFO:_master_model_container: 7
2025-01-19 14:11:45,651:INFO:_display_container: 2
2025-01-19 14:11:45,652:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:11:45,653:INFO:create_model() successfully completed......................................
2025-01-19 14:11:45,904:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:45,905:INFO:Creating metrics dataframe
2025-01-19 14:11:45,926:INFO:Initializing Quadratic Discriminant Analysis
2025-01-19 14:11:45,927:INFO:Total runtime is 0.37856187423070276 minutes
2025-01-19 14:11:45,940:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:45,941:INFO:Initializing create_model()
2025-01-19 14:11:45,941:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:45,941:INFO:Checking exceptions
2025-01-19 14:11:45,942:INFO:Importing libraries
2025-01-19 14:11:45,942:INFO:Copying training dataset
2025-01-19 14:11:45,998:INFO:Defining folds
2025-01-19 14:11:45,998:INFO:Declaring metric variables
2025-01-19 14:11:46,013:INFO:Importing untrained model
2025-01-19 14:11:46,026:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-19 14:11:46,058:INFO:Starting cross validation
2025-01-19 14:11:46,063:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:46,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,228:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,304:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,355:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,363:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,373:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,385:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,394:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,441:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,592:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,690:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,702:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,713:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,791:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 14:11:46,833:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,863:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:46,906:INFO:Calculating mean and std
2025-01-19 14:11:46,910:INFO:Creating metrics dataframe
2025-01-19 14:11:46,921:INFO:Uploading results into container
2025-01-19 14:11:46,923:INFO:Uploading model into container now
2025-01-19 14:11:46,924:INFO:_master_model_container: 8
2025-01-19 14:11:46,925:INFO:_display_container: 2
2025-01-19 14:11:46,925:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-19 14:11:46,925:INFO:create_model() successfully completed......................................
2025-01-19 14:11:47,044:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:47,044:INFO:Creating metrics dataframe
2025-01-19 14:11:47,065:INFO:Initializing Ada Boost Classifier
2025-01-19 14:11:47,065:INFO:Total runtime is 0.3975144386291504 minutes
2025-01-19 14:11:47,075:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:47,076:INFO:Initializing create_model()
2025-01-19 14:11:47,076:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:47,076:INFO:Checking exceptions
2025-01-19 14:11:47,076:INFO:Importing libraries
2025-01-19 14:11:47,076:INFO:Copying training dataset
2025-01-19 14:11:47,099:INFO:Defining folds
2025-01-19 14:11:47,107:INFO:Declaring metric variables
2025-01-19 14:11:47,127:INFO:Importing untrained model
2025-01-19 14:11:47,136:INFO:Ada Boost Classifier Imported successfully
2025-01-19 14:11:47,160:INFO:Starting cross validation
2025-01-19 14:11:47,164:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:47,356:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:47,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:47,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:47,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:48,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,068:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,119:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,130:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,373:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:48,394:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:48,414:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:48,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:48,556:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:48,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,007:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,034:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,047:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,055:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,061:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,075:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,225:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:49,287:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:11:49,337:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,357:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,660:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:49,686:INFO:Calculating mean and std
2025-01-19 14:11:49,690:INFO:Creating metrics dataframe
2025-01-19 14:11:49,701:INFO:Uploading results into container
2025-01-19 14:11:49,703:INFO:Uploading model into container now
2025-01-19 14:11:49,704:INFO:_master_model_container: 9
2025-01-19 14:11:49,704:INFO:_display_container: 2
2025-01-19 14:11:49,705:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 14:11:49,705:INFO:create_model() successfully completed......................................
2025-01-19 14:11:49,817:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:49,817:INFO:Creating metrics dataframe
2025-01-19 14:11:49,831:INFO:Initializing Gradient Boosting Classifier
2025-01-19 14:11:49,832:INFO:Total runtime is 0.4436359882354737 minutes
2025-01-19 14:11:49,838:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:49,841:INFO:Initializing create_model()
2025-01-19 14:11:49,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:49,841:INFO:Checking exceptions
2025-01-19 14:11:49,841:INFO:Importing libraries
2025-01-19 14:11:49,842:INFO:Copying training dataset
2025-01-19 14:11:49,853:INFO:Defining folds
2025-01-19 14:11:49,854:INFO:Declaring metric variables
2025-01-19 14:11:49,868:INFO:Importing untrained model
2025-01-19 14:11:49,877:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 14:11:49,894:INFO:Starting cross validation
2025-01-19 14:11:49,895:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:50,516:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,525:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,541:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,548:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,556:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,557:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,566:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,573:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,580:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,588:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:50,595:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,196:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,201:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,213:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,215:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,228:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,236:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,239:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,246:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,252:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,625:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:51,655:INFO:Calculating mean and std
2025-01-19 14:11:51,660:INFO:Creating metrics dataframe
2025-01-19 14:11:51,666:INFO:Uploading results into container
2025-01-19 14:11:51,668:INFO:Uploading model into container now
2025-01-19 14:11:51,669:INFO:_master_model_container: 10
2025-01-19 14:11:51,670:INFO:_display_container: 2
2025-01-19 14:11:51,671:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:11:51,672:INFO:create_model() successfully completed......................................
2025-01-19 14:11:51,778:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:51,779:INFO:Creating metrics dataframe
2025-01-19 14:11:51,797:INFO:Initializing Linear Discriminant Analysis
2025-01-19 14:11:51,797:INFO:Total runtime is 0.4763930718104045 minutes
2025-01-19 14:11:51,807:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:51,807:INFO:Initializing create_model()
2025-01-19 14:11:51,807:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:51,807:INFO:Checking exceptions
2025-01-19 14:11:51,808:INFO:Importing libraries
2025-01-19 14:11:51,808:INFO:Copying training dataset
2025-01-19 14:11:51,819:INFO:Defining folds
2025-01-19 14:11:51,820:INFO:Declaring metric variables
2025-01-19 14:11:51,828:INFO:Importing untrained model
2025-01-19 14:11:51,838:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:11:51,856:INFO:Starting cross validation
2025-01-19 14:11:51,859:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:52,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,022:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,025:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,029:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,038:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,178:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,187:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,196:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,204:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,210:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,213:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,226:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,239:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,301:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,314:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,317:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,323:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,326:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:52,337:INFO:Calculating mean and std
2025-01-19 14:11:52,338:INFO:Creating metrics dataframe
2025-01-19 14:11:52,342:INFO:Uploading results into container
2025-01-19 14:11:52,343:INFO:Uploading model into container now
2025-01-19 14:11:52,343:INFO:_master_model_container: 11
2025-01-19 14:11:52,343:INFO:_display_container: 2
2025-01-19 14:11:52,344:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:11:52,344:INFO:create_model() successfully completed......................................
2025-01-19 14:11:52,451:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:52,452:INFO:Creating metrics dataframe
2025-01-19 14:11:52,471:INFO:Initializing Extra Trees Classifier
2025-01-19 14:11:52,471:INFO:Total runtime is 0.48762093385060634 minutes
2025-01-19 14:11:52,480:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:52,481:INFO:Initializing create_model()
2025-01-19 14:11:52,481:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:52,481:INFO:Checking exceptions
2025-01-19 14:11:52,481:INFO:Importing libraries
2025-01-19 14:11:52,481:INFO:Copying training dataset
2025-01-19 14:11:52,497:INFO:Defining folds
2025-01-19 14:11:52,498:INFO:Declaring metric variables
2025-01-19 14:11:52,505:INFO:Importing untrained model
2025-01-19 14:11:52,516:INFO:Extra Trees Classifier Imported successfully
2025-01-19 14:11:52,533:INFO:Starting cross validation
2025-01-19 14:11:52,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:53,251:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,276:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,314:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,438:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,446:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,976:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,984:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:53,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,592:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,606:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,867:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,874:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,965:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,970:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,977:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:54,993:INFO:Calculating mean and std
2025-01-19 14:11:54,995:INFO:Creating metrics dataframe
2025-01-19 14:11:54,997:INFO:Uploading results into container
2025-01-19 14:11:54,998:INFO:Uploading model into container now
2025-01-19 14:11:54,999:INFO:_master_model_container: 12
2025-01-19 14:11:54,999:INFO:_display_container: 2
2025-01-19 14:11:55,000:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 14:11:55,000:INFO:create_model() successfully completed......................................
2025-01-19 14:11:55,106:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:55,106:INFO:Creating metrics dataframe
2025-01-19 14:11:55,140:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 14:11:55,140:INFO:Total runtime is 0.5321069041887919 minutes
2025-01-19 14:11:55,152:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:55,152:INFO:Initializing create_model()
2025-01-19 14:11:55,152:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:55,152:INFO:Checking exceptions
2025-01-19 14:11:55,153:INFO:Importing libraries
2025-01-19 14:11:55,153:INFO:Copying training dataset
2025-01-19 14:11:55,169:INFO:Defining folds
2025-01-19 14:11:55,170:INFO:Declaring metric variables
2025-01-19 14:11:55,182:INFO:Importing untrained model
2025-01-19 14:11:55,190:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:11:55,205:INFO:Starting cross validation
2025-01-19 14:11:55,208:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:56,453:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,462:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,472:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,640:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:56,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,580:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,760:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,791:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:57,797:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,289:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,319:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,333:INFO:Calculating mean and std
2025-01-19 14:11:58,337:INFO:Creating metrics dataframe
2025-01-19 14:11:58,340:INFO:Uploading results into container
2025-01-19 14:11:58,341:INFO:Uploading model into container now
2025-01-19 14:11:58,342:INFO:_master_model_container: 13
2025-01-19 14:11:58,342:INFO:_display_container: 2
2025-01-19 14:11:58,344:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:11:58,344:INFO:create_model() successfully completed......................................
2025-01-19 14:11:58,483:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:58,484:INFO:Creating metrics dataframe
2025-01-19 14:11:58,512:INFO:Initializing Dummy Classifier
2025-01-19 14:11:58,512:INFO:Total runtime is 0.5883095781008403 minutes
2025-01-19 14:11:58,523:INFO:SubProcess create_model() called ==================================
2025-01-19 14:11:58,524:INFO:Initializing create_model()
2025-01-19 14:11:58,524:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C09A4D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:58,525:INFO:Checking exceptions
2025-01-19 14:11:58,525:INFO:Importing libraries
2025-01-19 14:11:58,525:INFO:Copying training dataset
2025-01-19 14:11:58,540:INFO:Defining folds
2025-01-19 14:11:58,540:INFO:Declaring metric variables
2025-01-19 14:11:58,551:INFO:Importing untrained model
2025-01-19 14:11:58,562:INFO:Dummy Classifier Imported successfully
2025-01-19 14:11:58,576:INFO:Starting cross validation
2025-01-19 14:11:58,580:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:11:58,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,747:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,753:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,759:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,756:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,771:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,792:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,924:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,932:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,938:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,938:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,938:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,942:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,946:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,949:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,950:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,957:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,944:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:58,974:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:58,980:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,068:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,075:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:59,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,081:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 14:11:59,082:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,083:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:11:59,107:INFO:Calculating mean and std
2025-01-19 14:11:59,109:INFO:Creating metrics dataframe
2025-01-19 14:11:59,113:INFO:Uploading results into container
2025-01-19 14:11:59,114:INFO:Uploading model into container now
2025-01-19 14:11:59,114:INFO:_master_model_container: 14
2025-01-19 14:11:59,115:INFO:_display_container: 2
2025-01-19 14:11:59,116:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-19 14:11:59,117:INFO:create_model() successfully completed......................................
2025-01-19 14:11:59,225:INFO:SubProcess create_model() end ==================================
2025-01-19 14:11:59,225:INFO:Creating metrics dataframe
2025-01-19 14:11:59,247:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 14:11:59,270:INFO:Initializing create_model()
2025-01-19 14:11:59,271:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:59,271:INFO:Checking exceptions
2025-01-19 14:11:59,277:INFO:Importing libraries
2025-01-19 14:11:59,277:INFO:Copying training dataset
2025-01-19 14:11:59,291:INFO:Defining folds
2025-01-19 14:11:59,291:INFO:Declaring metric variables
2025-01-19 14:11:59,291:INFO:Importing untrained model
2025-01-19 14:11:59,292:INFO:Declaring custom model
2025-01-19 14:11:59,292:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:11:59,293:INFO:Cross validation set to False
2025-01-19 14:11:59,294:INFO:Fitting Model
2025-01-19 14:11:59,341:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:11:59,342:INFO:create_model() successfully completed......................................
2025-01-19 14:11:59,510:INFO:_master_model_container: 14
2025-01-19 14:11:59,511:INFO:_display_container: 2
2025-01-19 14:11:59,511:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:11:59,511:INFO:compare_models() successfully completed......................................
2025-01-19 14:11:59,602:INFO:Initializing create_model()
2025-01-19 14:11:59,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:11:59,603:INFO:Checking exceptions
2025-01-19 14:11:59,643:INFO:Importing libraries
2025-01-19 14:11:59,644:INFO:Copying training dataset
2025-01-19 14:11:59,669:INFO:Defining folds
2025-01-19 14:11:59,669:INFO:Declaring metric variables
2025-01-19 14:11:59,693:INFO:Importing untrained model
2025-01-19 14:11:59,707:INFO:Logistic Regression Imported successfully
2025-01-19 14:11:59,737:INFO:Starting cross validation
2025-01-19 14:11:59,740:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:00,326:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:00,368:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:00,393:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,402:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,405:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:00,409:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,411:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:00,441:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,457:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,494:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:00,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,013:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,076:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,085:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,115:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,153:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,162:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,218:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,225:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,540:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:01,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,588:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,600:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:01,613:INFO:Calculating mean and std
2025-01-19 14:12:01,616:INFO:Creating metrics dataframe
2025-01-19 14:12:01,636:INFO:Finalizing model
2025-01-19 14:12:02,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:02,626:INFO:Uploading results into container
2025-01-19 14:12:02,628:INFO:Uploading model into container now
2025-01-19 14:12:02,653:INFO:_master_model_container: 15
2025-01-19 14:12:02,653:INFO:_display_container: 3
2025-01-19 14:12:02,654:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:12:02,654:INFO:create_model() successfully completed......................................
2025-01-19 14:12:02,800:INFO:Initializing create_model()
2025-01-19 14:12:02,801:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:02,801:INFO:Checking exceptions
2025-01-19 14:12:02,852:INFO:Importing libraries
2025-01-19 14:12:02,852:INFO:Copying training dataset
2025-01-19 14:12:02,873:INFO:Defining folds
2025-01-19 14:12:02,873:INFO:Declaring metric variables
2025-01-19 14:12:02,891:INFO:Importing untrained model
2025-01-19 14:12:02,903:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:12:02,956:INFO:Starting cross validation
2025-01-19 14:12:02,958:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:03,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,205:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,222:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,222:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,239:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,248:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,393:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,412:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,422:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,422:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,428:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,447:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,519:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:03,633:INFO:Calculating mean and std
2025-01-19 14:12:03,637:INFO:Creating metrics dataframe
2025-01-19 14:12:03,653:INFO:Finalizing model
2025-01-19 14:12:03,718:INFO:Uploading results into container
2025-01-19 14:12:03,719:INFO:Uploading model into container now
2025-01-19 14:12:03,746:INFO:_master_model_container: 16
2025-01-19 14:12:03,747:INFO:_display_container: 4
2025-01-19 14:12:03,747:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 14:12:03,747:INFO:create_model() successfully completed......................................
2025-01-19 14:12:03,891:INFO:Initializing create_model()
2025-01-19 14:12:03,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:03,892:INFO:Checking exceptions
2025-01-19 14:12:03,935:INFO:Importing libraries
2025-01-19 14:12:03,936:INFO:Copying training dataset
2025-01-19 14:12:03,963:INFO:Defining folds
2025-01-19 14:12:03,964:INFO:Declaring metric variables
2025-01-19 14:12:03,977:INFO:Importing untrained model
2025-01-19 14:12:03,991:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:12:04,016:INFO:Starting cross validation
2025-01-19 14:12:04,019:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:04,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,945:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,950:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,957:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,963:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,975:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:04,987:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,033:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,051:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:05,615:INFO:Calculating mean and std
2025-01-19 14:12:05,622:INFO:Creating metrics dataframe
2025-01-19 14:12:05,635:INFO:Finalizing model
2025-01-19 14:12:06,130:INFO:Uploading results into container
2025-01-19 14:12:06,134:INFO:Uploading model into container now
2025-01-19 14:12:06,157:INFO:_master_model_container: 17
2025-01-19 14:12:06,157:INFO:_display_container: 5
2025-01-19 14:12:06,158:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:12:06,158:INFO:create_model() successfully completed......................................
2025-01-19 14:12:06,327:INFO:Initializing create_model()
2025-01-19 14:12:06,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:06,328:INFO:Checking exceptions
2025-01-19 14:12:06,377:INFO:Importing libraries
2025-01-19 14:12:06,378:INFO:Copying training dataset
2025-01-19 14:12:06,435:INFO:Defining folds
2025-01-19 14:12:06,436:INFO:Declaring metric variables
2025-01-19 14:12:06,457:INFO:Importing untrained model
2025-01-19 14:12:06,468:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:12:06,502:INFO:Starting cross validation
2025-01-19 14:12:06,505:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:06,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,776:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,786:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,811:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,819:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,823:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,964:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:06,983:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,008:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,008:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,012:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,015:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,018:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,024:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,025:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,122:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,138:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,158:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,166:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:07,191:INFO:Calculating mean and std
2025-01-19 14:12:07,192:INFO:Creating metrics dataframe
2025-01-19 14:12:07,204:INFO:Finalizing model
2025-01-19 14:12:07,285:INFO:Uploading results into container
2025-01-19 14:12:07,287:INFO:Uploading model into container now
2025-01-19 14:12:07,313:INFO:_master_model_container: 18
2025-01-19 14:12:07,314:INFO:_display_container: 6
2025-01-19 14:12:07,315:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:12:07,315:INFO:create_model() successfully completed......................................
2025-01-19 14:12:07,469:INFO:gpu_param set to False
2025-01-19 14:12:07,625:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:07,625:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:07,731:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:07,732:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:07,785:INFO:gpu_param set to False
2025-01-19 14:12:08,029:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,136:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,184:INFO:gpu_param set to False
2025-01-19 14:12:08,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,437:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,577:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,578:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 14:12:08,581:INFO:Initializing compare_models()
2025-01-19 14:12:08,581:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 14:12:08,582:INFO:Checking exceptions
2025-01-19 14:12:08,588:INFO:Preparing display monitor
2025-01-19 14:12:08,673:INFO:Initializing Random Forest Classifier
2025-01-19 14:12:08,674:INFO:Total runtime is 1.6645590464274088e-05 minutes
2025-01-19 14:12:08,686:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:08,687:INFO:Initializing create_model()
2025-01-19 14:12:08,687:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D61B76D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:08,687:INFO:Checking exceptions
2025-01-19 14:12:08,688:INFO:Importing libraries
2025-01-19 14:12:08,688:INFO:Copying training dataset
2025-01-19 14:12:08,713:INFO:Defining folds
2025-01-19 14:12:08,713:INFO:Declaring metric variables
2025-01-19 14:12:08,729:INFO:Importing untrained model
2025-01-19 14:12:08,771:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:12:08,801:INFO:Starting cross validation
2025-01-19 14:12:08,809:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:09,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,642:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,642:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,651:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,659:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,698:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:09,727:INFO:Calculating mean and std
2025-01-19 14:12:09,729:INFO:Creating metrics dataframe
2025-01-19 14:12:09,732:INFO:Uploading results into container
2025-01-19 14:12:09,732:INFO:Uploading model into container now
2025-01-19 14:12:09,733:INFO:_master_model_container: 19
2025-01-19 14:12:09,733:INFO:_display_container: 7
2025-01-19 14:12:09,735:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:12:09,735:INFO:create_model() successfully completed......................................
2025-01-19 14:12:09,852:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:09,853:INFO:Creating metrics dataframe
2025-01-19 14:12:09,863:INFO:Initializing Ada Boost Classifier
2025-01-19 14:12:09,863:INFO:Total runtime is 0.01983764171600342 minutes
2025-01-19 14:12:09,871:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:09,873:INFO:Initializing create_model()
2025-01-19 14:12:09,873:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D61B76D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:09,873:INFO:Checking exceptions
2025-01-19 14:12:09,873:INFO:Importing libraries
2025-01-19 14:12:09,873:INFO:Copying training dataset
2025-01-19 14:12:09,886:INFO:Defining folds
2025-01-19 14:12:09,887:INFO:Declaring metric variables
2025-01-19 14:12:09,897:INFO:Importing untrained model
2025-01-19 14:12:09,906:INFO:Ada Boost Classifier Imported successfully
2025-01-19 14:12:09,922:INFO:Starting cross validation
2025-01-19 14:12:09,924:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:09,996:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:12:10,007:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:12:10,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,272:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,273:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,278:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,307:INFO:Calculating mean and std
2025-01-19 14:12:10,311:INFO:Creating metrics dataframe
2025-01-19 14:12:10,325:INFO:Uploading results into container
2025-01-19 14:12:10,326:INFO:Uploading model into container now
2025-01-19 14:12:10,327:INFO:_master_model_container: 20
2025-01-19 14:12:10,328:INFO:_display_container: 7
2025-01-19 14:12:10,328:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 14:12:10,329:INFO:create_model() successfully completed......................................
2025-01-19 14:12:10,431:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:10,431:INFO:Creating metrics dataframe
2025-01-19 14:12:10,448:INFO:Initializing Gradient Boosting Classifier
2025-01-19 14:12:10,448:INFO:Total runtime is 0.029580565293629964 minutes
2025-01-19 14:12:10,455:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:10,456:INFO:Initializing create_model()
2025-01-19 14:12:10,456:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D61B76D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:10,456:INFO:Checking exceptions
2025-01-19 14:12:10,456:INFO:Importing libraries
2025-01-19 14:12:10,456:INFO:Copying training dataset
2025-01-19 14:12:10,469:INFO:Defining folds
2025-01-19 14:12:10,470:INFO:Declaring metric variables
2025-01-19 14:12:10,480:INFO:Importing untrained model
2025-01-19 14:12:10,488:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 14:12:10,503:INFO:Starting cross validation
2025-01-19 14:12:10,505:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:10,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,944:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,945:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,952:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,958:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,965:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,971:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:10,984:INFO:Calculating mean and std
2025-01-19 14:12:10,989:INFO:Creating metrics dataframe
2025-01-19 14:12:10,998:INFO:Uploading results into container
2025-01-19 14:12:11,000:INFO:Uploading model into container now
2025-01-19 14:12:11,001:INFO:_master_model_container: 21
2025-01-19 14:12:11,001:INFO:_display_container: 7
2025-01-19 14:12:11,003:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:12:11,004:INFO:create_model() successfully completed......................................
2025-01-19 14:12:11,113:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:11,113:INFO:Creating metrics dataframe
2025-01-19 14:12:11,125:INFO:Initializing Extra Trees Classifier
2025-01-19 14:12:11,125:INFO:Total runtime is 0.04087483088175456 minutes
2025-01-19 14:12:11,133:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:11,134:INFO:Initializing create_model()
2025-01-19 14:12:11,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D61B76D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:11,134:INFO:Checking exceptions
2025-01-19 14:12:11,135:INFO:Importing libraries
2025-01-19 14:12:11,135:INFO:Copying training dataset
2025-01-19 14:12:11,146:INFO:Defining folds
2025-01-19 14:12:11,147:INFO:Declaring metric variables
2025-01-19 14:12:11,158:INFO:Importing untrained model
2025-01-19 14:12:11,166:INFO:Extra Trees Classifier Imported successfully
2025-01-19 14:12:11,182:INFO:Starting cross validation
2025-01-19 14:12:11,184:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:11,757:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,758:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,766:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,775:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,778:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:11,808:INFO:Calculating mean and std
2025-01-19 14:12:11,814:INFO:Creating metrics dataframe
2025-01-19 14:12:11,826:INFO:Uploading results into container
2025-01-19 14:12:11,828:INFO:Uploading model into container now
2025-01-19 14:12:11,829:INFO:_master_model_container: 22
2025-01-19 14:12:11,829:INFO:_display_container: 7
2025-01-19 14:12:11,830:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 14:12:11,830:INFO:create_model() successfully completed......................................
2025-01-19 14:12:11,939:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:11,939:INFO:Creating metrics dataframe
2025-01-19 14:12:11,951:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 14:12:11,951:INFO:Total runtime is 0.054643245538075765 minutes
2025-01-19 14:12:11,958:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:11,959:INFO:Initializing create_model()
2025-01-19 14:12:11,960:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D61B76D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:11,960:INFO:Checking exceptions
2025-01-19 14:12:11,960:INFO:Importing libraries
2025-01-19 14:12:11,960:INFO:Copying training dataset
2025-01-19 14:12:11,971:INFO:Defining folds
2025-01-19 14:12:11,971:INFO:Declaring metric variables
2025-01-19 14:12:11,986:INFO:Importing untrained model
2025-01-19 14:12:11,996:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:12:12,013:INFO:Starting cross validation
2025-01-19 14:12:12,016:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:12,729:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,752:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,754:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,764:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,773:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,937:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:12,969:INFO:Calculating mean and std
2025-01-19 14:12:12,972:INFO:Creating metrics dataframe
2025-01-19 14:12:12,980:INFO:Uploading results into container
2025-01-19 14:12:12,981:INFO:Uploading model into container now
2025-01-19 14:12:12,981:INFO:_master_model_container: 23
2025-01-19 14:12:12,982:INFO:_display_container: 7
2025-01-19 14:12:12,984:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:12:12,984:INFO:create_model() successfully completed......................................
2025-01-19 14:12:13,204:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:13,204:INFO:Creating metrics dataframe
2025-01-19 14:12:13,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 14:12:13,266:INFO:Initializing create_model()
2025-01-19 14:12:13,266:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:13,266:INFO:Checking exceptions
2025-01-19 14:12:13,273:INFO:Importing libraries
2025-01-19 14:12:13,274:INFO:Copying training dataset
2025-01-19 14:12:13,285:INFO:Defining folds
2025-01-19 14:12:13,285:INFO:Declaring metric variables
2025-01-19 14:12:13,285:INFO:Importing untrained model
2025-01-19 14:12:13,285:INFO:Declaring custom model
2025-01-19 14:12:13,286:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 14:12:13,287:INFO:Cross validation set to False
2025-01-19 14:12:13,287:INFO:Fitting Model
2025-01-19 14:12:13,673:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:12:13,673:INFO:create_model() successfully completed......................................
2025-01-19 14:12:13,827:INFO:_master_model_container: 23
2025-01-19 14:12:13,828:INFO:_display_container: 7
2025-01-19 14:12:13,829:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 14:12:13,829:INFO:compare_models() successfully completed......................................
2025-01-19 14:12:13,866:INFO:Initializing tune_model()
2025-01-19 14:12:13,867:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>)
2025-01-19 14:12:13,867:INFO:Checking exceptions
2025-01-19 14:12:13,928:INFO:Copying training dataset
2025-01-19 14:12:13,948:INFO:Checking base model
2025-01-19 14:12:13,948:INFO:Base model : Logistic Regression
2025-01-19 14:12:13,960:INFO:Declaring metric variables
2025-01-19 14:12:13,985:INFO:Defining Hyperparameters
2025-01-19 14:12:14,165:INFO:Tuning with n_jobs=-1
2025-01-19 14:12:14,165:INFO:Initializing RandomizedSearchCV
2025-01-19 14:12:17,388:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:17,406:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:17,523:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:17,657:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,096:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,142:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,389:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,732:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,778:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,903:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:18,960:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,312:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,528:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,948:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:19,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,106:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,498:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,507:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,639:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:20,664:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,040:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,169:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,187:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,578:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,701:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:21,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:22,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:22,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:22,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:23,501:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:23,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:23,651:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:23,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:25,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:25,696:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:25,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:25,957:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,801:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:26,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,192:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,193:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:27,841:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,115:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,585:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,799:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:28,899:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,180:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,529:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,700:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:29,979:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:30,187:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:30,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:30,455:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:30,677:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:30,874:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:31,177:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:31,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:31,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:31,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:32,239:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:32,438:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:32,519:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-19 14:12:32,521:INFO:Hyperparameter search completed
2025-01-19 14:12:32,521:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:32,524:INFO:Initializing create_model()
2025-01-19 14:12:32,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D6667D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-19 14:12:32,526:INFO:Checking exceptions
2025-01-19 14:12:32,526:INFO:Importing libraries
2025-01-19 14:12:32,526:INFO:Copying training dataset
2025-01-19 14:12:32,553:INFO:Defining folds
2025-01-19 14:12:32,553:INFO:Declaring metric variables
2025-01-19 14:12:32,567:INFO:Importing untrained model
2025-01-19 14:12:32,567:INFO:Declaring custom model
2025-01-19 14:12:32,584:INFO:Logistic Regression Imported successfully
2025-01-19 14:12:32,611:INFO:Starting cross validation
2025-01-19 14:12:32,614:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:33,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:33,406:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:33,433:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,459:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:33,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:33,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,480:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,619:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,655:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,671:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,712:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:33,722:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,449:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:34,506:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:34,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,517:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:34,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,595:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,605:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,619:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,625:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,633:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,634:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,643:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:34,652:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,301:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:35,359:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:35,369:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,379:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,387:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,418:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,434:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:35,451:INFO:Calculating mean and std
2025-01-19 14:12:35,455:INFO:Creating metrics dataframe
2025-01-19 14:12:35,472:INFO:Finalizing model
2025-01-19 14:12:36,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:36,422:INFO:Uploading results into container
2025-01-19 14:12:36,423:INFO:Uploading model into container now
2025-01-19 14:12:36,424:INFO:_master_model_container: 24
2025-01-19 14:12:36,424:INFO:_display_container: 8
2025-01-19 14:12:36,425:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:12:36,425:INFO:create_model() successfully completed......................................
2025-01-19 14:12:36,604:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:36,604:INFO:choose_better activated
2025-01-19 14:12:36,612:INFO:SubProcess create_model() called ==================================
2025-01-19 14:12:36,613:INFO:Initializing create_model()
2025-01-19 14:12:36,614:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:12:36,614:INFO:Checking exceptions
2025-01-19 14:12:36,617:INFO:Importing libraries
2025-01-19 14:12:36,617:INFO:Copying training dataset
2025-01-19 14:12:36,632:INFO:Defining folds
2025-01-19 14:12:36,632:INFO:Declaring metric variables
2025-01-19 14:12:36,632:INFO:Importing untrained model
2025-01-19 14:12:36,633:INFO:Declaring custom model
2025-01-19 14:12:36,635:INFO:Logistic Regression Imported successfully
2025-01-19 14:12:36,635:INFO:Starting cross validation
2025-01-19 14:12:36,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:12:37,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:37,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:37,709:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:37,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,717:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,718:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:37,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,785:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,822:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,828:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:37,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:38,467:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:38,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,518:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,526:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:38,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,544:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,551:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:38,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,650:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,656:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:38,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:39,203:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:39,292:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,293:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:12:39,336:INFO:Calculating mean and std
2025-01-19 14:12:39,337:INFO:Creating metrics dataframe
2025-01-19 14:12:39,341:INFO:Finalizing model
2025-01-19 14:12:40,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 14:12:40,701:INFO:Uploading results into container
2025-01-19 14:12:40,702:INFO:Uploading model into container now
2025-01-19 14:12:40,702:INFO:_master_model_container: 25
2025-01-19 14:12:40,703:INFO:_display_container: 9
2025-01-19 14:12:40,704:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:12:40,704:INFO:create_model() successfully completed......................................
2025-01-19 14:12:40,855:INFO:SubProcess create_model() end ==================================
2025-01-19 14:12:40,856:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-19 14:12:40,857:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-19 14:12:40,857:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-19 14:12:40,857:INFO:choose_better completed
2025-01-19 14:12:40,886:INFO:_master_model_container: 25
2025-01-19 14:12:40,887:INFO:_display_container: 8
2025-01-19 14:12:40,887:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 14:12:40,889:INFO:tune_model() successfully completed......................................
2025-01-19 14:12:41,087:INFO:Initializing tune_model()
2025-01-19 14:12:41,088:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>)
2025-01-19 14:12:41,089:INFO:Checking exceptions
2025-01-19 14:12:41,173:INFO:Copying training dataset
2025-01-19 14:12:41,224:INFO:Checking base model
2025-01-19 14:12:41,224:INFO:Base model : Random Forest Classifier
2025-01-19 14:12:41,278:INFO:Declaring metric variables
2025-01-19 14:12:41,299:INFO:Defining Hyperparameters
2025-01-19 14:12:41,576:INFO:Tuning with n_jobs=-1
2025-01-19 14:12:41,576:INFO:Initializing RandomizedSearchCV
2025-01-19 14:13:13,430:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-19 14:13:13,433:INFO:Hyperparameter search completed
2025-01-19 14:13:13,433:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:13,437:INFO:Initializing create_model()
2025-01-19 14:13:13,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C6EB49A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-19 14:13:13,438:INFO:Checking exceptions
2025-01-19 14:13:13,439:INFO:Importing libraries
2025-01-19 14:13:13,439:INFO:Copying training dataset
2025-01-19 14:13:13,458:INFO:Defining folds
2025-01-19 14:13:13,458:INFO:Declaring metric variables
2025-01-19 14:13:13,466:INFO:Importing untrained model
2025-01-19 14:13:13,466:INFO:Declaring custom model
2025-01-19 14:13:13,486:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:13:13,514:INFO:Starting cross validation
2025-01-19 14:13:13,518:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:14,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:14,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:14,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:14,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:14,947:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:14,947:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,054:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,069:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,241:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,248:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:15,256:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,042:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,049:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,056:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,152:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,165:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,176:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,255:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,797:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:16,814:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,153:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,232:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,235:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,238:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:17,255:INFO:Calculating mean and std
2025-01-19 14:13:17,261:INFO:Creating metrics dataframe
2025-01-19 14:13:17,271:INFO:Finalizing model
2025-01-19 14:13:17,984:INFO:Uploading results into container
2025-01-19 14:13:17,986:INFO:Uploading model into container now
2025-01-19 14:13:17,987:INFO:_master_model_container: 26
2025-01-19 14:13:17,989:INFO:_display_container: 9
2025-01-19 14:13:17,990:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 14:13:17,990:INFO:create_model() successfully completed......................................
2025-01-19 14:13:18,105:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:18,105:INFO:choose_better activated
2025-01-19 14:13:18,110:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:18,111:INFO:Initializing create_model()
2025-01-19 14:13:18,111:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:13:18,112:INFO:Checking exceptions
2025-01-19 14:13:18,114:INFO:Importing libraries
2025-01-19 14:13:18,114:INFO:Copying training dataset
2025-01-19 14:13:18,127:INFO:Defining folds
2025-01-19 14:13:18,127:INFO:Declaring metric variables
2025-01-19 14:13:18,127:INFO:Importing untrained model
2025-01-19 14:13:18,127:INFO:Declaring custom model
2025-01-19 14:13:18,129:INFO:Random Forest Classifier Imported successfully
2025-01-19 14:13:18,129:INFO:Starting cross validation
2025-01-19 14:13:18,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:18,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,833:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,838:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,848:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,868:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:18,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,378:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,387:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,393:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,822:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,837:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,837:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,854:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:19,864:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,516:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,638:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,687:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,694:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,704:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:20,733:INFO:Calculating mean and std
2025-01-19 14:13:20,734:INFO:Creating metrics dataframe
2025-01-19 14:13:20,739:INFO:Finalizing model
2025-01-19 14:13:21,148:INFO:Uploading results into container
2025-01-19 14:13:21,150:INFO:Uploading model into container now
2025-01-19 14:13:21,151:INFO:_master_model_container: 27
2025-01-19 14:13:21,151:INFO:_display_container: 10
2025-01-19 14:13:21,152:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 14:13:21,152:INFO:create_model() successfully completed......................................
2025-01-19 14:13:21,268:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:21,269:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-19 14:13:21,270:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-19 14:13:21,271:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-19 14:13:21,272:INFO:choose_better completed
2025-01-19 14:13:21,294:INFO:_master_model_container: 27
2025-01-19 14:13:21,294:INFO:_display_container: 9
2025-01-19 14:13:21,295:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 14:13:21,295:INFO:tune_model() successfully completed......................................
2025-01-19 14:13:21,455:INFO:Initializing ensemble_model()
2025-01-19 14:13:21,456:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:13:21,456:INFO:Checking exceptions
2025-01-19 14:13:21,523:INFO:Importing libraries
2025-01-19 14:13:21,523:INFO:Copying training dataset
2025-01-19 14:13:21,524:INFO:Checking base model
2025-01-19 14:13:21,524:INFO:Base model : Decision Tree Classifier
2025-01-19 14:13:21,561:INFO:Importing untrained ensembler
2025-01-19 14:13:21,561:INFO:Ensemble method set to Bagging
2025-01-19 14:13:21,562:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:21,566:INFO:Initializing create_model()
2025-01-19 14:13:21,566:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C6EB49A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:13:21,566:INFO:Checking exceptions
2025-01-19 14:13:21,566:INFO:Importing libraries
2025-01-19 14:13:21,567:INFO:Copying training dataset
2025-01-19 14:13:21,595:INFO:Defining folds
2025-01-19 14:13:21,596:INFO:Declaring metric variables
2025-01-19 14:13:21,614:INFO:Importing untrained model
2025-01-19 14:13:21,615:INFO:Declaring custom model
2025-01-19 14:13:21,636:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:13:21,668:INFO:Starting cross validation
2025-01-19 14:13:21,672:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:22,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,088:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,137:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,419:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,422:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,427:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,430:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,452:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,453:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,457:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,468:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,632:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:22,654:INFO:Calculating mean and std
2025-01-19 14:13:22,657:INFO:Creating metrics dataframe
2025-01-19 14:13:22,675:INFO:Finalizing model
2025-01-19 14:13:22,797:INFO:Uploading results into container
2025-01-19 14:13:22,798:INFO:Uploading model into container now
2025-01-19 14:13:22,799:INFO:_master_model_container: 28
2025-01-19 14:13:22,799:INFO:_display_container: 10
2025-01-19 14:13:22,801:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 14:13:22,802:INFO:create_model() successfully completed......................................
2025-01-19 14:13:22,916:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:22,935:INFO:_master_model_container: 28
2025-01-19 14:13:22,935:INFO:_display_container: 10
2025-01-19 14:13:22,936:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 14:13:22,936:INFO:ensemble_model() successfully completed......................................
2025-01-19 14:13:23,083:INFO:Initializing ensemble_model()
2025-01-19 14:13:23,083:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:13:23,084:INFO:Checking exceptions
2025-01-19 14:13:23,195:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,235:INFO:Importing libraries
2025-01-19 14:13:23,236:INFO:Copying training dataset
2025-01-19 14:13:23,238:INFO:Checking base model
2025-01-19 14:13:23,239:INFO:Base model : Decision Tree Classifier
2025-01-19 14:13:23,272:INFO:Importing untrained ensembler
2025-01-19 14:13:23,274:INFO:Ensemble method set to Boosting
2025-01-19 14:13:23,274:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:23,277:INFO:Initializing create_model()
2025-01-19 14:13:23,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D65013D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:13:23,277:INFO:Checking exceptions
2025-01-19 14:13:23,278:INFO:Importing libraries
2025-01-19 14:13:23,278:INFO:Copying training dataset
2025-01-19 14:13:23,294:INFO:Defining folds
2025-01-19 14:13:23,295:INFO:Declaring metric variables
2025-01-19 14:13:23,307:INFO:Importing untrained model
2025-01-19 14:13:23,307:INFO:Declaring custom model
2025-01-19 14:13:23,343:INFO:Decision Tree Classifier Imported successfully
2025-01-19 14:13:23,363:INFO:Starting cross validation
2025-01-19 14:13:23,365:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:23,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,544:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,548:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,586:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,592:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,614:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,621:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,626:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,628:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,629:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,707:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,729:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,736:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,787:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,797:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,814:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,821:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,869:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,880:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:23,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,937:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,942:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:23,962:INFO:Calculating mean and std
2025-01-19 14:13:23,967:INFO:Creating metrics dataframe
2025-01-19 14:13:23,982:INFO:Finalizing model
2025-01-19 14:13:24,033:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:24,054:INFO:Uploading results into container
2025-01-19 14:13:24,060:INFO:Uploading model into container now
2025-01-19 14:13:24,061:INFO:_master_model_container: 29
2025-01-19 14:13:24,062:INFO:_display_container: 11
2025-01-19 14:13:24,063:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 14:13:24,063:INFO:create_model() successfully completed......................................
2025-01-19 14:13:24,259:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:24,297:INFO:_master_model_container: 29
2025-01-19 14:13:24,297:INFO:_display_container: 11
2025-01-19 14:13:24,301:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 14:13:24,301:INFO:ensemble_model() successfully completed......................................
2025-01-19 14:13:24,542:INFO:Initializing blend_models()
2025-01-19 14:13:24,542:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:13:24,543:INFO:Checking exceptions
2025-01-19 14:13:24,611:INFO:Importing libraries
2025-01-19 14:13:24,612:INFO:Copying training dataset
2025-01-19 14:13:24,657:INFO:Getting model names
2025-01-19 14:13:24,684:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:24,746:INFO:Initializing create_model()
2025-01-19 14:13:24,746:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C6E87BE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:13:24,746:INFO:Checking exceptions
2025-01-19 14:13:24,746:INFO:Importing libraries
2025-01-19 14:13:24,746:INFO:Copying training dataset
2025-01-19 14:13:24,805:INFO:Defining folds
2025-01-19 14:13:24,805:INFO:Declaring metric variables
2025-01-19 14:13:24,854:INFO:Importing untrained model
2025-01-19 14:13:24,855:INFO:Declaring custom model
2025-01-19 14:13:24,869:INFO:Voting Classifier Imported successfully
2025-01-19 14:13:24,934:INFO:Starting cross validation
2025-01-19 14:13:24,937:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:25,066:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:25,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:25,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:25,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:26,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,163:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,165:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,173:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,175:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,252:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,262:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,291:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,296:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:26,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:26,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:26,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:26,478:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:27,302:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,321:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,337:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,359:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,418:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,446:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:27,497:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:27,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:27,527:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,316:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,322:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,328:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:28,361:INFO:Calculating mean and std
2025-01-19 14:13:28,374:INFO:Creating metrics dataframe
2025-01-19 14:13:28,402:INFO:Finalizing model
2025-01-19 14:13:28,453:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:29,251:INFO:Uploading results into container
2025-01-19 14:13:29,254:INFO:Uploading model into container now
2025-01-19 14:13:29,255:INFO:_master_model_container: 30
2025-01-19 14:13:29,255:INFO:_display_container: 12
2025-01-19 14:13:29,269:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 14:13:29,269:INFO:create_model() successfully completed......................................
2025-01-19 14:13:29,374:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:29,395:INFO:_master_model_container: 30
2025-01-19 14:13:29,395:INFO:_display_container: 12
2025-01-19 14:13:29,403:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 14:13:29,404:INFO:blend_models() successfully completed......................................
2025-01-19 14:13:29,555:INFO:Initializing stack_models()
2025-01-19 14:13:29,555:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 14:13:29,555:INFO:Checking exceptions
2025-01-19 14:13:29,561:INFO:Defining meta model
2025-01-19 14:13:29,644:INFO:Getting model names
2025-01-19 14:13:29,646:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-19 14:13:29,667:INFO:SubProcess create_model() called ==================================
2025-01-19 14:13:29,736:INFO:Initializing create_model()
2025-01-19 14:13:29,737:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C0507700>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:13:29,737:INFO:Checking exceptions
2025-01-19 14:13:29,737:INFO:Importing libraries
2025-01-19 14:13:29,737:INFO:Copying training dataset
2025-01-19 14:13:29,784:INFO:Defining folds
2025-01-19 14:13:29,784:INFO:Declaring metric variables
2025-01-19 14:13:29,801:INFO:Importing untrained model
2025-01-19 14:13:29,801:INFO:Declaring custom model
2025-01-19 14:13:29,823:INFO:Stacking Classifier Imported successfully
2025-01-19 14:13:29,848:INFO:Starting cross validation
2025-01-19 14:13:29,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 14:13:30,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,761:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,776:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,783:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,809:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,811:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,844:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,888:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,918:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:30,924:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,002:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,004:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,051:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,079:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,118:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,130:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:31,132:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:36,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,294:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,301:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,316:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,331:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,334:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,338:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:36,553:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:36,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:36,939:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,946:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:36,953:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:37,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:37,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:37,737:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:37,738:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:37,951:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:37,988:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,054:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,084:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,085:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,219:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,462:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,515:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,532:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:38,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:39,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:39,606:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:39,732:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:39,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:39,796:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:44,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,168:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,379:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:44,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,606:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:44,748:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:44,765:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:45,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,382:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,406:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,501:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,515:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,551:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:45,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:45,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:45,644:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,134:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,141:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,351:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,356:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:13:49,375:INFO:Calculating mean and std
2025-01-19 14:13:49,378:INFO:Creating metrics dataframe
2025-01-19 14:13:49,392:INFO:Finalizing model
2025-01-19 14:13:49,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:50,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:50,488:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:50,500:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:50,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:50,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 14:13:54,211:INFO:Uploading results into container
2025-01-19 14:13:54,213:INFO:Uploading model into container now
2025-01-19 14:13:54,216:INFO:_master_model_container: 31
2025-01-19 14:13:54,217:INFO:_display_container: 13
2025-01-19 14:13:54,231:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 14:13:54,231:INFO:create_model() successfully completed......................................
2025-01-19 14:13:54,339:INFO:SubProcess create_model() end ==================================
2025-01-19 14:13:54,357:INFO:_master_model_container: 31
2025-01-19 14:13:54,357:INFO:_display_container: 13
2025-01-19 14:13:54,371:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 14:13:54,372:INFO:stack_models() successfully completed......................................
2025-01-19 14:13:54,520:INFO:Initializing plot_model()
2025-01-19 14:13:54,521:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:13:54,521:INFO:Checking exceptions
2025-01-19 14:13:54,618:INFO:Preloading libraries
2025-01-19 14:13:54,673:INFO:Copying training dataset
2025-01-19 14:13:54,674:INFO:Plot type: auc
2025-01-19 14:13:54,919:INFO:Fitting Model
2025-01-19 14:13:54,923:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:13:54,924:INFO:Scoring test/hold-out set
2025-01-19 14:13:55,485:INFO:Visual Rendered Successfully
2025-01-19 14:13:55,592:INFO:plot_model() successfully completed......................................
2025-01-19 14:13:55,657:INFO:Initializing plot_model()
2025-01-19 14:13:55,657:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:13:55,657:INFO:Checking exceptions
2025-01-19 14:13:55,742:INFO:Preloading libraries
2025-01-19 14:13:55,780:INFO:Copying training dataset
2025-01-19 14:13:55,780:INFO:Plot type: confusion_matrix
2025-01-19 14:13:56,001:INFO:Fitting Model
2025-01-19 14:13:56,001:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:13:56,002:INFO:Scoring test/hold-out set
2025-01-19 14:13:56,310:INFO:Visual Rendered Successfully
2025-01-19 14:13:56,492:INFO:plot_model() successfully completed......................................
2025-01-19 14:13:56,555:INFO:Initializing plot_model()
2025-01-19 14:13:56,556:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:13:56,556:INFO:Checking exceptions
2025-01-19 14:13:56,630:INFO:Preloading libraries
2025-01-19 14:13:56,675:INFO:Copying training dataset
2025-01-19 14:13:56,675:INFO:Plot type: feature
2025-01-19 14:13:56,676:WARNING:No coef_ found. Trying feature_importances_
2025-01-19 14:13:57,100:INFO:Visual Rendered Successfully
2025-01-19 14:13:57,206:INFO:plot_model() successfully completed......................................
2025-01-19 14:13:57,253:INFO:Initializing plot_model()
2025-01-19 14:13:57,254:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:13:57,254:INFO:Checking exceptions
2025-01-19 14:13:57,342:INFO:Preloading libraries
2025-01-19 14:13:57,370:INFO:Copying training dataset
2025-01-19 14:13:57,370:INFO:Plot type: boundary
2025-01-19 14:13:57,422:INFO:Fitting StandardScaler()
2025-01-19 14:13:57,427:INFO:Fitting PCA()
2025-01-19 14:13:57,487:INFO:Fitting Model
2025-01-19 14:14:00,209:INFO:Visual Rendered Successfully
2025-01-19 14:14:00,420:INFO:plot_model() successfully completed......................................
2025-01-19 14:14:00,465:INFO:Initializing plot_model()
2025-01-19 14:14:00,466:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:14:00,466:INFO:Checking exceptions
2025-01-19 14:14:00,568:INFO:Preloading libraries
2025-01-19 14:14:00,610:INFO:Copying training dataset
2025-01-19 14:14:00,610:INFO:Plot type: pr
2025-01-19 14:14:00,825:INFO:Fitting Model
2025-01-19 14:14:00,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:14:00,826:INFO:Scoring test/hold-out set
2025-01-19 14:14:01,390:INFO:Visual Rendered Successfully
2025-01-19 14:14:01,562:INFO:plot_model() successfully completed......................................
2025-01-19 14:14:01,634:INFO:Initializing plot_model()
2025-01-19 14:14:01,634:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:14:01,634:INFO:Checking exceptions
2025-01-19 14:14:01,716:INFO:Preloading libraries
2025-01-19 14:14:01,752:INFO:Copying training dataset
2025-01-19 14:14:01,752:INFO:Plot type: class_report
2025-01-19 14:14:02,014:INFO:Fitting Model
2025-01-19 14:14:02,014:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 14:14:02,015:INFO:Scoring test/hold-out set
2025-01-19 14:14:02,520:INFO:Visual Rendered Successfully
2025-01-19 14:14:02,632:INFO:plot_model() successfully completed......................................
2025-01-19 14:14:02,674:INFO:Initializing evaluate_model()
2025-01-19 14:14:02,674:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 14:14:02,726:INFO:Initializing plot_model()
2025-01-19 14:14:02,727:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 14:14:02,727:INFO:Checking exceptions
2025-01-19 14:14:02,848:INFO:Preloading libraries
2025-01-19 14:14:02,894:INFO:Copying training dataset
2025-01-19 14:14:02,895:INFO:Plot type: pipeline
2025-01-19 14:14:03,223:INFO:Visual Rendered Successfully
2025-01-19 14:14:03,435:INFO:plot_model() successfully completed......................................
2025-01-19 14:14:03,479:INFO:Initializing create_model()
2025-01-19 14:14:03,479:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:14:03,480:INFO:Checking exceptions
2025-01-19 14:14:03,531:INFO:Importing libraries
2025-01-19 14:14:03,532:INFO:Copying training dataset
2025-01-19 14:14:03,564:INFO:Defining folds
2025-01-19 14:14:03,565:INFO:Declaring metric variables
2025-01-19 14:14:03,586:INFO:Importing untrained model
2025-01-19 14:14:03,606:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 14:14:03,615:INFO:Cross validation set to False
2025-01-19 14:14:03,616:INFO:Fitting Model
2025-01-19 14:14:03,806:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 14:14:03,807:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000732 seconds.
2025-01-19 14:14:03,807:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-01-19 14:14:03,807:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 14:14:03,808:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 14:14:03,809:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 14:14:03,809:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 14:14:03,832:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,839:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,847:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,850:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,855:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,857:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,858:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,863:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,864:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,870:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,873:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,876:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,886:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,887:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,889:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,892:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,894:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,897:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,904:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,909:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,921:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,958:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,983:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,985:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:03,999:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,004:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,010:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,022:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,035:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,042:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,046:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,049:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,055:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,068:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,073:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,093:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,096:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,105:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,111:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,140:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 14:14:04,215:INFO:Initializing predict_model()
2025-01-19 14:14:04,216:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238C02D28B0>)
2025-01-19 14:14:04,216:INFO:Checking exceptions
2025-01-19 14:14:04,216:INFO:Preloading libraries
2025-01-19 14:14:04,329:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:04,342:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:04,356:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:04,544:INFO:_display_container: 14
2025-01-19 14:14:04,547:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 14:14:04,549:INFO:create_model() successfully completed......................................
2025-01-19 14:14:04,799:INFO:Initializing interpret_model()
2025-01-19 14:14:04,799:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>)
2025-01-19 14:14:04,799:INFO:Checking exceptions
2025-01-19 14:14:04,799:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 14:14:07,027:INFO:plot type: summary
2025-01-19 14:14:07,027:INFO:Creating TreeExplainer
2025-01-19 14:14:07,218:INFO:Compiling shap values
2025-01-19 14:14:07,346:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-19 14:14:08,658:INFO:Visual Rendered Successfully
2025-01-19 14:14:08,658:INFO:interpret_model() successfully completed......................................
2025-01-19 14:14:08,834:INFO:Initializing automl()
2025-01-19 14:14:08,835:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-01-19 14:14:08,835:INFO:Model Selection Basis : CV Results on Training set
2025-01-19 14:14:08,835:INFO:Checking model 0
2025-01-19 14:14:08,836:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-01-19 14:14:08,837:INFO:Checking model 1
2025-01-19 14:14:08,838:INFO:Checking model 2
2025-01-19 14:14:08,839:INFO:Checking model 3
2025-01-19 14:14:08,840:INFO:Checking model 4
2025-01-19 14:14:08,841:INFO:Checking model 5
2025-01-19 14:14:08,842:INFO:Checking model 6
2025-01-19 14:14:08,842:INFO:Checking model 7
2025-01-19 14:14:08,843:INFO:Checking model 8
2025-01-19 14:14:08,844:INFO:Checking model 9
2025-01-19 14:14:08,844:INFO:Checking model 10
2025-01-19 14:14:08,845:INFO:Checking model 11
2025-01-19 14:14:08,846:INFO:Checking model 12
2025-01-19 14:14:08,846:INFO:Checking model 13
2025-01-19 14:14:08,847:INFO:Checking model 14
2025-01-19 14:14:08,847:INFO:Checking model 15
2025-01-19 14:14:08,848:INFO:Checking model 17
2025-01-19 14:14:08,849:INFO:Checking model 23
2025-01-19 14:14:08,850:INFO:Checking model 24
2025-01-19 14:14:08,850:INFO:Checking model 25
2025-01-19 14:14:08,851:INFO:Checking model 26
2025-01-19 14:14:08,852:INFO:Checking model 27
2025-01-19 14:14:08,853:INFO:Checking model 28
2025-01-19 14:14:08,856:INFO:Checking model 29
2025-01-19 14:14:08,857:INFO:Checking model 30
2025-01-19 14:14:08,859:INFO:Initializing create_model()
2025-01-19 14:14:08,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 14:14:08,859:INFO:Checking exceptions
2025-01-19 14:14:08,864:INFO:Importing libraries
2025-01-19 14:14:08,864:INFO:Copying training dataset
2025-01-19 14:14:08,897:INFO:Defining folds
2025-01-19 14:14:08,897:INFO:Declaring metric variables
2025-01-19 14:14:08,902:INFO:Importing untrained model
2025-01-19 14:14:08,903:INFO:Declaring custom model
2025-01-19 14:14:08,905:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 14:14:08,912:INFO:Cross validation set to False
2025-01-19 14:14:08,913:INFO:Fitting Model
2025-01-19 14:14:08,967:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:14:08,967:INFO:create_model() successfully completed......................................
2025-01-19 14:14:09,211:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 14:14:09,212:INFO:automl() successfully completed......................................
2025-01-19 14:14:09,289:INFO:Initializing predict_model()
2025-01-19 14:14:09,290:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238DC36BF70>)
2025-01-19 14:14:09,290:INFO:Checking exceptions
2025-01-19 14:14:09,290:INFO:Preloading libraries
2025-01-19 14:14:09,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:09,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:09,529:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 14:14:09,741:INFO:Initializing predict_model()
2025-01-19 14:14:09,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238D63B04C0>)
2025-01-19 14:14:09,741:INFO:Checking exceptions
2025-01-19 14:14:09,742:INFO:Preloading libraries
2025-01-19 14:14:09,747:INFO:Set up data.
2025-01-19 14:14:09,763:INFO:Set up index.
2025-01-19 14:14:10,251:INFO:Initializing save_model()
2025-01-19 14:14:10,252:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=./saved_models/pycaret_best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-19 14:14:10,252:INFO:Adding model into prep_pipe
2025-01-19 14:14:10,314:INFO:./saved_models/pycaret_best-model.pkl saved in current working directory
2025-01-19 14:14:10,343:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-01-19 14:14:10,343:INFO:save_model() successfully completed......................................
2025-01-19 14:14:10,566:INFO:Initializing load_model()
2025-01-19 14:14:10,566:INFO:load_model(model_name=./saved_models/pycaret_best-model, platform=None, authentication=None, verbose=True)
2025-01-19 14:14:14,941:INFO:Initializing get_config()
2025-01-19 14:14:14,942:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, variable=X_train)
2025-01-19 14:14:14,942:INFO:Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
2025-01-19 14:14:14,945:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\pycaret_experiment.py:321: UserWarning: Variable: 'X_train' used to return the transformed values in PyCaret 2.x. From PyCaret 3.x, this will return the raw values. If you need the transformed values, call get_config with 'X_train_transformed' instead.
  warnings.warn(msg)  # print on screen

2025-01-19 14:14:14,972:INFO:Variable:  returned as       Id  WeekofPurchase  StoreID  PriceCH  PriceMM  DiscCH  DiscMM  \
584  585             264        7     1.86     2.13    0.37    0.00   
751  752             232        4     1.79     2.09    0.00    0.00   
462  463             228        7     1.69     1.69    0.00    0.00   
7      8             234        7     1.75     1.99    0.00    0.40   
161  162             269        4     1.99     2.09    0.10    0.00   
..   ...             ...      ...      ...      ...     ...     ...   
658  659             271        2     1.86     2.18    0.00    0.06   
390  391             236        2     1.75     1.99    0.00    0.00   
725  726             275        3     2.09     2.09    0.00    0.40   
51    52             249        4     1.99     2.23    0.00    0.00   
790  791             241        3     1.79     2.23    0.00    0.00   

     SpecialCH  SpecialMM   LoyalCH  SalePriceMM  SalePriceCH  PriceDiff  \
584          1          0  0.836160         2.13         1.49       0.64   
751          0          0  0.400000         2.09         1.79       0.30   
462          0          0  0.584000         1.69         1.69       0.00   
7            1          0  0.977746         1.59         1.75      -0.16   
161          0          0  0.978010         2.09         1.89       0.20   
..         ...        ...       ...          ...          ...        ...   
658          0          0  0.985493         2.12         1.86       0.26   
390          0          0  0.267737         1.99         1.75       0.24   
725          0          0  0.000014         1.69         2.09      -0.40   
51           0          0  0.742140         2.23         1.99       0.24   
790          0          0  0.500000         2.23         1.79       0.44   

    Store7  PctDiscMM  PctDiscCH  ListPriceDiff  STORE  
584    Yes   0.000000   0.198925           0.27      0  
751     No   0.000000   0.000000           0.30      4  
462    Yes   0.000000   0.000000           0.00      0  
7      Yes   0.201005   0.000000           0.24      0  
161     No   0.000000   0.050251           0.10      4  
..     ...        ...        ...            ...    ...  
658     No   0.027523   0.000000           0.32      2  
390     No   0.000000   0.000000           0.24      2  
725     No   0.191388   0.000000           0.00      3  
51      No   0.000000   0.000000           0.24      4  
790     No   0.000000   0.000000           0.44      3  

[749 rows x 18 columns]
2025-01-19 14:14:14,972:INFO:get_config() successfully completed......................................
2025-01-19 14:14:26,325:INFO:Initializing get_config()
2025-01-19 14:14:26,326:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, variable=seed)
2025-01-19 14:14:26,326:INFO:Variable:  returned as 123
2025-01-19 14:14:26,327:INFO:get_config() successfully completed......................................
2025-01-19 14:14:38,307:INFO:Initializing set_config()
2025-01-19 14:14:38,308:INFO:set_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, variable=seed, value=999, kwargs={})
2025-01-19 14:14:38,309:INFO:Global variable: seed updated to 999
2025-01-19 14:14:38,309:INFO:set_config() successfully completed......................................
2025-01-19 14:14:49,240:INFO:Initializing get_config()
2025-01-19 14:14:49,240:INFO:get_config(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, variable=seed)
2025-01-19 14:14:49,241:INFO:Variable:  returned as 999
2025-01-19 14:14:49,241:INFO:get_config() successfully completed......................................
2025-01-19 16:23:44,762:INFO:Initializing plot_model()
2025-01-19 16:23:44,764:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238BF1F4CA0>, system=True)
2025-01-19 16:23:44,764:INFO:Checking exceptions
2025-01-19 16:23:44,906:INFO:Preloading libraries
2025-01-19 16:23:44,965:INFO:Copying training dataset
2025-01-19 16:23:44,965:INFO:Plot type: parameter
2025-01-19 16:23:44,986:INFO:Visual Rendered Successfully
2025-01-19 16:23:45,617:INFO:plot_model() successfully completed......................................
2025-01-19 16:27:45,598:INFO:PyCaret ClassificationExperiment
2025-01-19 16:27:45,598:INFO:Logging name: juice1
2025-01-19 16:27:45,598:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-19 16:27:45,600:INFO:version 3.3.2
2025-01-19 16:27:45,600:INFO:Initializing setup()
2025-01-19 16:27:45,600:INFO:self.USI: 802f
2025-01-19 16:27:45,600:INFO:self._variable_keys: {'html_param', 'y_train', 'exp_name_log', 'memory', 'pipeline', '_available_plots', '_ml_usecase', 'logging_param', 'exp_id', 'fold_generator', 'n_jobs_param', 'fold_shuffle_param', 'fix_imbalance', 'fold_groups_param', 'log_plots_param', 'seed', 'USI', 'gpu_n_jobs_param', 'X_train', 'y', 'is_multiclass', 'data', 'idx', 'gpu_param', 'X_test', 'target_param', 'X', 'y_test'}
2025-01-19 16:27:45,600:INFO:Checking environment
2025-01-19 16:27:45,600:INFO:python_version: 3.9.0
2025-01-19 16:27:45,600:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 16:27:45,602:INFO:machine: AMD64
2025-01-19 16:27:45,603:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 16:27:45,603:INFO:Memory: svmem(total=8416788480, available=1922830336, percent=77.2, used=6493958144, free=1922830336)
2025-01-19 16:27:45,603:INFO:Physical Core: 2
2025-01-19 16:27:45,603:INFO:Logical Core: 4
2025-01-19 16:27:45,603:INFO:Checking libraries
2025-01-19 16:27:45,603:INFO:System:
2025-01-19 16:27:45,603:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 16:27:45,603:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 16:27:45,603:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 16:27:45,603:INFO:PyCaret required dependencies:
2025-01-19 16:27:45,603:INFO:                 pip: 24.2
2025-01-19 16:27:45,610:INFO:          setuptools: 75.1.0
2025-01-19 16:27:45,610:INFO:             pycaret: 3.3.2
2025-01-19 16:27:45,610:INFO:             IPython: 8.18.1
2025-01-19 16:27:45,610:INFO:          ipywidgets: 8.1.5
2025-01-19 16:27:45,610:INFO:                tqdm: 4.67.1
2025-01-19 16:27:45,610:INFO:               numpy: 1.26.4
2025-01-19 16:27:45,610:INFO:              pandas: 2.1.4
2025-01-19 16:27:45,610:INFO:              jinja2: 3.1.5
2025-01-19 16:27:45,610:INFO:               scipy: 1.11.4
2025-01-19 16:27:45,610:INFO:              joblib: 1.3.2
2025-01-19 16:27:45,610:INFO:             sklearn: 1.4.2
2025-01-19 16:27:45,610:INFO:                pyod: 2.0.3
2025-01-19 16:27:45,610:INFO:            imblearn: 0.12.4
2025-01-19 16:27:45,615:INFO:   category_encoders: 2.6.4
2025-01-19 16:27:45,615:INFO:            lightgbm: 4.5.0
2025-01-19 16:27:45,615:INFO:               numba: 0.60.0
2025-01-19 16:27:45,615:INFO:            requests: 2.32.3
2025-01-19 16:27:45,615:INFO:          matplotlib: 3.7.5
2025-01-19 16:27:45,615:INFO:          scikitplot: 0.3.7
2025-01-19 16:27:45,615:INFO:         yellowbrick: 1.5
2025-01-19 16:27:45,615:INFO:              plotly: 5.24.1
2025-01-19 16:27:45,615:INFO:    plotly-resampler: Not installed
2025-01-19 16:27:45,615:INFO:             kaleido: 0.2.1
2025-01-19 16:27:45,615:INFO:           schemdraw: 0.15
2025-01-19 16:27:45,615:INFO:         statsmodels: 0.14.4
2025-01-19 16:27:45,615:INFO:              sktime: 0.26.0
2025-01-19 16:27:45,618:INFO:               tbats: 1.1.3
2025-01-19 16:27:45,618:INFO:            pmdarima: 2.0.4
2025-01-19 16:27:45,620:INFO:              psutil: 6.1.1
2025-01-19 16:27:45,620:INFO:          markupsafe: 3.0.2
2025-01-19 16:27:45,620:INFO:             pickle5: Not installed
2025-01-19 16:27:45,620:INFO:         cloudpickle: 3.1.1
2025-01-19 16:27:45,620:INFO:         deprecation: 2.1.0
2025-01-19 16:27:45,620:INFO:              xxhash: 3.5.0
2025-01-19 16:27:45,620:INFO:           wurlitzer: Not installed
2025-01-19 16:27:45,620:INFO:PyCaret optional dependencies:
2025-01-19 16:27:45,620:INFO:                shap: 0.46.0
2025-01-19 16:27:45,620:INFO:           interpret: Not installed
2025-01-19 16:27:45,620:INFO:                umap: Not installed
2025-01-19 16:27:45,620:INFO:     ydata_profiling: Not installed
2025-01-19 16:27:45,620:INFO:  explainerdashboard: Not installed
2025-01-19 16:27:45,620:INFO:             autoviz: Not installed
2025-01-19 16:27:45,620:INFO:           fairlearn: Not installed
2025-01-19 16:27:45,620:INFO:          deepchecks: Not installed
2025-01-19 16:27:45,620:INFO:             xgboost: Not installed
2025-01-19 16:27:45,620:INFO:            catboost: Not installed
2025-01-19 16:27:45,620:INFO:              kmodes: Not installed
2025-01-19 16:27:45,620:INFO:             mlxtend: Not installed
2025-01-19 16:27:45,620:INFO:       statsforecast: Not installed
2025-01-19 16:27:45,620:INFO:        tune_sklearn: Not installed
2025-01-19 16:27:45,620:INFO:                 ray: Not installed
2025-01-19 16:27:45,620:INFO:            hyperopt: Not installed
2025-01-19 16:27:45,620:INFO:              optuna: Not installed
2025-01-19 16:27:45,620:INFO:               skopt: Not installed
2025-01-19 16:27:45,620:INFO:              mlflow: 2.19.0
2025-01-19 16:27:45,625:INFO:              gradio: Not installed
2025-01-19 16:27:45,625:INFO:             fastapi: Not installed
2025-01-19 16:27:45,625:INFO:             uvicorn: Not installed
2025-01-19 16:27:45,625:INFO:              m2cgen: Not installed
2025-01-19 16:27:45,626:INFO:           evidently: Not installed
2025-01-19 16:27:45,626:INFO:               fugue: Not installed
2025-01-19 16:27:45,626:INFO:           streamlit: Not installed
2025-01-19 16:27:45,626:INFO:             prophet: Not installed
2025-01-19 16:27:45,626:INFO:None
2025-01-19 16:27:45,626:INFO:Set up data.
2025-01-19 16:27:45,683:INFO:Set up folding strategy.
2025-01-19 16:27:45,683:INFO:Set up train/test split.
2025-01-19 16:27:45,779:INFO:Set up index.
2025-01-19 16:27:45,781:INFO:Assigning column types.
2025-01-19 16:27:45,835:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 16:27:45,998:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,001:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,077:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,173:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,179:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,256:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,256:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 16:27:46,395:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,501:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,501:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,674:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-19 16:27:46,849:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,855:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:46,858:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-19 16:27:47,130:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:47,130:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:47,350:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:47,350:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:47,355:INFO:Preparing preprocessing pipeline...
2025-01-19 16:27:47,363:INFO:Set up label encoding.
2025-01-19 16:27:47,363:INFO:Set up simple imputation.
2025-01-19 16:27:47,430:INFO:Set up encoding of ordinal features.
2025-01-19 16:27:47,440:INFO:Set up encoding of categorical features.
2025-01-19 16:27:47,669:INFO:Finished creating preprocessing pipeline.
2025-01-19 16:27:47,715:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-19 16:27:47,715:INFO:Creating final display dataframe.
2025-01-19 16:27:48,001:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             802f
2025-01-19 16:27:48,894:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:48,894:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:49,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:49,500:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:27:49,513:INFO:setup() successfully completed in 3.93s...............
2025-01-19 16:27:49,605:INFO:Initializing compare_models()
2025-01-19 16:27:49,605:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 16:27:49,605:INFO:Checking exceptions
2025-01-19 16:27:49,635:INFO:Preparing display monitor
2025-01-19 16:27:49,857:INFO:Initializing Logistic Regression
2025-01-19 16:27:49,858:INFO:Total runtime is 0.0 minutes
2025-01-19 16:27:49,950:INFO:SubProcess create_model() called ==================================
2025-01-19 16:27:49,953:INFO:Initializing create_model()
2025-01-19 16:27:49,953:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:27:49,953:INFO:Checking exceptions
2025-01-19 16:27:49,953:INFO:Importing libraries
2025-01-19 16:27:49,953:INFO:Copying training dataset
2025-01-19 16:27:49,980:INFO:Defining folds
2025-01-19 16:27:49,980:INFO:Declaring metric variables
2025-01-19 16:27:50,173:INFO:Importing untrained model
2025-01-19 16:27:50,189:INFO:Logistic Regression Imported successfully
2025-01-19 16:27:50,325:INFO:Starting cross validation
2025-01-19 16:27:50,330:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:06,726:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:06,881:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:06,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:06,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:07,413:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:07,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:07,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:07,663:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:07,947:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:08,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,592:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:08,850:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,906:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:08,997:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:09,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:09,386:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:09,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:09,745:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:10,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:10,726:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,741:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:28:10,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,852:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,863:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:10,895:INFO:Calculating mean and std
2025-01-19 16:28:10,898:INFO:Creating metrics dataframe
2025-01-19 16:28:10,913:INFO:Uploading results into container
2025-01-19 16:28:10,913:INFO:Uploading model into container now
2025-01-19 16:28:10,913:INFO:_master_model_container: 1
2025-01-19 16:28:10,913:INFO:_display_container: 2
2025-01-19 16:28:10,919:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 16:28:10,920:INFO:create_model() successfully completed......................................
2025-01-19 16:28:11,323:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:11,323:INFO:Creating metrics dataframe
2025-01-19 16:28:11,348:INFO:Initializing K Neighbors Classifier
2025-01-19 16:28:11,350:INFO:Total runtime is 0.35821343660354615 minutes
2025-01-19 16:28:11,363:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:11,363:INFO:Initializing create_model()
2025-01-19 16:28:11,366:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:11,367:INFO:Checking exceptions
2025-01-19 16:28:11,367:INFO:Importing libraries
2025-01-19 16:28:11,367:INFO:Copying training dataset
2025-01-19 16:28:11,392:INFO:Defining folds
2025-01-19 16:28:11,392:INFO:Declaring metric variables
2025-01-19 16:28:11,410:INFO:Importing untrained model
2025-01-19 16:28:11,433:INFO:K Neighbors Classifier Imported successfully
2025-01-19 16:28:11,466:INFO:Starting cross validation
2025-01-19 16:28:11,470:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:12,325:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,327:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,363:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,377:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,686:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,692:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,698:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,715:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,717:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,723:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,730:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,741:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,754:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:12,762:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,035:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,053:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:13,082:INFO:Calculating mean and std
2025-01-19 16:28:13,085:INFO:Creating metrics dataframe
2025-01-19 16:28:13,100:INFO:Uploading results into container
2025-01-19 16:28:13,102:INFO:Uploading model into container now
2025-01-19 16:28:13,102:INFO:_master_model_container: 2
2025-01-19 16:28:13,105:INFO:_display_container: 2
2025-01-19 16:28:13,106:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-19 16:28:13,107:INFO:create_model() successfully completed......................................
2025-01-19 16:28:13,533:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:13,533:INFO:Creating metrics dataframe
2025-01-19 16:28:13,575:INFO:Initializing Naive Bayes
2025-01-19 16:28:13,575:INFO:Total runtime is 0.39529791673024495 minutes
2025-01-19 16:28:13,594:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:13,594:INFO:Initializing create_model()
2025-01-19 16:28:13,594:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:13,594:INFO:Checking exceptions
2025-01-19 16:28:13,594:INFO:Importing libraries
2025-01-19 16:28:13,594:INFO:Copying training dataset
2025-01-19 16:28:13,653:INFO:Defining folds
2025-01-19 16:28:13,653:INFO:Declaring metric variables
2025-01-19 16:28:13,682:INFO:Importing untrained model
2025-01-19 16:28:13,707:INFO:Naive Bayes Imported successfully
2025-01-19 16:28:13,782:INFO:Starting cross validation
2025-01-19 16:28:13,782:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:14,374:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,556:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,660:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,703:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,704:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,717:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:14,717:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,164:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,175:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,180:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,164:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,207:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,215:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,220:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,237:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,566:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:15,630:INFO:Calculating mean and std
2025-01-19 16:28:15,635:INFO:Creating metrics dataframe
2025-01-19 16:28:15,640:INFO:Uploading results into container
2025-01-19 16:28:15,645:INFO:Uploading model into container now
2025-01-19 16:28:15,645:INFO:_master_model_container: 3
2025-01-19 16:28:15,647:INFO:_display_container: 2
2025-01-19 16:28:15,647:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-19 16:28:15,647:INFO:create_model() successfully completed......................................
2025-01-19 16:28:15,879:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:15,879:INFO:Creating metrics dataframe
2025-01-19 16:28:15,915:INFO:Initializing Decision Tree Classifier
2025-01-19 16:28:15,917:INFO:Total runtime is 0.4343277931213379 minutes
2025-01-19 16:28:15,936:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:15,945:INFO:Initializing create_model()
2025-01-19 16:28:15,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:15,945:INFO:Checking exceptions
2025-01-19 16:28:15,945:INFO:Importing libraries
2025-01-19 16:28:15,945:INFO:Copying training dataset
2025-01-19 16:28:15,980:INFO:Defining folds
2025-01-19 16:28:15,982:INFO:Declaring metric variables
2025-01-19 16:28:16,008:INFO:Importing untrained model
2025-01-19 16:28:16,023:INFO:Decision Tree Classifier Imported successfully
2025-01-19 16:28:16,077:INFO:Starting cross validation
2025-01-19 16:28:16,080:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:16,540:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,573:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,585:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,661:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:16,665:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,225:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,276:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,276:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,287:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,297:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,301:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,315:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,628:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,650:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,672:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,688:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:17,731:INFO:Calculating mean and std
2025-01-19 16:28:17,737:INFO:Creating metrics dataframe
2025-01-19 16:28:17,750:INFO:Uploading results into container
2025-01-19 16:28:17,754:INFO:Uploading model into container now
2025-01-19 16:28:17,754:INFO:_master_model_container: 4
2025-01-19 16:28:17,754:INFO:_display_container: 2
2025-01-19 16:28:17,754:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 16:28:17,754:INFO:create_model() successfully completed......................................
2025-01-19 16:28:18,320:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:18,360:INFO:Creating metrics dataframe
2025-01-19 16:28:18,490:INFO:Initializing SVM - Linear Kernel
2025-01-19 16:28:18,490:INFO:Total runtime is 0.4772254784901937 minutes
2025-01-19 16:28:18,509:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:18,509:INFO:Initializing create_model()
2025-01-19 16:28:18,511:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:18,511:INFO:Checking exceptions
2025-01-19 16:28:18,511:INFO:Importing libraries
2025-01-19 16:28:18,511:INFO:Copying training dataset
2025-01-19 16:28:18,572:INFO:Defining folds
2025-01-19 16:28:18,576:INFO:Declaring metric variables
2025-01-19 16:28:18,595:INFO:Importing untrained model
2025-01-19 16:28:18,628:INFO:SVM - Linear Kernel Imported successfully
2025-01-19 16:28:18,720:INFO:Starting cross validation
2025-01-19 16:28:18,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:19,255:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,270:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,278:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:19,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,355:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,361:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:19,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:19,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,413:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,430:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:19,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,785:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,805:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,810:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:19,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,820:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,883:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,896:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,989:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:19,998:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,000:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,073:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:20,091:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,320:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:20,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,358:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:20,485:INFO:Calculating mean and std
2025-01-19 16:28:20,491:INFO:Creating metrics dataframe
2025-01-19 16:28:20,500:INFO:Uploading results into container
2025-01-19 16:28:20,500:INFO:Uploading model into container now
2025-01-19 16:28:20,505:INFO:_master_model_container: 5
2025-01-19 16:28:20,505:INFO:_display_container: 2
2025-01-19 16:28:20,505:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-19 16:28:20,509:INFO:create_model() successfully completed......................................
2025-01-19 16:28:20,833:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:20,833:INFO:Creating metrics dataframe
2025-01-19 16:28:20,874:INFO:Initializing Ridge Classifier
2025-01-19 16:28:20,874:INFO:Total runtime is 0.5169438640276591 minutes
2025-01-19 16:28:20,940:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:20,940:INFO:Initializing create_model()
2025-01-19 16:28:20,940:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:20,940:INFO:Checking exceptions
2025-01-19 16:28:20,945:INFO:Importing libraries
2025-01-19 16:28:20,945:INFO:Copying training dataset
2025-01-19 16:28:21,013:INFO:Defining folds
2025-01-19 16:28:21,013:INFO:Declaring metric variables
2025-01-19 16:28:21,030:INFO:Importing untrained model
2025-01-19 16:28:21,050:INFO:Ridge Classifier Imported successfully
2025-01-19 16:28:21,152:INFO:Starting cross validation
2025-01-19 16:28:21,160:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:21,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,654:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,670:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,670:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,678:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,687:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:21,705:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,120:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,130:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,180:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,183:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,430:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,448:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:22,490:INFO:Calculating mean and std
2025-01-19 16:28:22,493:INFO:Creating metrics dataframe
2025-01-19 16:28:22,501:INFO:Uploading results into container
2025-01-19 16:28:22,501:INFO:Uploading model into container now
2025-01-19 16:28:22,501:INFO:_master_model_container: 6
2025-01-19 16:28:22,501:INFO:_display_container: 2
2025-01-19 16:28:22,504:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-19 16:28:22,505:INFO:create_model() successfully completed......................................
2025-01-19 16:28:22,754:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:22,755:INFO:Creating metrics dataframe
2025-01-19 16:28:22,781:INFO:Initializing Random Forest Classifier
2025-01-19 16:28:22,781:INFO:Total runtime is 0.5487395962079367 minutes
2025-01-19 16:28:22,794:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:22,794:INFO:Initializing create_model()
2025-01-19 16:28:22,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:22,799:INFO:Checking exceptions
2025-01-19 16:28:22,799:INFO:Importing libraries
2025-01-19 16:28:22,799:INFO:Copying training dataset
2025-01-19 16:28:22,824:INFO:Defining folds
2025-01-19 16:28:22,824:INFO:Declaring metric variables
2025-01-19 16:28:22,840:INFO:Importing untrained model
2025-01-19 16:28:22,855:INFO:Random Forest Classifier Imported successfully
2025-01-19 16:28:22,883:INFO:Starting cross validation
2025-01-19 16:28:22,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:24,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,875:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,945:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,956:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:24,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:25,000:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:25,035:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,041:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,065:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,082:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,353:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:27,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,428:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,444:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,496:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:28,545:INFO:Calculating mean and std
2025-01-19 16:28:28,552:INFO:Creating metrics dataframe
2025-01-19 16:28:28,560:INFO:Uploading results into container
2025-01-19 16:28:28,560:INFO:Uploading model into container now
2025-01-19 16:28:28,565:INFO:_master_model_container: 7
2025-01-19 16:28:28,565:INFO:_display_container: 2
2025-01-19 16:28:28,566:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 16:28:28,566:INFO:create_model() successfully completed......................................
2025-01-19 16:28:28,875:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:28,877:INFO:Creating metrics dataframe
2025-01-19 16:28:28,916:INFO:Initializing Quadratic Discriminant Analysis
2025-01-19 16:28:28,916:INFO:Total runtime is 0.6509878317515057 minutes
2025-01-19 16:28:28,930:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:28,930:INFO:Initializing create_model()
2025-01-19 16:28:28,930:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:28,935:INFO:Checking exceptions
2025-01-19 16:28:28,935:INFO:Importing libraries
2025-01-19 16:28:28,935:INFO:Copying training dataset
2025-01-19 16:28:28,980:INFO:Defining folds
2025-01-19 16:28:28,984:INFO:Declaring metric variables
2025-01-19 16:28:29,006:INFO:Importing untrained model
2025-01-19 16:28:29,033:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-19 16:28:29,069:INFO:Starting cross validation
2025-01-19 16:28:29,086:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:29,316:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,336:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,340:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,370:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,523:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,523:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,530:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,549:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:29,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,895:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:29,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:30,041:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,070:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,108:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,125:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,133:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,146:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,150:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,485:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:30,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-19 16:28:30,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,595:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,602:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,620:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:30,652:INFO:Calculating mean and std
2025-01-19 16:28:30,652:INFO:Creating metrics dataframe
2025-01-19 16:28:30,676:INFO:Uploading results into container
2025-01-19 16:28:30,677:INFO:Uploading model into container now
2025-01-19 16:28:30,677:INFO:_master_model_container: 8
2025-01-19 16:28:30,677:INFO:_display_container: 2
2025-01-19 16:28:30,680:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-19 16:28:30,680:INFO:create_model() successfully completed......................................
2025-01-19 16:28:30,955:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:30,955:INFO:Creating metrics dataframe
2025-01-19 16:28:30,996:INFO:Initializing Ada Boost Classifier
2025-01-19 16:28:30,996:INFO:Total runtime is 0.6856550494829815 minutes
2025-01-19 16:28:31,012:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:31,012:INFO:Initializing create_model()
2025-01-19 16:28:31,012:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:31,012:INFO:Checking exceptions
2025-01-19 16:28:31,012:INFO:Importing libraries
2025-01-19 16:28:31,017:INFO:Copying training dataset
2025-01-19 16:28:31,050:INFO:Defining folds
2025-01-19 16:28:31,050:INFO:Declaring metric variables
2025-01-19 16:28:31,065:INFO:Importing untrained model
2025-01-19 16:28:31,094:INFO:Ada Boost Classifier Imported successfully
2025-01-19 16:28:31,127:INFO:Starting cross validation
2025-01-19 16:28:31,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:31,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:31,380:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:31,420:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:31,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:32,292:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,333:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,342:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,382:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,400:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:32,575:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:32,585:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:32,733:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:32,850:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:33,691:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,697:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,706:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,707:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,722:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,893:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,905:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:33,999:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,143:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:34,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:28:34,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,950:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:34,970:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:35,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:35,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:35,035:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:35,062:INFO:Calculating mean and std
2025-01-19 16:28:35,065:INFO:Creating metrics dataframe
2025-01-19 16:28:35,078:INFO:Uploading results into container
2025-01-19 16:28:35,080:INFO:Uploading model into container now
2025-01-19 16:28:35,080:INFO:_master_model_container: 9
2025-01-19 16:28:35,080:INFO:_display_container: 2
2025-01-19 16:28:35,085:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 16:28:35,085:INFO:create_model() successfully completed......................................
2025-01-19 16:28:35,356:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:35,356:INFO:Creating metrics dataframe
2025-01-19 16:28:35,400:INFO:Initializing Gradient Boosting Classifier
2025-01-19 16:28:35,400:INFO:Total runtime is 0.7590577681859336 minutes
2025-01-19 16:28:35,423:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:35,423:INFO:Initializing create_model()
2025-01-19 16:28:35,423:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:35,423:INFO:Checking exceptions
2025-01-19 16:28:35,423:INFO:Importing libraries
2025-01-19 16:28:35,423:INFO:Copying training dataset
2025-01-19 16:28:35,523:INFO:Defining folds
2025-01-19 16:28:35,523:INFO:Declaring metric variables
2025-01-19 16:28:35,555:INFO:Importing untrained model
2025-01-19 16:28:35,633:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 16:28:35,685:INFO:Starting cross validation
2025-01-19 16:28:35,701:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:37,710:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,752:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,880:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,891:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:37,916:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,183:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,195:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,263:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,363:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,486:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,511:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,520:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:39,534:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,503:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,516:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,530:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:40,652:INFO:Calculating mean and std
2025-01-19 16:28:40,655:INFO:Creating metrics dataframe
2025-01-19 16:28:40,660:INFO:Uploading results into container
2025-01-19 16:28:40,665:INFO:Uploading model into container now
2025-01-19 16:28:40,665:INFO:_master_model_container: 10
2025-01-19 16:28:40,668:INFO:_display_container: 2
2025-01-19 16:28:40,670:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 16:28:40,675:INFO:create_model() successfully completed......................................
2025-01-19 16:28:41,014:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:41,014:INFO:Creating metrics dataframe
2025-01-19 16:28:41,063:INFO:Initializing Linear Discriminant Analysis
2025-01-19 16:28:41,063:INFO:Total runtime is 0.8534384131431582 minutes
2025-01-19 16:28:41,075:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:41,078:INFO:Initializing create_model()
2025-01-19 16:28:41,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:41,078:INFO:Checking exceptions
2025-01-19 16:28:41,080:INFO:Importing libraries
2025-01-19 16:28:41,080:INFO:Copying training dataset
2025-01-19 16:28:41,115:INFO:Defining folds
2025-01-19 16:28:41,115:INFO:Declaring metric variables
2025-01-19 16:28:41,143:INFO:Importing untrained model
2025-01-19 16:28:41,155:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 16:28:41,197:INFO:Starting cross validation
2025-01-19 16:28:41,200:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:41,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,552:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,553:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,575:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,580:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,603:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,615:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,802:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,825:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,835:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,841:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,843:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,865:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:41,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,048:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:42,075:INFO:Calculating mean and std
2025-01-19 16:28:42,075:INFO:Creating metrics dataframe
2025-01-19 16:28:42,082:INFO:Uploading results into container
2025-01-19 16:28:42,082:INFO:Uploading model into container now
2025-01-19 16:28:42,090:INFO:_master_model_container: 11
2025-01-19 16:28:42,090:INFO:_display_container: 2
2025-01-19 16:28:42,090:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 16:28:42,090:INFO:create_model() successfully completed......................................
2025-01-19 16:28:42,339:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:42,339:INFO:Creating metrics dataframe
2025-01-19 16:28:42,370:INFO:Initializing Extra Trees Classifier
2025-01-19 16:28:42,370:INFO:Total runtime is 0.8752241055170698 minutes
2025-01-19 16:28:42,386:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:42,387:INFO:Initializing create_model()
2025-01-19 16:28:42,387:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:42,387:INFO:Checking exceptions
2025-01-19 16:28:42,387:INFO:Importing libraries
2025-01-19 16:28:42,387:INFO:Copying training dataset
2025-01-19 16:28:42,410:INFO:Defining folds
2025-01-19 16:28:42,410:INFO:Declaring metric variables
2025-01-19 16:28:42,427:INFO:Importing untrained model
2025-01-19 16:28:42,440:INFO:Extra Trees Classifier Imported successfully
2025-01-19 16:28:42,465:INFO:Starting cross validation
2025-01-19 16:28:42,472:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:44,062:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,070:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,078:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,080:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,093:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,103:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,145:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,515:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,526:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:44,533:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,085:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,091:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,163:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,170:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,216:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,225:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,305:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,865:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:46,873:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,536:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,552:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,566:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,580:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,595:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:47,627:INFO:Calculating mean and std
2025-01-19 16:28:47,630:INFO:Creating metrics dataframe
2025-01-19 16:28:47,645:INFO:Uploading results into container
2025-01-19 16:28:47,645:INFO:Uploading model into container now
2025-01-19 16:28:47,645:INFO:_master_model_container: 12
2025-01-19 16:28:47,645:INFO:_display_container: 2
2025-01-19 16:28:47,651:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 16:28:47,651:INFO:create_model() successfully completed......................................
2025-01-19 16:28:48,160:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:48,160:INFO:Creating metrics dataframe
2025-01-19 16:28:48,223:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 16:28:48,223:INFO:Total runtime is 0.9727613488833112 minutes
2025-01-19 16:28:48,250:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:48,250:INFO:Initializing create_model()
2025-01-19 16:28:48,250:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:48,250:INFO:Checking exceptions
2025-01-19 16:28:48,250:INFO:Importing libraries
2025-01-19 16:28:48,250:INFO:Copying training dataset
2025-01-19 16:28:48,290:INFO:Defining folds
2025-01-19 16:28:48,290:INFO:Declaring metric variables
2025-01-19 16:28:48,327:INFO:Importing untrained model
2025-01-19 16:28:48,350:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:28:48,380:INFO:Starting cross validation
2025-01-19 16:28:48,385:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:53,830:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:53,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:53,874:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:53,957:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:53,972:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:53,985:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:54,120:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:54,130:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:54,147:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:55,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:55,480:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:55,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,423:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,423:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,435:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,443:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,448:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,481:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,710:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,720:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:57,724:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,167:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,174:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,194:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,200:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,210:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,231:INFO:Calculating mean and std
2025-01-19 16:28:58,231:INFO:Creating metrics dataframe
2025-01-19 16:28:58,240:INFO:Uploading results into container
2025-01-19 16:28:58,240:INFO:Uploading model into container now
2025-01-19 16:28:58,240:INFO:_master_model_container: 13
2025-01-19 16:28:58,240:INFO:_display_container: 2
2025-01-19 16:28:58,240:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:28:58,240:INFO:create_model() successfully completed......................................
2025-01-19 16:28:58,460:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:58,463:INFO:Creating metrics dataframe
2025-01-19 16:28:58,507:INFO:Initializing Dummy Classifier
2025-01-19 16:28:58,507:INFO:Total runtime is 1.1441599686940513 minutes
2025-01-19 16:28:58,521:INFO:SubProcess create_model() called ==================================
2025-01-19 16:28:58,521:INFO:Initializing create_model()
2025-01-19 16:28:58,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC564AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:58,523:INFO:Checking exceptions
2025-01-19 16:28:58,523:INFO:Importing libraries
2025-01-19 16:28:58,523:INFO:Copying training dataset
2025-01-19 16:28:58,553:INFO:Defining folds
2025-01-19 16:28:58,553:INFO:Declaring metric variables
2025-01-19 16:28:58,570:INFO:Importing untrained model
2025-01-19 16:28:58,586:INFO:Dummy Classifier Imported successfully
2025-01-19 16:28:58,610:INFO:Starting cross validation
2025-01-19 16:28:58,614:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:28:58,827:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,852:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:58,853:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,853:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,853:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,861:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,866:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,866:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:58,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:58,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,880:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:58,894:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:58,900:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,095:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,121:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,125:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,125:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,132:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,133:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,133:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,279:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,281:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,286:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,290:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,290:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,293:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-19 16:28:59,300:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:28:59,311:INFO:Calculating mean and std
2025-01-19 16:28:59,315:INFO:Creating metrics dataframe
2025-01-19 16:28:59,324:INFO:Uploading results into container
2025-01-19 16:28:59,327:INFO:Uploading model into container now
2025-01-19 16:28:59,330:INFO:_master_model_container: 14
2025-01-19 16:28:59,330:INFO:_display_container: 2
2025-01-19 16:28:59,330:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-19 16:28:59,330:INFO:create_model() successfully completed......................................
2025-01-19 16:28:59,514:INFO:SubProcess create_model() end ==================================
2025-01-19 16:28:59,514:INFO:Creating metrics dataframe
2025-01-19 16:28:59,559:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 16:28:59,625:INFO:Initializing create_model()
2025-01-19 16:28:59,627:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:28:59,627:INFO:Checking exceptions
2025-01-19 16:28:59,635:INFO:Importing libraries
2025-01-19 16:28:59,635:INFO:Copying training dataset
2025-01-19 16:28:59,661:INFO:Defining folds
2025-01-19 16:28:59,662:INFO:Declaring metric variables
2025-01-19 16:28:59,662:INFO:Importing untrained model
2025-01-19 16:28:59,662:INFO:Declaring custom model
2025-01-19 16:28:59,664:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 16:28:59,666:INFO:Cross validation set to False
2025-01-19 16:28:59,666:INFO:Fitting Model
2025-01-19 16:28:59,781:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 16:28:59,781:INFO:create_model() successfully completed......................................
2025-01-19 16:29:00,114:INFO:_master_model_container: 14
2025-01-19 16:29:00,114:INFO:_display_container: 2
2025-01-19 16:29:00,114:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 16:29:00,114:INFO:compare_models() successfully completed......................................
2025-01-19 16:29:01,022:INFO:Initializing create_model()
2025-01-19 16:29:01,022:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:01,022:INFO:Checking exceptions
2025-01-19 16:29:01,104:INFO:Importing libraries
2025-01-19 16:29:01,104:INFO:Copying training dataset
2025-01-19 16:29:01,153:INFO:Defining folds
2025-01-19 16:29:01,153:INFO:Declaring metric variables
2025-01-19 16:29:01,192:INFO:Importing untrained model
2025-01-19 16:29:01,220:INFO:Logistic Regression Imported successfully
2025-01-19 16:29:01,252:INFO:Starting cross validation
2025-01-19 16:29:01,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:02,167:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:02,195:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:02,231:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:02,240:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:02,264:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,275:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,285:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,313:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,330:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,341:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,350:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,375:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,391:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,404:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:02,984:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,074:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,172:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,181:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,190:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,195:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,198:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,206:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,206:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,214:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,593:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:03,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,650:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,658:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,682:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,682:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,690:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:03,708:INFO:Calculating mean and std
2025-01-19 16:29:03,710:INFO:Creating metrics dataframe
2025-01-19 16:29:03,724:INFO:Finalizing model
2025-01-19 16:29:05,185:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:05,229:INFO:Uploading results into container
2025-01-19 16:29:05,231:INFO:Uploading model into container now
2025-01-19 16:29:05,325:INFO:_master_model_container: 15
2025-01-19 16:29:05,325:INFO:_display_container: 3
2025-01-19 16:29:05,329:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 16:29:05,331:INFO:create_model() successfully completed......................................
2025-01-19 16:29:05,955:INFO:Initializing create_model()
2025-01-19 16:29:05,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:05,958:INFO:Checking exceptions
2025-01-19 16:29:06,066:INFO:Importing libraries
2025-01-19 16:29:06,066:INFO:Copying training dataset
2025-01-19 16:29:06,136:INFO:Defining folds
2025-01-19 16:29:06,136:INFO:Declaring metric variables
2025-01-19 16:29:06,170:INFO:Importing untrained model
2025-01-19 16:29:06,189:INFO:Decision Tree Classifier Imported successfully
2025-01-19 16:29:06,235:INFO:Starting cross validation
2025-01-19 16:29:06,244:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:06,885:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:06,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:06,950:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,030:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,045:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,052:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,061:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,144:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,265:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,277:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,545:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,554:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,595:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,605:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,643:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,695:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,958:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,973:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:07,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:08,005:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:08,047:INFO:Calculating mean and std
2025-01-19 16:29:08,053:INFO:Creating metrics dataframe
2025-01-19 16:29:08,072:INFO:Finalizing model
2025-01-19 16:29:08,243:INFO:Uploading results into container
2025-01-19 16:29:08,252:INFO:Uploading model into container now
2025-01-19 16:29:08,345:INFO:_master_model_container: 16
2025-01-19 16:29:08,345:INFO:_display_container: 4
2025-01-19 16:29:08,352:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-19 16:29:08,352:INFO:create_model() successfully completed......................................
2025-01-19 16:29:08,937:INFO:Initializing create_model()
2025-01-19 16:29:08,937:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:08,937:INFO:Checking exceptions
2025-01-19 16:29:09,043:INFO:Importing libraries
2025-01-19 16:29:09,043:INFO:Copying training dataset
2025-01-19 16:29:09,073:INFO:Defining folds
2025-01-19 16:29:09,073:INFO:Declaring metric variables
2025-01-19 16:29:09,104:INFO:Importing untrained model
2025-01-19 16:29:09,130:INFO:Random Forest Classifier Imported successfully
2025-01-19 16:29:09,187:INFO:Starting cross validation
2025-01-19 16:29:09,194:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:11,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,103:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,120:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,120:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,130:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,135:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,155:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,267:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,280:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:11,310:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:13,220:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:13,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:13,245:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:13,277:INFO:Calculating mean and std
2025-01-19 16:29:13,282:INFO:Creating metrics dataframe
2025-01-19 16:29:13,305:INFO:Finalizing model
2025-01-19 16:29:14,177:INFO:Uploading results into container
2025-01-19 16:29:14,180:INFO:Uploading model into container now
2025-01-19 16:29:14,212:INFO:_master_model_container: 17
2025-01-19 16:29:14,212:INFO:_display_container: 5
2025-01-19 16:29:14,213:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 16:29:14,215:INFO:create_model() successfully completed......................................
2025-01-19 16:29:14,467:INFO:Initializing create_model()
2025-01-19 16:29:14,469:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:14,469:INFO:Checking exceptions
2025-01-19 16:29:14,610:INFO:Importing libraries
2025-01-19 16:29:14,611:INFO:Copying training dataset
2025-01-19 16:29:14,660:INFO:Defining folds
2025-01-19 16:29:14,660:INFO:Declaring metric variables
2025-01-19 16:29:14,686:INFO:Importing untrained model
2025-01-19 16:29:14,720:INFO:Linear Discriminant Analysis Imported successfully
2025-01-19 16:29:14,765:INFO:Starting cross validation
2025-01-19 16:29:14,792:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:15,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,324:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,335:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,345:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,349:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,385:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,400:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,425:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,504:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,750:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,755:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,764:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,790:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,798:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,826:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,856:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,865:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:15,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,085:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,092:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,110:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,131:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:16,158:INFO:Calculating mean and std
2025-01-19 16:29:16,163:INFO:Creating metrics dataframe
2025-01-19 16:29:16,191:INFO:Finalizing model
2025-01-19 16:29:16,351:INFO:Uploading results into container
2025-01-19 16:29:16,356:INFO:Uploading model into container now
2025-01-19 16:29:16,400:INFO:_master_model_container: 18
2025-01-19 16:29:16,403:INFO:_display_container: 6
2025-01-19 16:29:16,403:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-19 16:29:16,403:INFO:create_model() successfully completed......................................
2025-01-19 16:29:16,705:INFO:gpu_param set to False
2025-01-19 16:29:17,211:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,211:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,412:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,571:INFO:gpu_param set to False
2025-01-19 16:29:17,803:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,990:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:17,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:18,078:INFO:gpu_param set to False
2025-01-19 16:29:18,570:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:18,576:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:18,828:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:18,830:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 16:29:18,833:INFO:Initializing compare_models()
2025-01-19 16:29:18,833:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-19 16:29:18,833:INFO:Checking exceptions
2025-01-19 16:29:18,840:INFO:Preparing display monitor
2025-01-19 16:29:19,106:INFO:Initializing Random Forest Classifier
2025-01-19 16:29:19,106:INFO:Total runtime is 0.0 minutes
2025-01-19 16:29:19,136:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:19,137:INFO:Initializing create_model()
2025-01-19 16:29:19,137:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC6F15E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:19,139:INFO:Checking exceptions
2025-01-19 16:29:19,139:INFO:Importing libraries
2025-01-19 16:29:19,139:INFO:Copying training dataset
2025-01-19 16:29:19,186:INFO:Defining folds
2025-01-19 16:29:19,187:INFO:Declaring metric variables
2025-01-19 16:29:19,220:INFO:Importing untrained model
2025-01-19 16:29:19,245:INFO:Random Forest Classifier Imported successfully
2025-01-19 16:29:19,282:INFO:Starting cross validation
2025-01-19 16:29:19,283:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:20,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,901:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,910:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,915:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,925:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,934:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,945:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:20,980:INFO:Calculating mean and std
2025-01-19 16:29:20,983:INFO:Creating metrics dataframe
2025-01-19 16:29:21,020:INFO:Uploading results into container
2025-01-19 16:29:21,031:INFO:Uploading model into container now
2025-01-19 16:29:21,031:INFO:_master_model_container: 19
2025-01-19 16:29:21,034:INFO:_display_container: 7
2025-01-19 16:29:21,045:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 16:29:21,045:INFO:create_model() successfully completed......................................
2025-01-19 16:29:21,417:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:21,417:INFO:Creating metrics dataframe
2025-01-19 16:29:21,442:INFO:Initializing Ada Boost Classifier
2025-01-19 16:29:21,442:INFO:Total runtime is 0.0389261802037557 minutes
2025-01-19 16:29:21,462:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:21,462:INFO:Initializing create_model()
2025-01-19 16:29:21,462:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC6F15E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:21,462:INFO:Checking exceptions
2025-01-19 16:29:21,462:INFO:Importing libraries
2025-01-19 16:29:21,462:INFO:Copying training dataset
2025-01-19 16:29:21,492:INFO:Defining folds
2025-01-19 16:29:21,492:INFO:Declaring metric variables
2025-01-19 16:29:21,510:INFO:Importing untrained model
2025-01-19 16:29:21,533:INFO:Ada Boost Classifier Imported successfully
2025-01-19 16:29:21,590:INFO:Starting cross validation
2025-01-19 16:29:21,592:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:21,912:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:29:21,917:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:29:21,980:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:29:22,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,570:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,578:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,581:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,590:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,605:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:22,629:INFO:Calculating mean and std
2025-01-19 16:29:22,630:INFO:Creating metrics dataframe
2025-01-19 16:29:22,635:INFO:Uploading results into container
2025-01-19 16:29:22,635:INFO:Uploading model into container now
2025-01-19 16:29:22,637:INFO:_master_model_container: 20
2025-01-19 16:29:22,638:INFO:_display_container: 7
2025-01-19 16:29:22,640:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-19 16:29:22,640:INFO:create_model() successfully completed......................................
2025-01-19 16:29:22,924:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:22,926:INFO:Creating metrics dataframe
2025-01-19 16:29:22,953:INFO:Initializing Gradient Boosting Classifier
2025-01-19 16:29:22,953:INFO:Total runtime is 0.06411703824996948 minutes
2025-01-19 16:29:22,964:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:22,964:INFO:Initializing create_model()
2025-01-19 16:29:22,964:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC6F15E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:22,964:INFO:Checking exceptions
2025-01-19 16:29:22,964:INFO:Importing libraries
2025-01-19 16:29:22,971:INFO:Copying training dataset
2025-01-19 16:29:22,996:INFO:Defining folds
2025-01-19 16:29:22,996:INFO:Declaring metric variables
2025-01-19 16:29:23,010:INFO:Importing untrained model
2025-01-19 16:29:23,020:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 16:29:23,044:INFO:Starting cross validation
2025-01-19 16:29:23,050:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:23,845:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,855:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,861:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,869:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,869:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,887:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,894:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:23,920:INFO:Calculating mean and std
2025-01-19 16:29:23,924:INFO:Creating metrics dataframe
2025-01-19 16:29:23,931:INFO:Uploading results into container
2025-01-19 16:29:23,931:INFO:Uploading model into container now
2025-01-19 16:29:23,931:INFO:_master_model_container: 21
2025-01-19 16:29:23,931:INFO:_display_container: 7
2025-01-19 16:29:23,931:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 16:29:23,931:INFO:create_model() successfully completed......................................
2025-01-19 16:29:24,325:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:24,325:INFO:Creating metrics dataframe
2025-01-19 16:29:24,412:INFO:Initializing Extra Trees Classifier
2025-01-19 16:29:24,412:INFO:Total runtime is 0.0884380022684733 minutes
2025-01-19 16:29:24,428:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:24,428:INFO:Initializing create_model()
2025-01-19 16:29:24,428:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC6F15E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:24,468:INFO:Checking exceptions
2025-01-19 16:29:24,468:INFO:Importing libraries
2025-01-19 16:29:24,468:INFO:Copying training dataset
2025-01-19 16:29:24,566:INFO:Defining folds
2025-01-19 16:29:24,566:INFO:Declaring metric variables
2025-01-19 16:29:24,604:INFO:Importing untrained model
2025-01-19 16:29:24,620:INFO:Extra Trees Classifier Imported successfully
2025-01-19 16:29:24,647:INFO:Starting cross validation
2025-01-19 16:29:24,647:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:25,390:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,424:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,445:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,446:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,456:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,463:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,464:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:25,489:INFO:Calculating mean and std
2025-01-19 16:29:25,494:INFO:Creating metrics dataframe
2025-01-19 16:29:25,506:INFO:Uploading results into container
2025-01-19 16:29:25,514:INFO:Uploading model into container now
2025-01-19 16:29:25,522:INFO:_master_model_container: 22
2025-01-19 16:29:25,522:INFO:_display_container: 7
2025-01-19 16:29:25,522:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-19 16:29:25,522:INFO:create_model() successfully completed......................................
2025-01-19 16:29:25,824:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:25,824:INFO:Creating metrics dataframe
2025-01-19 16:29:25,848:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 16:29:25,853:INFO:Total runtime is 0.11244470675786336 minutes
2025-01-19 16:29:25,863:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:25,865:INFO:Initializing create_model()
2025-01-19 16:29:25,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC6F15E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:25,866:INFO:Checking exceptions
2025-01-19 16:29:25,866:INFO:Importing libraries
2025-01-19 16:29:25,866:INFO:Copying training dataset
2025-01-19 16:29:25,885:INFO:Defining folds
2025-01-19 16:29:25,887:INFO:Declaring metric variables
2025-01-19 16:29:25,901:INFO:Importing untrained model
2025-01-19 16:29:25,908:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:29:25,936:INFO:Starting cross validation
2025-01-19 16:29:25,937:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:26,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:26,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:26,915:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:26,930:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:26,940:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:26,948:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:27,021:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:27,043:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:27,072:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:27,113:INFO:Calculating mean and std
2025-01-19 16:29:27,113:INFO:Creating metrics dataframe
2025-01-19 16:29:27,128:INFO:Uploading results into container
2025-01-19 16:29:27,128:INFO:Uploading model into container now
2025-01-19 16:29:27,128:INFO:_master_model_container: 23
2025-01-19 16:29:27,128:INFO:_display_container: 7
2025-01-19 16:29:27,137:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:29:27,137:INFO:create_model() successfully completed......................................
2025-01-19 16:29:27,340:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:27,340:INFO:Creating metrics dataframe
2025-01-19 16:29:27,395:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 16:29:27,496:INFO:Initializing create_model()
2025-01-19 16:29:27,496:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:27,496:INFO:Checking exceptions
2025-01-19 16:29:27,520:INFO:Importing libraries
2025-01-19 16:29:27,520:INFO:Copying training dataset
2025-01-19 16:29:27,552:INFO:Defining folds
2025-01-19 16:29:27,552:INFO:Declaring metric variables
2025-01-19 16:29:27,552:INFO:Importing untrained model
2025-01-19 16:29:27,552:INFO:Declaring custom model
2025-01-19 16:29:27,552:INFO:Gradient Boosting Classifier Imported successfully
2025-01-19 16:29:27,552:INFO:Cross validation set to False
2025-01-19 16:29:27,552:INFO:Fitting Model
2025-01-19 16:29:28,276:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 16:29:28,277:INFO:create_model() successfully completed......................................
2025-01-19 16:29:28,559:INFO:_master_model_container: 23
2025-01-19 16:29:28,562:INFO:_display_container: 7
2025-01-19 16:29:28,562:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-19 16:29:28,562:INFO:compare_models() successfully completed......................................
2025-01-19 16:29:28,705:INFO:Initializing tune_model()
2025-01-19 16:29:28,705:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:29:28,705:INFO:Checking exceptions
2025-01-19 16:29:28,802:INFO:Copying training dataset
2025-01-19 16:29:28,906:INFO:Checking base model
2025-01-19 16:29:28,906:INFO:Base model : Logistic Regression
2025-01-19 16:29:28,925:INFO:Declaring metric variables
2025-01-19 16:29:28,980:INFO:Defining Hyperparameters
2025-01-19 16:29:29,377:INFO:Tuning with n_jobs=-1
2025-01-19 16:29:29,377:INFO:Initializing RandomizedSearchCV
2025-01-19 16:29:32,447:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:32,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:32,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:32,834:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:33,312:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:33,613:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:33,850:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:33,876:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:34,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:34,373:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:34,632:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:34,657:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:35,229:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:35,521:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:35,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:36,283:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:36,608:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:37,089:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:37,227:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:37,643:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:37,780:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:38,257:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:38,290:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:39,514:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:39,862:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:41,104:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:41,732:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:41,813:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:42,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:42,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:42,508:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:42,624:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:42,858:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:43,293:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:43,381:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:43,692:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:43,701:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:45,990:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:45,996:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:46,734:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:46,800:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:47,188:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:47,227:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:48,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:48,131:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:48,413:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:48,420:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:48,952:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:49,020:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:49,365:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:49,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:49,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:49,938:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:50,233:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:50,266:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:50,844:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:50,922:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:51,208:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:51,209:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:51,693:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:51,727:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:52,167:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:52,268:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:52,612:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:52,674:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:53,105:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:53,201:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:53,668:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:53,681:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:54,106:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:54,217:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:54,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:54,574:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:54,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:55,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:55,448:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:55,464:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:55,507:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-19 16:29:55,507:INFO:Hyperparameter search completed
2025-01-19 16:29:55,509:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:55,510:INFO:Initializing create_model()
2025-01-19 16:29:55,510:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D663C910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-19 16:29:55,512:INFO:Checking exceptions
2025-01-19 16:29:55,512:INFO:Importing libraries
2025-01-19 16:29:55,512:INFO:Copying training dataset
2025-01-19 16:29:55,539:INFO:Defining folds
2025-01-19 16:29:55,539:INFO:Declaring metric variables
2025-01-19 16:29:55,549:INFO:Importing untrained model
2025-01-19 16:29:55,550:INFO:Declaring custom model
2025-01-19 16:29:55,562:INFO:Logistic Regression Imported successfully
2025-01-19 16:29:55,581:INFO:Starting cross validation
2025-01-19 16:29:55,591:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:29:56,403:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:56,431:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:56,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:56,471:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:56,537:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,547:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,557:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,560:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,578:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,594:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,619:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:56,651:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,308:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:57,318:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:57,332:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:57,391:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,396:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,407:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,408:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,412:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,416:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,427:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,427:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,440:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,811:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:57,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:57,861:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,879:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,894:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,897:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,902:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:29:57,927:INFO:Calculating mean and std
2025-01-19 16:29:57,932:INFO:Creating metrics dataframe
2025-01-19 16:29:57,990:INFO:Finalizing model
2025-01-19 16:29:59,543:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:29:59,571:INFO:Uploading results into container
2025-01-19 16:29:59,571:INFO:Uploading model into container now
2025-01-19 16:29:59,576:INFO:_master_model_container: 24
2025-01-19 16:29:59,576:INFO:_display_container: 8
2025-01-19 16:29:59,578:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 16:29:59,578:INFO:create_model() successfully completed......................................
2025-01-19 16:29:59,778:INFO:SubProcess create_model() end ==================================
2025-01-19 16:29:59,778:INFO:choose_better activated
2025-01-19 16:29:59,787:INFO:SubProcess create_model() called ==================================
2025-01-19 16:29:59,789:INFO:Initializing create_model()
2025-01-19 16:29:59,790:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:29:59,790:INFO:Checking exceptions
2025-01-19 16:29:59,794:INFO:Importing libraries
2025-01-19 16:29:59,797:INFO:Copying training dataset
2025-01-19 16:29:59,810:INFO:Defining folds
2025-01-19 16:29:59,810:INFO:Declaring metric variables
2025-01-19 16:29:59,817:INFO:Importing untrained model
2025-01-19 16:29:59,817:INFO:Declaring custom model
2025-01-19 16:29:59,817:INFO:Logistic Regression Imported successfully
2025-01-19 16:29:59,821:INFO:Starting cross validation
2025-01-19 16:29:59,821:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:00,485:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:00,485:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:00,518:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:00,537:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:00,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,567:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,574:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,606:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,627:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,641:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:00,656:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,371:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:01,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:01,447:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:01,447:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,451:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:01,457:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,482:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,493:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,537:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,542:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,546:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:01,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:01,935:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:02,020:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,028:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,044:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,055:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:02,083:INFO:Calculating mean and std
2025-01-19 16:30:02,086:INFO:Creating metrics dataframe
2025-01-19 16:30:02,086:INFO:Finalizing model
2025-01-19 16:30:03,492:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-19 16:30:03,492:INFO:Uploading results into container
2025-01-19 16:30:03,496:INFO:Uploading model into container now
2025-01-19 16:30:03,496:INFO:_master_model_container: 25
2025-01-19 16:30:03,496:INFO:_display_container: 9
2025-01-19 16:30:03,496:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 16:30:03,496:INFO:create_model() successfully completed......................................
2025-01-19 16:30:03,687:INFO:SubProcess create_model() end ==================================
2025-01-19 16:30:03,690:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-19 16:30:03,692:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-19 16:30:03,692:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-19 16:30:03,692:INFO:choose_better completed
2025-01-19 16:30:03,752:INFO:_master_model_container: 25
2025-01-19 16:30:03,752:INFO:_display_container: 8
2025-01-19 16:30:03,752:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-19 16:30:03,752:INFO:tune_model() successfully completed......................................
2025-01-19 16:30:04,071:INFO:Initializing tune_model()
2025-01-19 16:30:04,077:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:30:04,077:INFO:Checking exceptions
2025-01-19 16:30:04,180:INFO:Copying training dataset
2025-01-19 16:30:04,201:INFO:Checking base model
2025-01-19 16:30:04,203:INFO:Base model : Random Forest Classifier
2025-01-19 16:30:04,219:INFO:Declaring metric variables
2025-01-19 16:30:04,235:INFO:Defining Hyperparameters
2025-01-19 16:30:04,627:INFO:Tuning with n_jobs=-1
2025-01-19 16:30:04,627:INFO:Initializing RandomizedSearchCV
2025-01-19 16:30:42,303:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-19 16:30:42,303:INFO:Hyperparameter search completed
2025-01-19 16:30:42,303:INFO:SubProcess create_model() called ==================================
2025-01-19 16:30:42,306:INFO:Initializing create_model()
2025-01-19 16:30:42,308:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D64A2880>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-19 16:30:42,308:INFO:Checking exceptions
2025-01-19 16:30:42,308:INFO:Importing libraries
2025-01-19 16:30:42,308:INFO:Copying training dataset
2025-01-19 16:30:42,333:INFO:Defining folds
2025-01-19 16:30:42,333:INFO:Declaring metric variables
2025-01-19 16:30:42,342:INFO:Importing untrained model
2025-01-19 16:30:42,342:INFO:Declaring custom model
2025-01-19 16:30:42,355:INFO:Random Forest Classifier Imported successfully
2025-01-19 16:30:42,377:INFO:Starting cross validation
2025-01-19 16:30:42,378:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:44,066:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,097:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,101:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,104:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,111:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,111:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,117:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,149:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:44,159:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,505:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,513:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,521:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,552:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,562:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,646:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,663:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,676:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,776:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:45,786:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,789:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,797:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,797:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,806:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,816:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:46,837:INFO:Calculating mean and std
2025-01-19 16:30:46,845:INFO:Creating metrics dataframe
2025-01-19 16:30:46,897:INFO:Finalizing model
2025-01-19 16:30:48,329:INFO:Uploading results into container
2025-01-19 16:30:48,329:INFO:Uploading model into container now
2025-01-19 16:30:48,337:INFO:_master_model_container: 26
2025-01-19 16:30:48,337:INFO:_display_container: 9
2025-01-19 16:30:48,338:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 16:30:48,338:INFO:create_model() successfully completed......................................
2025-01-19 16:30:48,608:INFO:SubProcess create_model() end ==================================
2025-01-19 16:30:48,608:INFO:choose_better activated
2025-01-19 16:30:48,620:INFO:SubProcess create_model() called ==================================
2025-01-19 16:30:48,627:INFO:Initializing create_model()
2025-01-19 16:30:48,627:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:30:48,627:INFO:Checking exceptions
2025-01-19 16:30:48,637:INFO:Importing libraries
2025-01-19 16:30:48,637:INFO:Copying training dataset
2025-01-19 16:30:48,672:INFO:Defining folds
2025-01-19 16:30:48,672:INFO:Declaring metric variables
2025-01-19 16:30:48,674:INFO:Importing untrained model
2025-01-19 16:30:48,674:INFO:Declaring custom model
2025-01-19 16:30:48,677:INFO:Random Forest Classifier Imported successfully
2025-01-19 16:30:48,681:INFO:Starting cross validation
2025-01-19 16:30:48,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:49,772:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,792:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,818:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,846:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,857:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,936:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,957:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,991:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:49,999:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,088:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,106:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,126:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,139:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,156:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,280:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,295:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,303:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,442:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,450:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:51,465:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,023:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,032:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,050:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,059:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:52,076:INFO:Calculating mean and std
2025-01-19 16:30:52,076:INFO:Creating metrics dataframe
2025-01-19 16:30:52,076:INFO:Finalizing model
2025-01-19 16:30:53,029:INFO:Uploading results into container
2025-01-19 16:30:53,033:INFO:Uploading model into container now
2025-01-19 16:30:53,033:INFO:_master_model_container: 27
2025-01-19 16:30:53,033:INFO:_display_container: 10
2025-01-19 16:30:53,037:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-19 16:30:53,037:INFO:create_model() successfully completed......................................
2025-01-19 16:30:53,347:INFO:SubProcess create_model() end ==================================
2025-01-19 16:30:53,352:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-19 16:30:53,352:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-19 16:30:53,356:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-19 16:30:53,356:INFO:choose_better completed
2025-01-19 16:30:53,431:INFO:_master_model_container: 27
2025-01-19 16:30:53,436:INFO:_display_container: 9
2025-01-19 16:30:53,441:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-19 16:30:53,441:INFO:tune_model() successfully completed......................................
2025-01-19 16:30:53,848:INFO:Initializing ensemble_model()
2025-01-19 16:30:53,848:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 16:30:53,848:INFO:Checking exceptions
2025-01-19 16:30:53,926:INFO:Importing libraries
2025-01-19 16:30:53,926:INFO:Copying training dataset
2025-01-19 16:30:53,931:INFO:Checking base model
2025-01-19 16:30:53,931:INFO:Base model : Decision Tree Classifier
2025-01-19 16:30:53,967:INFO:Importing untrained ensembler
2025-01-19 16:30:53,967:INFO:Ensemble method set to Bagging
2025-01-19 16:30:53,967:INFO:SubProcess create_model() called ==================================
2025-01-19 16:30:53,976:INFO:Initializing create_model()
2025-01-19 16:30:53,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238C6ED0070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:30:53,976:INFO:Checking exceptions
2025-01-19 16:30:53,976:INFO:Importing libraries
2025-01-19 16:30:53,981:INFO:Copying training dataset
2025-01-19 16:30:54,037:INFO:Defining folds
2025-01-19 16:30:54,038:INFO:Declaring metric variables
2025-01-19 16:30:54,052:INFO:Importing untrained model
2025-01-19 16:30:54,052:INFO:Declaring custom model
2025-01-19 16:30:54,068:INFO:Decision Tree Classifier Imported successfully
2025-01-19 16:30:54,107:INFO:Starting cross validation
2025-01-19 16:30:54,109:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:54,458:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,458:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,466:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,466:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,472:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,477:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,477:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,490:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,507:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,822:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,828:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,837:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,837:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,842:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,878:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:54,892:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,100:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,107:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:55,145:INFO:Calculating mean and std
2025-01-19 16:30:55,149:INFO:Creating metrics dataframe
2025-01-19 16:30:55,157:INFO:Finalizing model
2025-01-19 16:30:55,472:INFO:Uploading results into container
2025-01-19 16:30:55,472:INFO:Uploading model into container now
2025-01-19 16:30:55,475:INFO:_master_model_container: 28
2025-01-19 16:30:55,476:INFO:_display_container: 10
2025-01-19 16:30:55,480:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 16:30:55,480:INFO:create_model() successfully completed......................................
2025-01-19 16:30:55,661:INFO:SubProcess create_model() end ==================================
2025-01-19 16:30:55,711:INFO:_master_model_container: 28
2025-01-19 16:30:55,715:INFO:_display_container: 10
2025-01-19 16:30:55,718:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-19 16:30:55,718:INFO:ensemble_model() successfully completed......................................
2025-01-19 16:30:56,047:INFO:Initializing ensemble_model()
2025-01-19 16:30:56,047:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 16:30:56,052:INFO:Checking exceptions
2025-01-19 16:30:56,259:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:56,357:INFO:Importing libraries
2025-01-19 16:30:56,358:INFO:Copying training dataset
2025-01-19 16:30:56,358:INFO:Checking base model
2025-01-19 16:30:56,358:INFO:Base model : Decision Tree Classifier
2025-01-19 16:30:56,397:INFO:Importing untrained ensembler
2025-01-19 16:30:56,397:INFO:Ensemble method set to Boosting
2025-01-19 16:30:56,399:INFO:SubProcess create_model() called ==================================
2025-01-19 16:30:56,399:INFO:Initializing create_model()
2025-01-19 16:30:56,399:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DC4876A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:30:56,403:INFO:Checking exceptions
2025-01-19 16:30:56,403:INFO:Importing libraries
2025-01-19 16:30:56,406:INFO:Copying training dataset
2025-01-19 16:30:56,434:INFO:Defining folds
2025-01-19 16:30:56,434:INFO:Declaring metric variables
2025-01-19 16:30:56,448:INFO:Importing untrained model
2025-01-19 16:30:56,448:INFO:Declaring custom model
2025-01-19 16:30:56,461:INFO:Decision Tree Classifier Imported successfully
2025-01-19 16:30:56,490:INFO:Starting cross validation
2025-01-19 16:30:56,498:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:56,636:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:56,647:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:56,649:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:56,677:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:56,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,747:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,749:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,758:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,758:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,762:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,777:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,860:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:56,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,298:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,328:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,410:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,417:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,550:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,558:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,584:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,587:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,591:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,599:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,611:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,637:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,727:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:57,807:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,821:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,827:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,829:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,847:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:30:57,861:INFO:Calculating mean and std
2025-01-19 16:30:57,869:INFO:Creating metrics dataframe
2025-01-19 16:30:57,899:INFO:Finalizing model
2025-01-19 16:30:58,018:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:58,048:INFO:Uploading results into container
2025-01-19 16:30:58,057:INFO:Uploading model into container now
2025-01-19 16:30:58,062:INFO:_master_model_container: 29
2025-01-19 16:30:58,062:INFO:_display_container: 11
2025-01-19 16:30:58,065:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 16:30:58,065:INFO:create_model() successfully completed......................................
2025-01-19 16:30:58,264:INFO:SubProcess create_model() end ==================================
2025-01-19 16:30:58,317:INFO:_master_model_container: 29
2025-01-19 16:30:58,317:INFO:_display_container: 11
2025-01-19 16:30:58,329:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-19 16:30:58,329:INFO:ensemble_model() successfully completed......................................
2025-01-19 16:30:58,800:INFO:Initializing blend_models()
2025-01-19 16:30:58,800:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 16:30:58,800:INFO:Checking exceptions
2025-01-19 16:30:58,929:INFO:Importing libraries
2025-01-19 16:30:58,929:INFO:Copying training dataset
2025-01-19 16:30:58,961:INFO:Getting model names
2025-01-19 16:30:59,010:INFO:SubProcess create_model() called ==================================
2025-01-19 16:30:59,072:INFO:Initializing create_model()
2025-01-19 16:30:59,072:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238DB746DF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:30:59,074:INFO:Checking exceptions
2025-01-19 16:30:59,077:INFO:Importing libraries
2025-01-19 16:30:59,077:INFO:Copying training dataset
2025-01-19 16:30:59,127:INFO:Defining folds
2025-01-19 16:30:59,127:INFO:Declaring metric variables
2025-01-19 16:30:59,187:INFO:Importing untrained model
2025-01-19 16:30:59,188:INFO:Declaring custom model
2025-01-19 16:30:59,217:INFO:Voting Classifier Imported successfully
2025-01-19 16:30:59,278:INFO:Starting cross validation
2025-01-19 16:30:59,285:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:30:59,623:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:59,630:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:59,662:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:30:59,817:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:01,742:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,758:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,771:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,870:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,881:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,887:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,897:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,897:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:01,987:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:02,000:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:02,011:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:02,057:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:02,114:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:02,116:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:02,191:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:03,610:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,622:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,631:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,635:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,647:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,752:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,767:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,781:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,839:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:03,868:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:03,916:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,920:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:03,928:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,890:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,898:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,907:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,981:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:04,987:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:05,010:INFO:Calculating mean and std
2025-01-19 16:31:05,010:INFO:Creating metrics dataframe
2025-01-19 16:31:05,035:INFO:Finalizing model
2025-01-19 16:31:05,182:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:06,389:INFO:Uploading results into container
2025-01-19 16:31:06,393:INFO:Uploading model into container now
2025-01-19 16:31:06,393:INFO:_master_model_container: 30
2025-01-19 16:31:06,393:INFO:_display_container: 12
2025-01-19 16:31:06,518:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 16:31:06,519:INFO:create_model() successfully completed......................................
2025-01-19 16:31:06,823:INFO:SubProcess create_model() end ==================================
2025-01-19 16:31:06,871:INFO:_master_model_container: 30
2025-01-19 16:31:06,874:INFO:_display_container: 12
2025-01-19 16:31:06,928:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-19 16:31:06,928:INFO:blend_models() successfully completed......................................
2025-01-19 16:31:07,275:INFO:Initializing stack_models()
2025-01-19 16:31:07,275:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-19 16:31:07,275:INFO:Checking exceptions
2025-01-19 16:31:07,286:INFO:Defining meta model
2025-01-19 16:31:07,397:INFO:Getting model names
2025-01-19 16:31:07,402:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-19 16:31:07,430:INFO:SubProcess create_model() called ==================================
2025-01-19 16:31:07,506:INFO:Initializing create_model()
2025-01-19 16:31:07,506:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000238D668D9A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:31:07,506:INFO:Checking exceptions
2025-01-19 16:31:07,506:INFO:Importing libraries
2025-01-19 16:31:07,506:INFO:Copying training dataset
2025-01-19 16:31:07,580:INFO:Defining folds
2025-01-19 16:31:07,580:INFO:Declaring metric variables
2025-01-19 16:31:07,596:INFO:Importing untrained model
2025-01-19 16:31:07,598:INFO:Declaring custom model
2025-01-19 16:31:07,609:INFO:Stacking Classifier Imported successfully
2025-01-19 16:31:07,637:INFO:Starting cross validation
2025-01-19 16:31:07,639:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:31:07,827:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:07,840:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:07,908:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:08,582:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,632:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,717:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,723:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,751:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,812:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,832:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,887:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,925:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,933:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,937:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,941:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,949:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:09,984:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,007:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,030:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:10,102:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:15,597:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,744:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,757:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,771:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,857:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,871:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,877:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:15,898:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:15,996:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:16,098:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:16,299:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:16,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:16,317:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:16,496:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:16,991:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,038:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,067:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,136:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,176:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,226:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,257:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,338:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,342:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,383:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,544:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,617:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:17,679:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:18,157:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:18,327:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:18,373:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:18,421:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:18,457:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:23,036:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,046:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,055:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,086:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,096:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,252:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:23,289:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:23,638:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,652:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:23,657:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:24,151:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:24,160:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:24,171:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:24,269:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,340:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,348:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,437:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,447:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,470:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,483:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,508:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,512:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:24,555:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:28,645:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,653:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,665:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,713:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,721:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,727:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:28,754:INFO:Calculating mean and std
2025-01-19 16:31:28,757:INFO:Creating metrics dataframe
2025-01-19 16:31:28,806:INFO:Finalizing model
2025-01-19 16:31:29,115:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:30,087:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:30,127:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:30,112:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:30,128:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:30,217:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-19 16:31:34,741:INFO:Uploading results into container
2025-01-19 16:31:34,746:INFO:Uploading model into container now
2025-01-19 16:31:34,746:INFO:_master_model_container: 31
2025-01-19 16:31:34,746:INFO:_display_container: 13
2025-01-19 16:31:34,784:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 16:31:34,784:INFO:create_model() successfully completed......................................
2025-01-19 16:31:35,039:INFO:SubProcess create_model() end ==================================
2025-01-19 16:31:35,083:INFO:_master_model_container: 31
2025-01-19 16:31:35,083:INFO:_display_container: 13
2025-01-19 16:31:35,143:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-19 16:31:35,147:INFO:stack_models() successfully completed......................................
2025-01-19 16:31:35,571:INFO:Initializing plot_model()
2025-01-19 16:31:35,571:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:35,577:INFO:Checking exceptions
2025-01-19 16:31:35,767:INFO:Preloading libraries
2025-01-19 16:31:35,888:INFO:Copying training dataset
2025-01-19 16:31:35,888:INFO:Plot type: auc
2025-01-19 16:31:36,167:INFO:Fitting Model
2025-01-19 16:31:36,167:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 16:31:36,172:INFO:Scoring test/hold-out set
2025-01-19 16:31:37,560:INFO:Visual Rendered Successfully
2025-01-19 16:31:37,787:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:37,867:INFO:Initializing plot_model()
2025-01-19 16:31:37,867:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:37,867:INFO:Checking exceptions
2025-01-19 16:31:37,997:INFO:Preloading libraries
2025-01-19 16:31:38,020:INFO:Copying training dataset
2025-01-19 16:31:38,020:INFO:Plot type: confusion_matrix
2025-01-19 16:31:38,147:INFO:Fitting Model
2025-01-19 16:31:38,147:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 16:31:38,147:INFO:Scoring test/hold-out set
2025-01-19 16:31:38,967:INFO:Visual Rendered Successfully
2025-01-19 16:31:39,208:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:39,370:INFO:Initializing plot_model()
2025-01-19 16:31:39,377:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:39,377:INFO:Checking exceptions
2025-01-19 16:31:39,810:INFO:Preloading libraries
2025-01-19 16:31:39,890:INFO:Copying training dataset
2025-01-19 16:31:39,890:INFO:Plot type: feature
2025-01-19 16:31:39,890:WARNING:No coef_ found. Trying feature_importances_
2025-01-19 16:31:40,673:INFO:Visual Rendered Successfully
2025-01-19 16:31:40,861:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:41,034:INFO:Initializing plot_model()
2025-01-19 16:31:41,037:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:41,037:INFO:Checking exceptions
2025-01-19 16:31:41,158:INFO:Preloading libraries
2025-01-19 16:31:41,190:INFO:Copying training dataset
2025-01-19 16:31:41,190:INFO:Plot type: boundary
2025-01-19 16:31:41,252:INFO:Fitting StandardScaler()
2025-01-19 16:31:41,259:INFO:Fitting PCA()
2025-01-19 16:31:41,327:INFO:Fitting Model
2025-01-19 16:31:45,712:INFO:Visual Rendered Successfully
2025-01-19 16:31:46,093:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:46,187:INFO:Initializing plot_model()
2025-01-19 16:31:46,187:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:46,187:INFO:Checking exceptions
2025-01-19 16:31:46,371:INFO:Preloading libraries
2025-01-19 16:31:46,437:INFO:Copying training dataset
2025-01-19 16:31:46,441:INFO:Plot type: pr
2025-01-19 16:31:46,767:INFO:Fitting Model
2025-01-19 16:31:46,768:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 16:31:46,769:INFO:Scoring test/hold-out set
2025-01-19 16:31:47,908:INFO:Visual Rendered Successfully
2025-01-19 16:31:48,097:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:48,212:INFO:Initializing plot_model()
2025-01-19 16:31:48,213:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:48,213:INFO:Checking exceptions
2025-01-19 16:31:48,373:INFO:Preloading libraries
2025-01-19 16:31:48,450:INFO:Copying training dataset
2025-01-19 16:31:48,450:INFO:Plot type: class_report
2025-01-19 16:31:48,927:INFO:Fitting Model
2025-01-19 16:31:48,927:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-19 16:31:48,927:INFO:Scoring test/hold-out set
2025-01-19 16:31:50,079:INFO:Visual Rendered Successfully
2025-01-19 16:31:50,261:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:50,361:INFO:Initializing evaluate_model()
2025-01-19 16:31:50,367:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 16:31:50,433:INFO:Initializing plot_model()
2025-01-19 16:31:50,433:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, system=True)
2025-01-19 16:31:50,433:INFO:Checking exceptions
2025-01-19 16:31:50,556:INFO:Preloading libraries
2025-01-19 16:31:50,583:INFO:Copying training dataset
2025-01-19 16:31:50,583:INFO:Plot type: pipeline
2025-01-19 16:31:50,990:INFO:Visual Rendered Successfully
2025-01-19 16:31:51,168:INFO:plot_model() successfully completed......................................
2025-01-19 16:31:51,294:INFO:Initializing create_model()
2025-01-19 16:31:51,294:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:31:51,294:INFO:Checking exceptions
2025-01-19 16:31:51,411:INFO:Importing libraries
2025-01-19 16:31:51,411:INFO:Copying training dataset
2025-01-19 16:31:51,529:INFO:Defining folds
2025-01-19 16:31:51,529:INFO:Declaring metric variables
2025-01-19 16:31:51,591:INFO:Importing untrained model
2025-01-19 16:31:51,612:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:31:51,627:INFO:Cross validation set to False
2025-01-19 16:31:51,630:INFO:Fitting Model
2025-01-19 16:31:51,907:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 16:31:51,907:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000655 seconds.
2025-01-19 16:31:51,907:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-19 16:31:51,907:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-19 16:31:51,907:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 16:31:51,907:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 16:31:51,912:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 16:31:51,912:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 16:31:51,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,917:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,923:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,930:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,930:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,937:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,937:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,941:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,947:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,952:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,954:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,957:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,962:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,967:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,972:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,972:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,987:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,987:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,992:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:51,997:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,000:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,004:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,007:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,016:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,027:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,031:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,037:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,069:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,102:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,109:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,123:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,127:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,137:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,141:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,149:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,151:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,161:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,167:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,173:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,177:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,182:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,205:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:31:52,262:INFO:Initializing predict_model()
2025-01-19 16:31:52,262:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238DC4AB430>)
2025-01-19 16:31:52,267:INFO:Checking exceptions
2025-01-19 16:31:52,267:INFO:Preloading libraries
2025-01-19 16:31:52,474:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:52,487:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:52,510:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:31:53,144:INFO:_display_container: 14
2025-01-19 16:31:53,152:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:31:53,152:INFO:create_model() successfully completed......................................
2025-01-19 16:31:53,836:INFO:Initializing interpret_model()
2025-01-19 16:31:53,836:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:31:53,836:INFO:Checking exceptions
2025-01-19 16:31:53,836:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 16:31:53,951:INFO:plot type: summary
2025-01-19 16:31:53,953:INFO:Creating TreeExplainer
2025-01-19 16:31:54,396:INFO:Compiling shap values
2025-01-19 16:31:54,598:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-19 16:31:56,019:INFO:Visual Rendered Successfully
2025-01-19 16:31:56,019:INFO:interpret_model() successfully completed......................................
2025-01-19 16:32:43,521:INFO:Initializing create_model()
2025-01-19 16:32:43,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=catboost, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:32:43,521:INFO:Checking exceptions
2025-01-19 16:35:23,291:INFO:Initializing create_model()
2025-01-19 16:35:23,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:35:23,291:INFO:Checking exceptions
2025-01-19 16:35:23,378:INFO:Importing libraries
2025-01-19 16:35:23,378:INFO:Copying training dataset
2025-01-19 16:35:23,513:INFO:Defining folds
2025-01-19 16:35:23,520:INFO:Declaring metric variables
2025-01-19 16:35:23,551:INFO:Importing untrained model
2025-01-19 16:35:23,596:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:35:23,638:INFO:Starting cross validation
2025-01-19 16:35:23,641:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:35:25,343:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,351:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,360:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,369:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,392:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,401:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,409:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,424:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,722:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,731:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:25,740:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,557:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,565:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,576:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,596:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,607:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,616:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,657:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,666:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,680:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,958:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:26,976:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,376:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,382:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,391:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,426:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,436:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,441:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:27,474:INFO:Calculating mean and std
2025-01-19 16:35:27,476:INFO:Creating metrics dataframe
2025-01-19 16:35:27,502:INFO:Finalizing model
2025-01-19 16:35:27,628:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 16:35:27,630:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001176 seconds.
2025-01-19 16:35:27,630:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-01-19 16:35:27,630:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 16:35:27,630:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 16:35:27,630:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 16:35:27,630:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 16:35:27,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,636:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,660:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,672:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,711:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,719:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,763:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,792:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,808:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,814:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,816:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,827:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,830:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,836:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,841:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,846:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,856:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,856:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,871:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,872:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,897:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:27,944:INFO:Uploading results into container
2025-01-19 16:35:27,947:INFO:Uploading model into container now
2025-01-19 16:35:27,997:INFO:_master_model_container: 32
2025-01-19 16:35:27,998:INFO:_display_container: 15
2025-01-19 16:35:28,000:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:35:28,000:INFO:create_model() successfully completed......................................
2025-01-19 16:35:28,292:INFO:Initializing interpret_model()
2025-01-19 16:35:28,292:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=correlation, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:35:28,292:INFO:Checking exceptions
2025-01-19 16:35:28,292:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 16:35:28,350:INFO:plot type: correlation
2025-01-19 16:35:28,350:WARNING:No feature passed. Default value of feature used for correlation plot: Id
2025-01-19 16:35:28,350:INFO:Creating TreeExplainer
2025-01-19 16:35:28,730:INFO:Compiling shap values
2025-01-19 16:35:29,161:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-19 16:35:29,161:INFO:model type detected: type 1
2025-01-19 16:35:51,092:INFO:Initializing create_model()
2025-01-19 16:35:51,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:35:51,092:INFO:Checking exceptions
2025-01-19 16:35:51,187:INFO:Importing libraries
2025-01-19 16:35:51,192:INFO:Copying training dataset
2025-01-19 16:35:51,321:INFO:Defining folds
2025-01-19 16:35:51,321:INFO:Declaring metric variables
2025-01-19 16:35:51,389:INFO:Importing untrained model
2025-01-19 16:35:51,430:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:35:51,492:INFO:Starting cross validation
2025-01-19 16:35:51,497:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 16:35:53,421:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,429:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,438:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,461:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,469:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,479:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,689:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,699:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,711:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:53,716:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,729:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,738:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,747:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,756:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,769:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,779:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,968:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,977:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:54,986:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,007:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,016:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,027:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,530:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,539:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,547:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,561:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,566:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,577:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:35:55,597:INFO:Calculating mean and std
2025-01-19 16:35:55,599:INFO:Creating metrics dataframe
2025-01-19 16:35:55,620:INFO:Finalizing model
2025-01-19 16:35:55,716:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 16:35:55,717:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001596 seconds.
2025-01-19 16:35:55,717:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-19 16:35:55,722:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-19 16:35:55,722:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 16:35:55,722:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 16:35:55,722:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 16:35:55,722:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 16:35:55,722:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,741:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,751:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,754:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,757:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,758:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,771:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,777:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,784:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,786:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,793:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,811:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,837:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,861:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,870:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,877:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,882:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,888:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,902:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,908:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,918:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,926:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,933:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,933:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,936:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:55,951:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:35:56,001:INFO:Uploading results into container
2025-01-19 16:35:56,006:INFO:Uploading model into container now
2025-01-19 16:35:56,054:INFO:_master_model_container: 33
2025-01-19 16:35:56,054:INFO:_display_container: 16
2025-01-19 16:35:56,056:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:35:56,056:INFO:create_model() successfully completed......................................
2025-01-19 16:35:56,301:INFO:Initializing interpret_model()
2025-01-19 16:35:56,301:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=correlation, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:35:56,301:INFO:Checking exceptions
2025-01-19 16:35:56,301:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 16:35:56,362:INFO:plot type: correlation
2025-01-19 16:35:56,362:WARNING:No feature passed. Default value of feature used for correlation plot: Id
2025-01-19 16:35:56,362:INFO:Creating TreeExplainer
2025-01-19 16:35:56,806:INFO:Compiling shap values
2025-01-19 16:35:56,943:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-19 16:35:56,943:INFO:model type detected: type 1
2025-01-19 16:36:23,809:INFO:Initializing create_model()
2025-01-19 16:36:23,809:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 16:36:23,809:INFO:Checking exceptions
2025-01-19 16:36:23,891:INFO:Importing libraries
2025-01-19 16:36:23,891:INFO:Copying training dataset
2025-01-19 16:36:24,037:INFO:Defining folds
2025-01-19 16:36:24,042:INFO:Declaring metric variables
2025-01-19 16:36:24,082:INFO:Importing untrained model
2025-01-19 16:36:24,117:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 16:36:24,142:INFO:Cross validation set to False
2025-01-19 16:36:24,142:INFO:Fitting Model
2025-01-19 16:36:24,543:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-19 16:36:24,547:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002983 seconds.
2025-01-19 16:36:24,547:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-01-19 16:36:24,547:INFO:[LightGBM] [Info] Total Bins 728
2025-01-19 16:36:24,547:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-19 16:36:24,551:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-19 16:36:24,551:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-19 16:36:24,559:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,618:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,641:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,658:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,673:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,677:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,716:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,756:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,766:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,773:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,780:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,789:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,797:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,801:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,804:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,806:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,817:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,824:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,829:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,840:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,844:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,866:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-19 16:36:24,946:INFO:Initializing predict_model()
2025-01-19 16:36:24,946:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000238DD6EF940>)
2025-01-19 16:36:24,946:INFO:Checking exceptions
2025-01-19 16:36:24,946:INFO:Preloading libraries
2025-01-19 16:36:25,066:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:36:25,077:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:36:25,090:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-19 16:36:25,416:INFO:_display_container: 17
2025-01-19 16:36:25,422:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-19 16:36:25,422:INFO:create_model() successfully completed......................................
2025-01-19 16:36:25,774:INFO:Initializing interpret_model()
2025-01-19 16:36:25,774:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=correlation, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000238DC483310>)
2025-01-19 16:36:25,776:INFO:Checking exceptions
2025-01-19 16:36:25,776:INFO:Soft dependency imported: shap: 0.46.0
2025-01-19 16:36:25,830:INFO:plot type: correlation
2025-01-19 16:36:25,830:WARNING:No feature passed. Default value of feature used for correlation plot: Id
2025-01-19 16:36:25,830:INFO:Creating TreeExplainer
2025-01-19 16:36:26,222:INFO:Compiling shap values
2025-01-19 16:36:26,406:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-19 16:36:26,406:INFO:model type detected: type 1
2025-01-19 16:44:57,237:INFO:Initializing save_model()
2025-01-19 16:44:57,245:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=D:\Data_Science data\Python_ka_Chila\14_maching_learning\saved_models\pycaret_best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loy...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-19 16:44:57,245:INFO:Adding model into prep_pipe
2025-01-19 16:44:57,266:INFO:D:\Data_Science data\Python_ka_Chila\14_maching_learning\saved_models\pycaret_best-model.pkl saved in current working directory
2025-01-19 16:44:57,314:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-01-19 16:44:57,314:INFO:save_model() successfully completed......................................
2025-01-19 16:45:58,281:INFO:Initializing load_model()
2025-01-19 16:45:58,281:INFO:load_model(model_name=D:\Data_Science data\Python_ka_Chila\14_maching_learning\saved_models\pycaret_best-model, platform=None, authentication=None, verbose=True)
2025-01-19 16:58:30,835:WARNING:C:\Users\Hasnain\AppData\Local\Temp\ipykernel_3060\54512771.py:972: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  import pkg_resources

2025-01-19 21:09:22,632:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 21:09:22,633:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 21:09:22,633:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 21:09:22,633:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-19 21:11:40,069:INFO:PyCaret RegressionExperiment
2025-01-19 21:11:40,069:INFO:Logging name: tips_regression
2025-01-19 21:11:40,069:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-19 21:11:40,069:INFO:version 3.3.2
2025-01-19 21:11:40,069:INFO:Initializing setup()
2025-01-19 21:11:40,070:INFO:self.USI: cb4c
2025-01-19 21:11:40,070:INFO:self._variable_keys: {'_available_plots', 'USI', 'pipeline', 'exp_id', 'n_jobs_param', 'memory', 'y', 'exp_name_log', 'log_plots_param', 'html_param', 'fold_groups_param', '_ml_usecase', 'fold_generator', 'y_test', 'transform_target_param', 'X_test', 'idx', 'gpu_param', 'y_train', 'X', 'target_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'data', 'logging_param', 'seed', 'X_train'}
2025-01-19 21:11:40,070:INFO:Checking environment
2025-01-19 21:11:40,070:INFO:python_version: 3.9.0
2025-01-19 21:11:40,070:INFO:python_build: ('default', 'Nov 15 2020 08:30:55')
2025-01-19 21:11:40,070:INFO:machine: AMD64
2025-01-19 21:11:40,071:INFO:platform: Windows-10-10.0.22621-SP0
2025-01-19 21:11:40,074:INFO:Memory: svmem(total=8416788480, available=1303670784, percent=84.5, used=7113117696, free=1303670784)
2025-01-19 21:11:40,075:INFO:Physical Core: 2
2025-01-19 21:11:40,075:INFO:Logical Core: 4
2025-01-19 21:11:40,075:INFO:Checking libraries
2025-01-19 21:11:40,075:INFO:System:
2025-01-19 21:11:40,075:INFO:    python: 3.9.0 (default, Nov 15 2020, 08:30:55) [MSC v.1916 64 bit (AMD64)]
2025-01-19 21:11:40,076:INFO:executable: c:\Users\Hasnain\miniconda3\envs\pycaret_env\python.exe
2025-01-19 21:11:40,076:INFO:   machine: Windows-10-10.0.22621-SP0
2025-01-19 21:11:40,076:INFO:PyCaret required dependencies:
2025-01-19 21:11:40,187:INFO:                 pip: 24.2
2025-01-19 21:11:40,188:INFO:          setuptools: 75.1.0
2025-01-19 21:11:40,188:INFO:             pycaret: 3.3.2
2025-01-19 21:11:40,188:INFO:             IPython: 8.18.1
2025-01-19 21:11:40,188:INFO:          ipywidgets: 8.1.5
2025-01-19 21:11:40,188:INFO:                tqdm: 4.67.1
2025-01-19 21:11:40,188:INFO:               numpy: 1.26.4
2025-01-19 21:11:40,188:INFO:              pandas: 2.1.4
2025-01-19 21:11:40,189:INFO:              jinja2: 3.1.5
2025-01-19 21:11:40,189:INFO:               scipy: 1.11.4
2025-01-19 21:11:40,189:INFO:              joblib: 1.3.2
2025-01-19 21:11:40,189:INFO:             sklearn: 1.4.2
2025-01-19 21:11:40,189:INFO:                pyod: 2.0.3
2025-01-19 21:11:40,189:INFO:            imblearn: 0.12.4
2025-01-19 21:11:40,189:INFO:   category_encoders: 2.6.4
2025-01-19 21:11:40,189:INFO:            lightgbm: 4.5.0
2025-01-19 21:11:40,190:INFO:               numba: 0.60.0
2025-01-19 21:11:40,190:INFO:            requests: 2.32.3
2025-01-19 21:11:40,190:INFO:          matplotlib: 3.7.5
2025-01-19 21:11:40,190:INFO:          scikitplot: 0.3.7
2025-01-19 21:11:40,190:INFO:         yellowbrick: 1.5
2025-01-19 21:11:40,190:INFO:              plotly: 5.24.1
2025-01-19 21:11:40,191:INFO:    plotly-resampler: Not installed
2025-01-19 21:11:40,191:INFO:             kaleido: 0.2.1
2025-01-19 21:11:40,191:INFO:           schemdraw: 0.15
2025-01-19 21:11:40,191:INFO:         statsmodels: 0.14.4
2025-01-19 21:11:40,191:INFO:              sktime: 0.26.0
2025-01-19 21:11:40,191:INFO:               tbats: 1.1.3
2025-01-19 21:11:40,191:INFO:            pmdarima: 2.0.4
2025-01-19 21:11:40,191:INFO:              psutil: 6.1.1
2025-01-19 21:11:40,191:INFO:          markupsafe: 3.0.2
2025-01-19 21:11:40,191:INFO:             pickle5: Not installed
2025-01-19 21:11:40,191:INFO:         cloudpickle: 3.1.1
2025-01-19 21:11:40,192:INFO:         deprecation: 2.1.0
2025-01-19 21:11:40,192:INFO:              xxhash: 3.5.0
2025-01-19 21:11:40,192:INFO:           wurlitzer: Not installed
2025-01-19 21:11:40,192:INFO:PyCaret optional dependencies:
2025-01-19 21:11:40,224:INFO:                shap: 0.46.0
2025-01-19 21:11:40,224:INFO:           interpret: Not installed
2025-01-19 21:11:40,224:INFO:                umap: Not installed
2025-01-19 21:11:40,224:INFO:     ydata_profiling: Not installed
2025-01-19 21:11:40,225:INFO:  explainerdashboard: Not installed
2025-01-19 21:11:40,225:INFO:             autoviz: Not installed
2025-01-19 21:11:40,225:INFO:           fairlearn: Not installed
2025-01-19 21:11:40,225:INFO:          deepchecks: Not installed
2025-01-19 21:11:40,226:INFO:             xgboost: Not installed
2025-01-19 21:11:40,226:INFO:            catboost: Not installed
2025-01-19 21:11:40,226:INFO:              kmodes: Not installed
2025-01-19 21:11:40,226:INFO:             mlxtend: Not installed
2025-01-19 21:11:40,226:INFO:       statsforecast: Not installed
2025-01-19 21:11:40,226:INFO:        tune_sklearn: Not installed
2025-01-19 21:11:40,226:INFO:                 ray: Not installed
2025-01-19 21:11:40,226:INFO:            hyperopt: Not installed
2025-01-19 21:11:40,227:INFO:              optuna: Not installed
2025-01-19 21:11:40,227:INFO:               skopt: Not installed
2025-01-19 21:11:40,227:INFO:              mlflow: 2.19.0
2025-01-19 21:11:40,227:INFO:              gradio: Not installed
2025-01-19 21:11:40,227:INFO:             fastapi: Not installed
2025-01-19 21:11:40,227:INFO:             uvicorn: Not installed
2025-01-19 21:11:40,227:INFO:              m2cgen: Not installed
2025-01-19 21:11:40,227:INFO:           evidently: Not installed
2025-01-19 21:11:40,227:INFO:               fugue: Not installed
2025-01-19 21:11:40,227:INFO:           streamlit: Not installed
2025-01-19 21:11:40,227:INFO:             prophet: Not installed
2025-01-19 21:11:40,227:INFO:None
2025-01-19 21:11:40,227:INFO:Set up data.
2025-01-19 21:11:40,235:INFO:Set up folding strategy.
2025-01-19 21:11:40,236:INFO:Set up train/test split.
2025-01-19 21:11:40,241:INFO:Set up index.
2025-01-19 21:11:40,242:INFO:Assigning column types.
2025-01-19 21:11:40,247:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-19 21:11:40,248:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,257:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,265:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,368:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,447:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,451:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,452:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,453:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,461:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,467:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,570:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,656:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,658:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,658:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,659:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-19 21:11:40,667:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,673:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,768:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,847:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,848:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:40,861:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,870:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:40,993:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,073:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,073:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,074:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,074:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-19 21:11:41,090:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,204:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,281:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,302:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,435:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,546:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,548:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,548:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,549:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-19 21:11:41,714:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,783:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:41,784:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,785:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:41,904:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:42,013:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-19 21:11:42,015:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,016:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,016:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-19 21:11:42,209:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:42,325:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,326:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,477:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-19 21:11:42,580:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,580:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,584:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-19 21:11:42,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:42,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,024:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,025:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,029:INFO:Preparing preprocessing pipeline...
2025-01-19 21:11:43,029:INFO:Set up simple imputation.
2025-01-19 21:11:43,030:INFO:Set up polynomial features.
2025-01-19 21:11:43,030:INFO:Set up removing multicollinearity.
2025-01-19 21:11:43,030:INFO:Set up feature normalization.
2025-01-19 21:11:43,160:INFO:Finished creating preprocessing pipeline.
2025-01-19 21:11:43,183:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-19 21:11:43,183:INFO:Creating final display dataframe.
2025-01-19 21:11:43,465:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             cb4c
2025-01-19 21:11:43,703:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,704:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,966:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,966:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:43,966:INFO:setup() successfully completed in 3.91s...............
2025-01-19 21:11:51,611:INFO:gpu_param set to False
2025-01-19 21:11:51,882:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:51,882:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:52,093:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:11:52,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-19 21:12:24,584:INFO:Initializing compare_models()
2025-01-19 21:12:24,584:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-19 21:12:24,585:INFO:Checking exceptions
2025-01-19 21:12:24,589:INFO:Preparing display monitor
2025-01-19 21:12:24,686:INFO:Initializing Linear Regression
2025-01-19 21:12:24,686:INFO:Total runtime is 0.0 minutes
2025-01-19 21:12:24,704:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:24,706:INFO:Initializing create_model()
2025-01-19 21:12:24,706:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:24,708:INFO:Checking exceptions
2025-01-19 21:12:24,708:INFO:Importing libraries
2025-01-19 21:12:24,709:INFO:Copying training dataset
2025-01-19 21:12:24,732:INFO:Defining folds
2025-01-19 21:12:24,733:INFO:Declaring metric variables
2025-01-19 21:12:24,780:INFO:Importing untrained model
2025-01-19 21:12:24,808:INFO:Linear Regression Imported successfully
2025-01-19 21:12:24,846:INFO:Starting cross validation
2025-01-19 21:12:24,876:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:36,032:INFO:Calculating mean and std
2025-01-19 21:12:36,036:INFO:Creating metrics dataframe
2025-01-19 21:12:36,043:INFO:Uploading results into container
2025-01-19 21:12:36,045:INFO:Uploading model into container now
2025-01-19 21:12:36,047:INFO:_master_model_container: 1
2025-01-19 21:12:36,048:INFO:_display_container: 2
2025-01-19 21:12:36,048:INFO:LinearRegression(n_jobs=-1)
2025-01-19 21:12:36,049:INFO:create_model() successfully completed......................................
2025-01-19 21:12:36,210:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:36,210:INFO:Creating metrics dataframe
2025-01-19 21:12:36,223:INFO:Initializing Lasso Regression
2025-01-19 21:12:36,223:INFO:Total runtime is 0.19228630065917968 minutes
2025-01-19 21:12:36,233:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:36,234:INFO:Initializing create_model()
2025-01-19 21:12:36,234:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:36,235:INFO:Checking exceptions
2025-01-19 21:12:36,235:INFO:Importing libraries
2025-01-19 21:12:36,235:INFO:Copying training dataset
2025-01-19 21:12:36,245:INFO:Defining folds
2025-01-19 21:12:36,245:INFO:Declaring metric variables
2025-01-19 21:12:36,264:INFO:Importing untrained model
2025-01-19 21:12:36,310:INFO:Lasso Regression Imported successfully
2025-01-19 21:12:36,340:INFO:Starting cross validation
2025-01-19 21:12:36,344:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:37,043:INFO:Calculating mean and std
2025-01-19 21:12:37,054:INFO:Creating metrics dataframe
2025-01-19 21:12:37,072:INFO:Uploading results into container
2025-01-19 21:12:37,076:INFO:Uploading model into container now
2025-01-19 21:12:37,077:INFO:_master_model_container: 2
2025-01-19 21:12:37,078:INFO:_display_container: 2
2025-01-19 21:12:37,078:INFO:Lasso(random_state=123)
2025-01-19 21:12:37,078:INFO:create_model() successfully completed......................................
2025-01-19 21:12:37,204:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:37,204:INFO:Creating metrics dataframe
2025-01-19 21:12:37,220:INFO:Initializing Ridge Regression
2025-01-19 21:12:37,221:INFO:Total runtime is 0.20890541474024454 minutes
2025-01-19 21:12:37,231:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:37,232:INFO:Initializing create_model()
2025-01-19 21:12:37,232:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:37,233:INFO:Checking exceptions
2025-01-19 21:12:37,233:INFO:Importing libraries
2025-01-19 21:12:37,233:INFO:Copying training dataset
2025-01-19 21:12:37,248:INFO:Defining folds
2025-01-19 21:12:37,249:INFO:Declaring metric variables
2025-01-19 21:12:37,298:INFO:Importing untrained model
2025-01-19 21:12:37,309:INFO:Ridge Regression Imported successfully
2025-01-19 21:12:37,341:INFO:Starting cross validation
2025-01-19 21:12:37,345:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:37,851:INFO:Calculating mean and std
2025-01-19 21:12:37,858:INFO:Creating metrics dataframe
2025-01-19 21:12:37,870:INFO:Uploading results into container
2025-01-19 21:12:37,872:INFO:Uploading model into container now
2025-01-19 21:12:37,873:INFO:_master_model_container: 3
2025-01-19 21:12:37,873:INFO:_display_container: 2
2025-01-19 21:12:37,873:INFO:Ridge(random_state=123)
2025-01-19 21:12:37,873:INFO:create_model() successfully completed......................................
2025-01-19 21:12:37,994:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:37,994:INFO:Creating metrics dataframe
2025-01-19 21:12:38,010:INFO:Initializing Elastic Net
2025-01-19 21:12:38,010:INFO:Total runtime is 0.22206389904022217 minutes
2025-01-19 21:12:38,017:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:38,019:INFO:Initializing create_model()
2025-01-19 21:12:38,020:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:38,020:INFO:Checking exceptions
2025-01-19 21:12:38,021:INFO:Importing libraries
2025-01-19 21:12:38,022:INFO:Copying training dataset
2025-01-19 21:12:38,029:INFO:Defining folds
2025-01-19 21:12:38,030:INFO:Declaring metric variables
2025-01-19 21:12:38,052:INFO:Importing untrained model
2025-01-19 21:12:38,073:INFO:Elastic Net Imported successfully
2025-01-19 21:12:38,113:INFO:Starting cross validation
2025-01-19 21:12:38,122:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:38,536:INFO:Calculating mean and std
2025-01-19 21:12:38,539:INFO:Creating metrics dataframe
2025-01-19 21:12:38,547:INFO:Uploading results into container
2025-01-19 21:12:38,548:INFO:Uploading model into container now
2025-01-19 21:12:38,549:INFO:_master_model_container: 4
2025-01-19 21:12:38,550:INFO:_display_container: 2
2025-01-19 21:12:38,552:INFO:ElasticNet(random_state=123)
2025-01-19 21:12:38,552:INFO:create_model() successfully completed......................................
2025-01-19 21:12:38,666:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:38,666:INFO:Creating metrics dataframe
2025-01-19 21:12:38,678:INFO:Initializing Least Angle Regression
2025-01-19 21:12:38,678:INFO:Total runtime is 0.23320695559183757 minutes
2025-01-19 21:12:38,684:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:38,686:INFO:Initializing create_model()
2025-01-19 21:12:38,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:38,687:INFO:Checking exceptions
2025-01-19 21:12:38,687:INFO:Importing libraries
2025-01-19 21:12:38,687:INFO:Copying training dataset
2025-01-19 21:12:38,698:INFO:Defining folds
2025-01-19 21:12:38,698:INFO:Declaring metric variables
2025-01-19 21:12:38,715:INFO:Importing untrained model
2025-01-19 21:12:38,729:INFO:Least Angle Regression Imported successfully
2025-01-19 21:12:38,755:INFO:Starting cross validation
2025-01-19 21:12:38,759:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:39,394:INFO:Calculating mean and std
2025-01-19 21:12:39,401:INFO:Creating metrics dataframe
2025-01-19 21:12:39,404:INFO:Uploading results into container
2025-01-19 21:12:39,405:INFO:Uploading model into container now
2025-01-19 21:12:39,406:INFO:_master_model_container: 5
2025-01-19 21:12:39,406:INFO:_display_container: 2
2025-01-19 21:12:39,407:INFO:Lars(random_state=123)
2025-01-19 21:12:39,408:INFO:create_model() successfully completed......................................
2025-01-19 21:12:39,717:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:39,718:INFO:Creating metrics dataframe
2025-01-19 21:12:39,746:INFO:Initializing Lasso Least Angle Regression
2025-01-19 21:12:39,746:INFO:Total runtime is 0.25100157658259076 minutes
2025-01-19 21:12:39,773:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:39,773:INFO:Initializing create_model()
2025-01-19 21:12:39,773:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:39,773:INFO:Checking exceptions
2025-01-19 21:12:39,774:INFO:Importing libraries
2025-01-19 21:12:39,775:INFO:Copying training dataset
2025-01-19 21:12:39,792:INFO:Defining folds
2025-01-19 21:12:39,793:INFO:Declaring metric variables
2025-01-19 21:12:39,843:INFO:Importing untrained model
2025-01-19 21:12:39,861:INFO:Lasso Least Angle Regression Imported successfully
2025-01-19 21:12:39,880:INFO:Starting cross validation
2025-01-19 21:12:39,885:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:40,287:INFO:Calculating mean and std
2025-01-19 21:12:40,289:INFO:Creating metrics dataframe
2025-01-19 21:12:40,292:INFO:Uploading results into container
2025-01-19 21:12:40,293:INFO:Uploading model into container now
2025-01-19 21:12:40,294:INFO:_master_model_container: 6
2025-01-19 21:12:40,294:INFO:_display_container: 2
2025-01-19 21:12:40,295:INFO:LassoLars(random_state=123)
2025-01-19 21:12:40,296:INFO:create_model() successfully completed......................................
2025-01-19 21:12:40,406:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:40,406:INFO:Creating metrics dataframe
2025-01-19 21:12:40,419:INFO:Initializing Orthogonal Matching Pursuit
2025-01-19 21:12:40,420:INFO:Total runtime is 0.26222047408421834 minutes
2025-01-19 21:12:40,426:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:40,426:INFO:Initializing create_model()
2025-01-19 21:12:40,427:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:40,429:INFO:Checking exceptions
2025-01-19 21:12:40,429:INFO:Importing libraries
2025-01-19 21:12:40,429:INFO:Copying training dataset
2025-01-19 21:12:40,437:INFO:Defining folds
2025-01-19 21:12:40,437:INFO:Declaring metric variables
2025-01-19 21:12:40,454:INFO:Importing untrained model
2025-01-19 21:12:40,469:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-19 21:12:40,501:INFO:Starting cross validation
2025-01-19 21:12:40,502:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:40,880:INFO:Calculating mean and std
2025-01-19 21:12:40,881:INFO:Creating metrics dataframe
2025-01-19 21:12:40,884:INFO:Uploading results into container
2025-01-19 21:12:40,885:INFO:Uploading model into container now
2025-01-19 21:12:40,885:INFO:_master_model_container: 7
2025-01-19 21:12:40,886:INFO:_display_container: 2
2025-01-19 21:12:40,888:INFO:OrthogonalMatchingPursuit()
2025-01-19 21:12:40,889:INFO:create_model() successfully completed......................................
2025-01-19 21:12:41,000:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:41,000:INFO:Creating metrics dataframe
2025-01-19 21:12:41,014:INFO:Initializing Bayesian Ridge
2025-01-19 21:12:41,014:INFO:Total runtime is 0.2721303701400757 minutes
2025-01-19 21:12:41,023:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:41,024:INFO:Initializing create_model()
2025-01-19 21:12:41,024:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:41,024:INFO:Checking exceptions
2025-01-19 21:12:41,025:INFO:Importing libraries
2025-01-19 21:12:41,025:INFO:Copying training dataset
2025-01-19 21:12:41,032:INFO:Defining folds
2025-01-19 21:12:41,032:INFO:Declaring metric variables
2025-01-19 21:12:41,044:INFO:Importing untrained model
2025-01-19 21:12:41,057:INFO:Bayesian Ridge Imported successfully
2025-01-19 21:12:41,097:INFO:Starting cross validation
2025-01-19 21:12:41,101:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:41,489:INFO:Calculating mean and std
2025-01-19 21:12:41,491:INFO:Creating metrics dataframe
2025-01-19 21:12:41,494:INFO:Uploading results into container
2025-01-19 21:12:41,494:INFO:Uploading model into container now
2025-01-19 21:12:41,495:INFO:_master_model_container: 8
2025-01-19 21:12:41,495:INFO:_display_container: 2
2025-01-19 21:12:41,498:INFO:BayesianRidge()
2025-01-19 21:12:41,498:INFO:create_model() successfully completed......................................
2025-01-19 21:12:41,607:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:41,607:INFO:Creating metrics dataframe
2025-01-19 21:12:41,620:INFO:Initializing Passive Aggressive Regressor
2025-01-19 21:12:41,620:INFO:Total runtime is 0.28223268191019696 minutes
2025-01-19 21:12:41,628:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:41,628:INFO:Initializing create_model()
2025-01-19 21:12:41,629:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:41,629:INFO:Checking exceptions
2025-01-19 21:12:41,630:INFO:Importing libraries
2025-01-19 21:12:41,630:INFO:Copying training dataset
2025-01-19 21:12:41,639:INFO:Defining folds
2025-01-19 21:12:41,639:INFO:Declaring metric variables
2025-01-19 21:12:41,647:INFO:Importing untrained model
2025-01-19 21:12:41,663:INFO:Passive Aggressive Regressor Imported successfully
2025-01-19 21:12:41,689:INFO:Starting cross validation
2025-01-19 21:12:41,694:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:42,348:INFO:Calculating mean and std
2025-01-19 21:12:42,351:INFO:Creating metrics dataframe
2025-01-19 21:12:42,359:INFO:Uploading results into container
2025-01-19 21:12:42,360:INFO:Uploading model into container now
2025-01-19 21:12:42,362:INFO:_master_model_container: 9
2025-01-19 21:12:42,362:INFO:_display_container: 2
2025-01-19 21:12:42,363:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-19 21:12:42,363:INFO:create_model() successfully completed......................................
2025-01-19 21:12:42,557:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:42,558:INFO:Creating metrics dataframe
2025-01-19 21:12:42,578:INFO:Initializing Huber Regressor
2025-01-19 21:12:42,578:INFO:Total runtime is 0.2982097347577413 minutes
2025-01-19 21:12:42,590:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:42,591:INFO:Initializing create_model()
2025-01-19 21:12:42,591:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:42,591:INFO:Checking exceptions
2025-01-19 21:12:42,592:INFO:Importing libraries
2025-01-19 21:12:42,592:INFO:Copying training dataset
2025-01-19 21:12:42,606:INFO:Defining folds
2025-01-19 21:12:42,607:INFO:Declaring metric variables
2025-01-19 21:12:42,625:INFO:Importing untrained model
2025-01-19 21:12:42,639:INFO:Huber Regressor Imported successfully
2025-01-19 21:12:42,669:INFO:Starting cross validation
2025-01-19 21:12:42,678:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:43,343:INFO:Calculating mean and std
2025-01-19 21:12:43,345:INFO:Creating metrics dataframe
2025-01-19 21:12:43,350:INFO:Uploading results into container
2025-01-19 21:12:43,351:INFO:Uploading model into container now
2025-01-19 21:12:43,352:INFO:_master_model_container: 10
2025-01-19 21:12:43,352:INFO:_display_container: 2
2025-01-19 21:12:43,353:INFO:HuberRegressor()
2025-01-19 21:12:43,353:INFO:create_model() successfully completed......................................
2025-01-19 21:12:43,536:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:43,537:INFO:Creating metrics dataframe
2025-01-19 21:12:43,560:INFO:Initializing K Neighbors Regressor
2025-01-19 21:12:43,560:INFO:Total runtime is 0.3145758231480917 minutes
2025-01-19 21:12:43,570:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:43,571:INFO:Initializing create_model()
2025-01-19 21:12:43,571:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:43,571:INFO:Checking exceptions
2025-01-19 21:12:43,572:INFO:Importing libraries
2025-01-19 21:12:43,572:INFO:Copying training dataset
2025-01-19 21:12:43,587:INFO:Defining folds
2025-01-19 21:12:43,596:INFO:Declaring metric variables
2025-01-19 21:12:43,657:INFO:Importing untrained model
2025-01-19 21:12:43,671:INFO:K Neighbors Regressor Imported successfully
2025-01-19 21:12:43,696:INFO:Starting cross validation
2025-01-19 21:12:43,703:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:44,403:INFO:Calculating mean and std
2025-01-19 21:12:44,407:INFO:Creating metrics dataframe
2025-01-19 21:12:44,417:INFO:Uploading results into container
2025-01-19 21:12:44,419:INFO:Uploading model into container now
2025-01-19 21:12:44,419:INFO:_master_model_container: 11
2025-01-19 21:12:44,420:INFO:_display_container: 2
2025-01-19 21:12:44,420:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-19 21:12:44,420:INFO:create_model() successfully completed......................................
2025-01-19 21:12:44,584:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:44,584:INFO:Creating metrics dataframe
2025-01-19 21:12:44,599:INFO:Initializing Decision Tree Regressor
2025-01-19 21:12:44,600:INFO:Total runtime is 0.3319086392720541 minutes
2025-01-19 21:12:44,607:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:44,608:INFO:Initializing create_model()
2025-01-19 21:12:44,608:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:44,608:INFO:Checking exceptions
2025-01-19 21:12:44,609:INFO:Importing libraries
2025-01-19 21:12:44,609:INFO:Copying training dataset
2025-01-19 21:12:44,618:INFO:Defining folds
2025-01-19 21:12:44,618:INFO:Declaring metric variables
2025-01-19 21:12:44,632:INFO:Importing untrained model
2025-01-19 21:12:44,650:INFO:Decision Tree Regressor Imported successfully
2025-01-19 21:12:44,678:INFO:Starting cross validation
2025-01-19 21:12:44,684:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:45,081:INFO:Calculating mean and std
2025-01-19 21:12:45,083:INFO:Creating metrics dataframe
2025-01-19 21:12:45,085:INFO:Uploading results into container
2025-01-19 21:12:45,086:INFO:Uploading model into container now
2025-01-19 21:12:45,087:INFO:_master_model_container: 12
2025-01-19 21:12:45,087:INFO:_display_container: 2
2025-01-19 21:12:45,089:INFO:DecisionTreeRegressor(random_state=123)
2025-01-19 21:12:45,091:INFO:create_model() successfully completed......................................
2025-01-19 21:12:45,198:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:45,198:INFO:Creating metrics dataframe
2025-01-19 21:12:45,213:INFO:Initializing Random Forest Regressor
2025-01-19 21:12:45,213:INFO:Total runtime is 0.3421119888623556 minutes
2025-01-19 21:12:45,218:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:45,219:INFO:Initializing create_model()
2025-01-19 21:12:45,219:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:45,220:INFO:Checking exceptions
2025-01-19 21:12:45,220:INFO:Importing libraries
2025-01-19 21:12:45,220:INFO:Copying training dataset
2025-01-19 21:12:45,230:INFO:Defining folds
2025-01-19 21:12:45,230:INFO:Declaring metric variables
2025-01-19 21:12:45,249:INFO:Importing untrained model
2025-01-19 21:12:45,271:INFO:Random Forest Regressor Imported successfully
2025-01-19 21:12:45,294:INFO:Starting cross validation
2025-01-19 21:12:45,299:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:47,118:INFO:Calculating mean and std
2025-01-19 21:12:47,121:INFO:Creating metrics dataframe
2025-01-19 21:12:47,124:INFO:Uploading results into container
2025-01-19 21:12:47,125:INFO:Uploading model into container now
2025-01-19 21:12:47,126:INFO:_master_model_container: 13
2025-01-19 21:12:47,126:INFO:_display_container: 2
2025-01-19 21:12:47,128:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-19 21:12:47,130:INFO:create_model() successfully completed......................................
2025-01-19 21:12:47,274:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:47,275:INFO:Creating metrics dataframe
2025-01-19 21:12:47,291:INFO:Initializing Extra Trees Regressor
2025-01-19 21:12:47,291:INFO:Total runtime is 0.376746948560079 minutes
2025-01-19 21:12:47,298:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:47,301:INFO:Initializing create_model()
2025-01-19 21:12:47,301:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:47,301:INFO:Checking exceptions
2025-01-19 21:12:47,302:INFO:Importing libraries
2025-01-19 21:12:47,302:INFO:Copying training dataset
2025-01-19 21:12:47,312:INFO:Defining folds
2025-01-19 21:12:47,312:INFO:Declaring metric variables
2025-01-19 21:12:47,328:INFO:Importing untrained model
2025-01-19 21:12:47,362:INFO:Extra Trees Regressor Imported successfully
2025-01-19 21:12:47,392:INFO:Starting cross validation
2025-01-19 21:12:47,399:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:49,129:INFO:Calculating mean and std
2025-01-19 21:12:49,133:INFO:Creating metrics dataframe
2025-01-19 21:12:49,139:INFO:Uploading results into container
2025-01-19 21:12:49,140:INFO:Uploading model into container now
2025-01-19 21:12:49,141:INFO:_master_model_container: 14
2025-01-19 21:12:49,141:INFO:_display_container: 2
2025-01-19 21:12:49,142:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-19 21:12:49,142:INFO:create_model() successfully completed......................................
2025-01-19 21:12:49,252:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:49,252:INFO:Creating metrics dataframe
2025-01-19 21:12:49,269:INFO:Initializing AdaBoost Regressor
2025-01-19 21:12:49,270:INFO:Total runtime is 0.4097288926442465 minutes
2025-01-19 21:12:49,275:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:49,276:INFO:Initializing create_model()
2025-01-19 21:12:49,277:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:49,277:INFO:Checking exceptions
2025-01-19 21:12:49,278:INFO:Importing libraries
2025-01-19 21:12:49,278:INFO:Copying training dataset
2025-01-19 21:12:49,289:INFO:Defining folds
2025-01-19 21:12:49,289:INFO:Declaring metric variables
2025-01-19 21:12:49,309:INFO:Importing untrained model
2025-01-19 21:12:49,325:INFO:AdaBoost Regressor Imported successfully
2025-01-19 21:12:49,455:INFO:Starting cross validation
2025-01-19 21:12:49,458:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:50,790:INFO:Calculating mean and std
2025-01-19 21:12:50,794:INFO:Creating metrics dataframe
2025-01-19 21:12:50,803:INFO:Uploading results into container
2025-01-19 21:12:50,804:INFO:Uploading model into container now
2025-01-19 21:12:50,805:INFO:_master_model_container: 15
2025-01-19 21:12:50,805:INFO:_display_container: 2
2025-01-19 21:12:50,809:INFO:AdaBoostRegressor(random_state=123)
2025-01-19 21:12:50,809:INFO:create_model() successfully completed......................................
2025-01-19 21:12:50,938:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:50,938:INFO:Creating metrics dataframe
2025-01-19 21:12:50,959:INFO:Initializing Gradient Boosting Regressor
2025-01-19 21:12:50,959:INFO:Total runtime is 0.43788787921269745 minutes
2025-01-19 21:12:50,964:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:50,968:INFO:Initializing create_model()
2025-01-19 21:12:50,968:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:50,968:INFO:Checking exceptions
2025-01-19 21:12:50,969:INFO:Importing libraries
2025-01-19 21:12:50,969:INFO:Copying training dataset
2025-01-19 21:12:50,980:INFO:Defining folds
2025-01-19 21:12:50,981:INFO:Declaring metric variables
2025-01-19 21:12:51,000:INFO:Importing untrained model
2025-01-19 21:12:51,024:INFO:Gradient Boosting Regressor Imported successfully
2025-01-19 21:12:51,054:INFO:Starting cross validation
2025-01-19 21:12:51,060:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:52,599:INFO:Calculating mean and std
2025-01-19 21:12:52,604:INFO:Creating metrics dataframe
2025-01-19 21:12:52,613:INFO:Uploading results into container
2025-01-19 21:12:52,615:INFO:Uploading model into container now
2025-01-19 21:12:52,616:INFO:_master_model_container: 16
2025-01-19 21:12:52,616:INFO:_display_container: 2
2025-01-19 21:12:52,617:INFO:GradientBoostingRegressor(random_state=123)
2025-01-19 21:12:52,617:INFO:create_model() successfully completed......................................
2025-01-19 21:12:52,833:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:52,833:INFO:Creating metrics dataframe
2025-01-19 21:12:52,873:INFO:Initializing Light Gradient Boosting Machine
2025-01-19 21:12:52,874:INFO:Total runtime is 0.4698035717010499 minutes
2025-01-19 21:12:52,884:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:52,886:INFO:Initializing create_model()
2025-01-19 21:12:52,887:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:52,888:INFO:Checking exceptions
2025-01-19 21:12:52,889:INFO:Importing libraries
2025-01-19 21:12:52,889:INFO:Copying training dataset
2025-01-19 21:12:52,901:INFO:Defining folds
2025-01-19 21:12:52,901:INFO:Declaring metric variables
2025-01-19 21:12:52,914:INFO:Importing untrained model
2025-01-19 21:12:52,935:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-19 21:12:52,961:INFO:Starting cross validation
2025-01-19 21:12:52,967:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:54,009:INFO:Calculating mean and std
2025-01-19 21:12:54,012:INFO:Creating metrics dataframe
2025-01-19 21:12:54,019:INFO:Uploading results into container
2025-01-19 21:12:54,020:INFO:Uploading model into container now
2025-01-19 21:12:54,021:INFO:_master_model_container: 17
2025-01-19 21:12:54,022:INFO:_display_container: 2
2025-01-19 21:12:54,022:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-19 21:12:54,023:INFO:create_model() successfully completed......................................
2025-01-19 21:12:54,180:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:54,180:INFO:Creating metrics dataframe
2025-01-19 21:12:54,202:INFO:Initializing Dummy Regressor
2025-01-19 21:12:54,203:INFO:Total runtime is 0.4919542988141379 minutes
2025-01-19 21:12:54,212:INFO:SubProcess create_model() called ==================================
2025-01-19 21:12:54,213:INFO:Initializing create_model()
2025-01-19 21:12:54,213:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C2BEEF910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:54,214:INFO:Checking exceptions
2025-01-19 21:12:54,214:INFO:Importing libraries
2025-01-19 21:12:54,214:INFO:Copying training dataset
2025-01-19 21:12:54,226:INFO:Defining folds
2025-01-19 21:12:54,227:INFO:Declaring metric variables
2025-01-19 21:12:54,241:INFO:Importing untrained model
2025-01-19 21:12:54,252:INFO:Dummy Regressor Imported successfully
2025-01-19 21:12:54,298:INFO:Starting cross validation
2025-01-19 21:12:54,300:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:12:54,836:INFO:Calculating mean and std
2025-01-19 21:12:54,843:INFO:Creating metrics dataframe
2025-01-19 21:12:54,857:INFO:Uploading results into container
2025-01-19 21:12:54,858:INFO:Uploading model into container now
2025-01-19 21:12:54,859:INFO:_master_model_container: 18
2025-01-19 21:12:54,859:INFO:_display_container: 2
2025-01-19 21:12:54,860:INFO:DummyRegressor()
2025-01-19 21:12:54,860:INFO:create_model() successfully completed......................................
2025-01-19 21:12:54,999:INFO:SubProcess create_model() end ==================================
2025-01-19 21:12:54,999:INFO:Creating metrics dataframe
2025-01-19 21:12:55,031:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-19 21:12:55,061:INFO:Initializing create_model()
2025-01-19 21:12:55,061:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:12:55,061:INFO:Checking exceptions
2025-01-19 21:12:55,068:INFO:Importing libraries
2025-01-19 21:12:55,069:INFO:Copying training dataset
2025-01-19 21:12:55,089:INFO:Defining folds
2025-01-19 21:12:55,089:INFO:Declaring metric variables
2025-01-19 21:12:55,089:INFO:Importing untrained model
2025-01-19 21:12:55,089:INFO:Declaring custom model
2025-01-19 21:12:55,091:INFO:Bayesian Ridge Imported successfully
2025-01-19 21:12:55,093:INFO:Cross validation set to False
2025-01-19 21:12:55,093:INFO:Fitting Model
2025-01-19 21:12:55,184:INFO:BayesianRidge()
2025-01-19 21:12:55,184:INFO:create_model() successfully completed......................................
2025-01-19 21:12:55,403:INFO:_master_model_container: 18
2025-01-19 21:12:55,403:INFO:_display_container: 2
2025-01-19 21:12:55,404:INFO:BayesianRidge()
2025-01-19 21:12:55,404:INFO:compare_models() successfully completed......................................
2025-01-19 21:13:15,654:INFO:Initializing tune_model()
2025-01-19 21:13:15,654:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>)
2025-01-19 21:13:15,655:INFO:Checking exceptions
2025-01-19 21:13:15,703:INFO:Copying training dataset
2025-01-19 21:13:15,711:INFO:Checking base model
2025-01-19 21:13:15,711:INFO:Base model : Bayesian Ridge
2025-01-19 21:13:15,723:INFO:Declaring metric variables
2025-01-19 21:13:15,738:INFO:Defining Hyperparameters
2025-01-19 21:13:16,212:INFO:Tuning with n_jobs=-1
2025-01-19 21:13:16,212:INFO:Initializing RandomizedSearchCV
2025-01-19 21:13:20,725:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-19 21:13:20,730:INFO:Hyperparameter search completed
2025-01-19 21:13:20,731:INFO:SubProcess create_model() called ==================================
2025-01-19 21:13:20,733:INFO:Initializing create_model()
2025-01-19 21:13:20,733:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000020C15267A90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-19 21:13:20,733:INFO:Checking exceptions
2025-01-19 21:13:20,733:INFO:Importing libraries
2025-01-19 21:13:20,734:INFO:Copying training dataset
2025-01-19 21:13:20,749:INFO:Defining folds
2025-01-19 21:13:20,749:INFO:Declaring metric variables
2025-01-19 21:13:20,762:INFO:Importing untrained model
2025-01-19 21:13:20,763:INFO:Declaring custom model
2025-01-19 21:13:20,778:INFO:Bayesian Ridge Imported successfully
2025-01-19 21:13:20,819:INFO:Starting cross validation
2025-01-19 21:13:20,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:13:21,335:INFO:Calculating mean and std
2025-01-19 21:13:21,337:INFO:Creating metrics dataframe
2025-01-19 21:13:21,348:INFO:Finalizing model
2025-01-19 21:13:21,431:INFO:Uploading results into container
2025-01-19 21:13:21,432:INFO:Uploading model into container now
2025-01-19 21:13:21,433:INFO:_master_model_container: 19
2025-01-19 21:13:21,433:INFO:_display_container: 3
2025-01-19 21:13:21,434:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 21:13:21,434:INFO:create_model() successfully completed......................................
2025-01-19 21:13:21,575:INFO:SubProcess create_model() end ==================================
2025-01-19 21:13:21,576:INFO:choose_better activated
2025-01-19 21:13:21,581:INFO:SubProcess create_model() called ==================================
2025-01-19 21:13:21,581:INFO:Initializing create_model()
2025-01-19 21:13:21,581:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:13:21,582:INFO:Checking exceptions
2025-01-19 21:13:21,593:INFO:Importing libraries
2025-01-19 21:13:21,593:INFO:Copying training dataset
2025-01-19 21:13:21,600:INFO:Defining folds
2025-01-19 21:13:21,601:INFO:Declaring metric variables
2025-01-19 21:13:21,601:INFO:Importing untrained model
2025-01-19 21:13:21,601:INFO:Declaring custom model
2025-01-19 21:13:21,603:INFO:Bayesian Ridge Imported successfully
2025-01-19 21:13:21,604:INFO:Starting cross validation
2025-01-19 21:13:21,606:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-19 21:13:22,051:INFO:Calculating mean and std
2025-01-19 21:13:22,053:INFO:Creating metrics dataframe
2025-01-19 21:13:22,059:INFO:Finalizing model
2025-01-19 21:13:22,135:INFO:Uploading results into container
2025-01-19 21:13:22,136:INFO:Uploading model into container now
2025-01-19 21:13:22,137:INFO:_master_model_container: 20
2025-01-19 21:13:22,137:INFO:_display_container: 4
2025-01-19 21:13:22,137:INFO:BayesianRidge()
2025-01-19 21:13:22,137:INFO:create_model() successfully completed......................................
2025-01-19 21:13:22,260:INFO:SubProcess create_model() end ==================================
2025-01-19 21:13:22,260:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-19 21:13:22,261:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-19 21:13:22,262:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-19 21:13:22,262:INFO:choose_better completed
2025-01-19 21:13:22,288:INFO:_master_model_container: 20
2025-01-19 21:13:22,288:INFO:_display_container: 3
2025-01-19 21:13:22,289:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 21:13:22,289:INFO:tune_model() successfully completed......................................
2025-01-19 21:13:35,193:INFO:Initializing plot_model()
2025-01-19 21:13:35,193:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, system=True)
2025-01-19 21:13:35,194:INFO:Checking exceptions
2025-01-19 21:13:35,204:INFO:Preloading libraries
2025-01-19 21:13:35,205:INFO:Copying training dataset
2025-01-19 21:13:35,205:INFO:Plot type: residuals
2025-01-19 21:13:35,736:INFO:Fitting Model
2025-01-19 21:13:35,741:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 21:13:35,798:INFO:Scoring test/hold-out set
2025-01-19 21:13:36,834:INFO:Visual Rendered Successfully
2025-01-19 21:13:37,011:INFO:plot_model() successfully completed......................................
2025-01-19 21:13:37,014:INFO:Initializing plot_model()
2025-01-19 21:13:37,014:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, system=True)
2025-01-19 21:13:37,014:INFO:Checking exceptions
2025-01-19 21:13:37,026:INFO:Preloading libraries
2025-01-19 21:13:37,027:INFO:Copying training dataset
2025-01-19 21:13:37,027:INFO:Plot type: error
2025-01-19 21:13:37,307:INFO:Fitting Model
2025-01-19 21:13:37,307:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-19 21:13:37,308:INFO:Scoring test/hold-out set
2025-01-19 21:13:37,919:INFO:Visual Rendered Successfully
2025-01-19 21:13:38,081:INFO:plot_model() successfully completed......................................
2025-01-19 21:13:38,082:INFO:Initializing plot_model()
2025-01-19 21:13:38,082:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, system=True)
2025-01-19 21:13:38,083:INFO:Checking exceptions
2025-01-19 21:13:38,092:INFO:Preloading libraries
2025-01-19 21:13:38,093:INFO:Copying training dataset
2025-01-19 21:13:38,093:INFO:Plot type: feature
2025-01-19 21:13:38,728:INFO:Visual Rendered Successfully
2025-01-19 21:13:38,872:INFO:plot_model() successfully completed......................................
2025-01-19 21:13:38,875:INFO:Initializing plot_model()
2025-01-19 21:13:38,875:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, system=True)
2025-01-19 21:13:38,875:INFO:Checking exceptions
2025-01-19 21:13:38,886:INFO:Preloading libraries
2025-01-19 21:13:38,886:INFO:Copying training dataset
2025-01-19 21:13:38,887:INFO:Plot type: cooks
2025-01-19 21:13:39,128:INFO:Fitting Model
2025-01-19 21:13:39,516:INFO:Visual Rendered Successfully
2025-01-19 21:13:39,619:INFO:plot_model() successfully completed......................................
2025-01-19 21:35:57,351:INFO:Initializing evaluate_model()
2025-01-19 21:35:57,352:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-19 21:35:57,383:INFO:Initializing plot_model()
2025-01-19 21:35:57,384:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, system=True)
2025-01-19 21:35:57,384:INFO:Checking exceptions
2025-01-19 21:35:57,389:INFO:Preloading libraries
2025-01-19 21:35:57,391:INFO:Copying training dataset
2025-01-19 21:35:57,391:INFO:Plot type: pipeline
2025-01-19 21:35:57,930:INFO:Visual Rendered Successfully
2025-01-19 21:35:58,065:INFO:plot_model() successfully completed......................................
2025-01-19 21:36:14,163:INFO:Initializing finalize_model()
2025-01-19 21:36:14,163:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-19 21:36:14,164:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-19 21:36:14,172:INFO:Initializing create_model()
2025-01-19 21:36:14,172:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-19 21:36:14,172:INFO:Checking exceptions
2025-01-19 21:36:14,176:INFO:Importing libraries
2025-01-19 21:36:14,177:INFO:Copying training dataset
2025-01-19 21:36:14,178:INFO:Defining folds
2025-01-19 21:36:14,178:INFO:Declaring metric variables
2025-01-19 21:36:14,179:INFO:Importing untrained model
2025-01-19 21:36:14,179:INFO:Declaring custom model
2025-01-19 21:36:14,181:INFO:Bayesian Ridge Imported successfully
2025-01-19 21:36:14,183:INFO:Cross validation set to False
2025-01-19 21:36:14,184:INFO:Fitting Model
2025-01-19 21:36:14,339:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 21:36:14,339:INFO:create_model() successfully completed......................................
2025-01-19 21:36:14,576:INFO:_master_model_container: 20
2025-01-19 21:36:14,576:INFO:_display_container: 3
2025-01-19 21:36:14,587:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 21:36:14,588:INFO:finalize_model() successfully completed......................................
2025-01-19 21:36:28,945:INFO:Initializing predict_model()
2025-01-19 21:36:28,945:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020C2C818D30>)
2025-01-19 21:36:28,946:INFO:Checking exceptions
2025-01-19 21:36:28,946:INFO:Preloading libraries
2025-01-19 21:36:28,951:INFO:Set up data.
2025-01-19 21:36:28,965:INFO:Set up index.
2025-01-19 21:36:29,017:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-19 21:37:38,088:INFO:Initializing save_model()
2025-01-19 21:37:38,088:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-19 21:37:38,088:INFO:Adding model into prep_pipe
2025-01-19 21:37:38,089:WARNING:Only Model saved as it was a pipeline.
2025-01-19 21:37:38,102:INFO:./saved_models/pycaret_best_tips_regression_model.pkl saved in current working directory
2025-01-19 21:37:38,147:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-19 21:37:38,147:INFO:save_model() successfully completed......................................
2025-01-19 21:37:58,747:INFO:Initializing load_model()
2025-01-19 21:37:58,748:INFO:load_model(model_name=./saved_models/pycaret_best_tips_regression_model, platform=None, authentication=None, verbose=True)
2025-01-19 21:38:16,064:INFO:Initializing predict_model()
2025-01-19 21:38:16,064:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000020C2BF2E6D0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Hasnain\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000020C2C221160>)
2025-01-19 21:38:16,064:INFO:Checking exceptions
2025-01-19 21:38:16,064:INFO:Preloading libraries
2025-01-19 21:38:16,069:INFO:Set up data.
2025-01-19 21:38:16,083:INFO:Set up index.
2025-01-19 21:38:16,140:WARNING:c:\Users\Hasnain\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

